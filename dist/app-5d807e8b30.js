!function(){"use strict";angular.module("AnyDayBuddyAds",["ui.router","ngMaterial","uiGmapgoogle-maps"])}(),function(){"use strict";angular.module("AnyDayBuddyAds").constant("_",window._).constant("Dropzone",window.Dropzone).constant("braintree",window.braintree).constant("baseApi","http://api.anydaybuddy.com")}(),function(){"use strict";function e(e,t,o){e.state("home",{url:"/",views:{main:{controller:"HomeController",controllerAs:"vm",templateUrl:"assets/views/home.html"}},authenticate:!1}).state("orders",{url:"/orders",views:{main:{controller:"OrdersController",controllerAs:"vm",templateUrl:"assets/views/orders.html"}},authenticate:!1}),t.otherwise("/")}angular.module("AnyDayBuddyAds").config(e),e.$inject=["$stateProvider","$urlRouterProvider","$locationProvider"]}(),function(){"use strict";function e(e){e.configure({key:"AIzaSyAonFuCDb7HjXUz0uocKbEGUJz91IL9EVs",libraries:"places"})}function t(e,t){e.definePalette("primary",{50:"#9dceda",100:"#65b2c5",200:"#429ab0",300:"#2f6d7c",400:"#265966",500:"#1e4650",600:"#16323a",700:"#0d1f23",800:"#050c0d",900:"#000000",A100:"#9dceda",A200:"#65b2c5",A400:"#265966",A700:"#0d1f23",contrastDefaultColor:"light",contrastDarkColors:"50 100 200 A100 A200"}),e.definePalette("accent",{50:"#d0ebed",100:"#99d4d8",200:"#70c3c8",300:"#43a7ae",400:"#3a9298",500:"#327d82",600:"#29686c",700:"#215256",800:"#183d40",900:"#10282a",A100:"#d0ebed",A200:"#99d4d8",A400:"#3a9298",A700:"#215256",contrastDefaultColor:"light",contrastDarkColors:"50 100 200 300 A100 A200"}),e.definePalette("warn",{50:"#faeee6",100:"#ecc3a7",200:"#e2a379",300:"#d57b3e",400:"#c96b2b",500:"#b05e26",600:"#975121",700:"#7e431b",800:"#643616",900:"#4b2810",A100:"#faeee6",A200:"#ecc3a7",A400:"#c96b2b",A700:"#7e431b",contrastDefaultColor:"light",contrastDarkColors:"50 100 200 300 A100 A200"}),e.theme("default").primaryPalette("primary").accentPalette("accent").warnPalette("warn")}angular.module("AnyDayBuddyAds").config(t).config(e),e.$inject=["uiGmapGoogleMapApiProvider"],t.$inject=["$mdThemingProvider","$locationProvider"]}(),function(){"use strict";function e(){function e(e){return e}return e}angular.module("AnyDayBuddyAds").filter("filter",e)}(),function(){"use strict";function e(e){function t(){}var o=this;o.title="Home Controller",t()}angular.module("AnyDayBuddyAds").controller("HomeController",e),e.$inject=["$rootScope"]}(),function(){"use strict";function e(){function e(e,t,o,n){}var o={restrict:"EA",templateUrl:"assets/views/orders/orders.campaign.html",scope:{options:"=",form:"=",total:"="},link:e,controller:t,controllerAs:"vm",bindToController:!0};return o}function t(e,t){function o(){}o()}angular.module("AnyDayBuddyAds").directive("adbOrdersCampaign",e),t.$inject=["$http","$q"]}(),function(){"use strict";function e(){function e(e,t,o,n){}var o={restrict:"EA",templateUrl:"assets/views/orders/orders.checkout.html",scope:{options:"=",form:"=",total:"="},link:e,controller:t,controllerAs:"vm",bindToController:!0};return o}function t(e,t,o,n,r,a){function i(){a.getClientToken().then(function(e){console.log(e),c(e.clientToken)}).catch(function(e){console.log(e)})}function c(e){t.setup(e,"custom",{paypal:{container:"paypal-container",singleUse:!0,amount:10,currency:"USD",locale:"en_us",enableShippingAddress:!0},onPaymentMethodReceived:function(e){l(e.nonce)},onReady:function(e){s.checkout=e}})}function l(e){console.log(e)}var s=this;s.checkout={},i(),o.$watch("vm.checkout",function(e,t){e&&console.log(e)})}angular.module("AnyDayBuddyAds").directive("adbOrdersCheckout",e),t.$inject=["_","braintree","$scope","$http","$q","DataService"]}(),function(){"use strict";function e(){function e(e,t,o,n){}var o={restrict:"EA",templateUrl:"assets/views/orders/orders.customer.html",scope:{options:"=",form:"=",total:"="},link:e,controller:t,controllerAs:"vm",bindToController:!0};return o}function t(e,t){function o(){}o()}angular.module("AnyDayBuddyAds").directive("adbOrdersCustomer",e),t.$inject=["$http","$q"]}(),function(){"use strict";function e(e,t,o,n){function r(){n.getOptions().then(function(e){console.log(e),l.options.target=a(e),console.log(l.form)}).catch(function(e){console.log(e)})}function a(t){var o=function(t,n){return e.isObject(t)?e.merge({},t,n,o):t||n},n=e.flatten([{},t,o]);return e.merge.apply(e,n)}function i(e,t){o.show({fullscreen:!0,targetEvent:e,clickOutsideToClose:!0,templateUrl:"app/shared/layout/imageModal.html",locals:{image:t},controller:["$scope","image",function(e,t){e.image=t}]})}function c(){o.show({templateUrl:"app/components/ad/advertisementModal.html",clickOutsideToClose:!0,fullscreen:!0})}var l=this;l.openImage=i,l.add=c,l.total=0,l.options={target:{display:[],media:[],impressionsUnits:[],impressionsTime:[],distance:[],age:[],gender:[]}},l.form={media:{},options:{display:{},impressions:{},distance:{},age:{},gender:{}}},r(),t.$watch("vm.form",function(t,o){console.log(t),l.total=t.media.hasOwnProperty("fee")?t.media.fee:0,e.map(t.options,function(e){e.hasOwnProperty("fee")&&(l.total+=l.total*e.fee),e.hasOwnProperty("discount")&&(l.total-=l.total*e.discount)})},!0)}angular.module("AnyDayBuddyAds").controller("OrdersController",e),e.$inject=["_","$scope","$mdDialog","DataService"]}(),function(){"use strict";function e(){function e(e,t,o,n){}var o={restrict:"EA",templateUrl:"assets/views/orders/orders.display.html",scope:{options:"=",form:"=",total:"="},link:e,controller:t,controllerAs:"vm",bindToController:!0};return o}function t(e,t,o,n,r){function a(){o.all([e,t.promise(1)]).then(function(e){var t=e[0],o=e[1][0].map;s.window={pixelOffset:new t.Size(0,(-40)),closeClick:function(){s.marker.show=!1}},m=new t.places.AutocompleteService,p=new t.DirectionsService,d=new t.DirectionsRenderer,s.map.instance=o,d.setMap(s.map.instance),u=new t.places.PlacesService(s.map.instance),s.placesReady=!0,console.log("ready")})}function i(e,t,o,n){console.log(t),r(function(){e.panTo(new google.maps.LatLng(t.latitude,t.longitude)),o&&e.panBy(0,-200)},100)}function c(e,t,o){var r=o[0],a=r.latLng.lat(),i=r.latLng.lng();s.marker={id:Date.now(),location:{latitude:a,longitude:i},show:!1},n.$apply()}function l(){console.log("bounds changed"),!s.map.instance}var s=this,u=null,d=null,p=null,m=null;s.map={center:{latitude:45.50174502816667,longitude:-73.5703881829977},zoom:14,options:{scrollwheel:!0},mapMarker:!0,disableDefaultUI:!0,control:{},events:{click:c,idle:l}},s.info={name:"Venue name",address:"",icon:""},s.marker={id:0,location:{latitude:45.50174502816667,longitude:-73.5703881829977},show:!1},s.dropzone={options:{url:"https://api.cloudinary.com/v1_1/cloud9/ads/upload",uploadMultiple:!1,maxFiles:1,acceptedFiles:"image/*",dictDefaultMessage:"Banner image. Drop or click to upload"},eventHandlers:{sending:function(e,t,o){o.append("api_key",839988333153567),o.append("timestamp",Date.now()/1e3|0),o.append("upload_preset","dzuaxeld")},success:function(e,t){n.$apply(function(){console.log(t),s.data.image=t.secure_url})}}},a(),s.clickMarker=function(){console.log("click"),s.marker.show=!s.marker.show,n.$apply()},s.autocompleteAddress=function(e){var t=o.defer();return m.getQueryPredictions({input:e},function(e){t.resolve(e?_.filter(e,"place_id"):[])}),t.promise},s.getPlace=function(){console.log(s.info.place),s.info.place&&u.getDetails({placeId:s.info.place.place_id},function(e,t){console.log(e,t),s.marker={id:Date.now(),name:e.name,location:{latitude:parseFloat(e.geometry.location.lat()),longitude:parseFloat(e.geometry.location.lng())},show:!0},i(s.map.instance,s.marker.location,null,!0),n.$apply()})}}angular.module("AnyDayBuddyAds").directive("adbDisplayChooser",e),t.$inject=["uiGmapGoogleMapApi","uiGmapIsReady","$q","$scope","$timeout"]}(),function(){"use strict";function e(e,t,o){function n(){var n=t.defer();return e({method:"GET",url:o+"/advertisment/options/"}).success(function(e,t,o,r){n.resolve(e)}).error(function(e){n.reject(e)}),n.promise}function r(){var o=t.defer();return e({method:"GET",url:"http://localhost:1338/commerce/clientToken/"}).success(function(e,t,n,r){o.resolve(e)}).error(function(e){o.reject(e)}),o.promise}var a={getOptions:n,getClientToken:r};return a}angular.module("AnyDayBuddyAds").service("DataService",e),e.$inject=["$http","$q","baseApi"]}(),function(){"use strict";function e(){function e(e,t,o){return{options:{url:"https://api.cloudinary.com/v1_1/cloud9/image/upload",uploadMultiple:!1,maxFiles:1,acceptedFiles:"image/*",dictDefaultMessage:"Drop file or click here to upload",addRemoveLinks:!0},eventHandlers:{sending:function(e,o,n){n.append("api_key",839988333153567),n.append("timestamp",Date.now()/1e3|0),n.append("upload_preset","sm2ev4nu"),t&&t()},success:e,removedfile:o}}}function t(e,t,o){return{options:{url:"https://api.cloudinary.com/v1_1/cloud9/image/upload",maxFiles:e,acceptedFiles:"image/*",dictDefaultMessage:"Drop files or click here to upload"},eventHandlers:{sending:function(e,t,n){n.append("api_key",839988333153567),n.append("timestamp",Date.now()/1e3|0),n.append("upload_preset","sm2ev4nu"),o&&o()},success:t}}}var o={create:e,createMultiple:t};return o}angular.module("AnyDayBuddyAds").service("DropzoneService",e)}(),function(){"use strict";function e(e,t,o){function n(){var e=$rootScope.currentUser;return!!e}function r(n){var r=o.defer();return t({method:"POST",url:e+"login",data:n}).success(function(e){$rootScope.currentUser=e.user,r.resolve(e)}).error(function(e){r.reject(e)}),r.promise}var a={isLoggedIn:n,login:r};return a}angular.module("AnyDayBuddyAds").factory("userService",e),e.$inject=["API_URL","$http","$q"]}(),function(){"use strict";function e(){var e={restrict:"EA",templateUrl:"assets/views/footer/footer.html",controller:t,controllerAs:"vm",bindToController:!0};return e}function t(){function e(){console.log("footer Activated")}e()}angular.module("AnyDayBuddyAds").directive("footerDirective",e),t.$inject=[]}(),function(){"use strict";function e(){var e={restrict:"EA",templateUrl:"assets/views/header/header.html",controller:t,controllerAs:"vm",bindToController:!0};return e}function t(){function e(){console.log("header Activated")}e()}angular.module("AnyDayBuddyAds").directive("headerDirective",e),t.$inject=[]}();
//# sourceMappingURL=data:application/json;base64,
