!function(){"use strict";angular.module("AnyDayBuddyAds",["ui.router","ngMaterial","uiGmapgoogle-maps"])}(),function(){"use strict";angular.module("AnyDayBuddyAds").constant("_",window._).constant("jQuery",window.jQuery).constant("Dropzone",window.Dropzone).constant("braintree",window.braintree).constant("baseApi","http://api.anydaybuddy.com")}(),function(){"use strict";function e(e,o,t){e.state("home",{url:"/",views:{main:{controller:"HomeController",controllerAs:"vm",templateUrl:"assets/views/home.html"}},authenticate:!1}).state("orders",{url:"/orders",views:{main:{controller:"OrdersController",controllerAs:"vm",templateUrl:"assets/views/orders.html"}},authenticate:!1}),o.otherwise("/")}angular.module("AnyDayBuddyAds").config(e),e.$inject=["$stateProvider","$urlRouterProvider","$locationProvider"]}(),function(){"use strict";function e(e){e.configure({key:"AIzaSyAonFuCDb7HjXUz0uocKbEGUJz91IL9EVs",libraries:"places"})}function o(e,o){e.definePalette("primary",{50:"#9dceda",100:"#65b2c5",200:"#429ab0",300:"#2f6d7c",400:"#265966",500:"#1e4650",600:"#16323a",700:"#0d1f23",800:"#050c0d",900:"#000000",A100:"#9dceda",A200:"#65b2c5",A400:"#265966",A700:"#0d1f23",contrastDefaultColor:"light",contrastDarkColors:"50 100 200 A100 A200"}),e.definePalette("accent",{50:"#d0ebed",100:"#99d4d8",200:"#70c3c8",300:"#43a7ae",400:"#3a9298",500:"#327d82",600:"#29686c",700:"#215256",800:"#183d40",900:"#10282a",A100:"#d0ebed",A200:"#99d4d8",A400:"#3a9298",A700:"#215256",contrastDefaultColor:"light",contrastDarkColors:"50 100 200 300 A100 A200"}),e.definePalette("warn",{50:"#faeee6",100:"#ecc3a7",200:"#e2a379",300:"#d57b3e",400:"#c96b2b",500:"#b05e26",600:"#975121",700:"#7e431b",800:"#643616",900:"#4b2810",A100:"#faeee6",A200:"#ecc3a7",A400:"#c96b2b",A700:"#7e431b",contrastDefaultColor:"light",contrastDarkColors:"50 100 200 300 A100 A200"}),e.theme("default").primaryPalette("primary").accentPalette("accent").warnPalette("warn")}angular.module("AnyDayBuddyAds").config(o).config(e),e.$inject=["uiGmapGoogleMapApiProvider"],o.$inject=["$mdThemingProvider","$locationProvider"]}(),function(){"use strict";function e(){function e(e){return e}return e}angular.module("AnyDayBuddyAds").filter("filter",e)}(),function(){"use strict";function e(e,o){function t(){}function n(e){o("html, body").animate({scrollTop:o(e).offset().top},1e3)}var r=this;r.title="Home Controller",r.scrollTo=n,t()}angular.module("AnyDayBuddyAds").controller("HomeController",e),e.$inject=["$rootScope","jQuery"]}(),function(){"use strict";function e(){function e(e,o,t,n){}var t={restrict:"EA",templateUrl:"assets/views/orders/orders.campaign.html",scope:{options:"=",form:"=",total:"="},link:e,controller:o,controllerAs:"vm",bindToController:!0};return t}function o(e,o){function t(){}t()}angular.module("AnyDayBuddyAds").directive("adbOrdersCampaign",e),o.$inject=["$http","$q"]}(),function(){"use strict";function e(){function e(e,o,t,n){}var t={restrict:"EA",templateUrl:"assets/views/orders/orders.checkout.html",scope:{options:"=",form:"=",total:"="},link:e,controller:o,controllerAs:"vm",bindToController:!0};return t}function o(e,o,t,n,r,i){function a(){i.getClientToken().then(function(e){console.log(e),c(e.clientToken)}).catch(function(e){console.log(e)})}function c(e){o.setup(e,"custom",{paypal:{container:"paypal-container",singleUse:!0,amount:10,currency:"USD",locale:"en_us",enableShippingAddress:!0},onPaymentMethodReceived:function(e){l(e.nonce)},onReady:function(e){s.checkout=e}})}function l(e){console.log(e)}var s=this;s.checkout={},a(),t.$watch("vm.checkout",function(e,o){e&&console.log(e)})}angular.module("AnyDayBuddyAds").directive("adbOrdersCheckout",e),o.$inject=["_","braintree","$scope","$http","$q","DataService"]}(),function(){"use strict";function e(){function e(e,o,t,n){}var t={restrict:"EA",templateUrl:"assets/views/orders/orders.customer.html",scope:{options:"=",form:"=",total:"="},link:e,controller:o,controllerAs:"vm",bindToController:!0};return t}function o(e,o){function t(){}t()}angular.module("AnyDayBuddyAds").directive("adbOrdersCustomer",e),o.$inject=["$http","$q"]}(),function(){"use strict";function e(e,o,t,n){function r(){n.getOptions().then(function(e){console.log(e),l.options.target=i(e),console.log(l.form)}).catch(function(e){console.log(e)})}function i(o){var t=function(o,n){return e.isObject(o)?e.merge({},o,n,t):o||n},n=e.flatten([{},o,t]);return e.merge.apply(e,n)}function a(e,o){t.show({fullscreen:!0,targetEvent:e,clickOutsideToClose:!0,templateUrl:"app/shared/layout/imageModal.html",locals:{image:o},controller:["$scope","image",function(e,o){e.image=o}]})}function c(){t.show({templateUrl:"app/components/ad/advertisementModal.html",clickOutsideToClose:!0,fullscreen:!0})}var l=this;l.openImage=a,l.add=c,l.total=0,l.options={target:{display:[],media:[],impressionsUnits:[],impressionsTime:[],distance:[],age:[],gender:[]}},l.form={media:{},options:{display:{},impressions:{},distance:{},age:{},gender:{}}},r(),o.$watch("vm.form",function(o,t){console.log(o),l.total=o.media.hasOwnProperty("fee")?o.media.fee:0,e.map(o.options,function(e){e.hasOwnProperty("fee")&&(l.total+=l.total*e.fee),e.hasOwnProperty("discount")&&(l.total-=l.total*e.discount)})},!0)}angular.module("AnyDayBuddyAds").controller("OrdersController",e),e.$inject=["_","$scope","$mdDialog","DataService"]}(),function(){"use strict";function e(){function e(e,o,t,n){}var t={restrict:"EA",templateUrl:"assets/views/orders/orders.display.html",scope:{options:"=",form:"=",total:"="},link:e,controller:o,controllerAs:"vm",bindToController:!0};return t}function o(e,o,t,n,r,i){function a(){t.all([e,o.promise(1)]).then(function(e){var o=e[0],t=e[1][0].map;u.window={pixelOffset:new o.Size(0,(-40)),closeClick:function(){u.marker.show=!1}},m=new o.places.AutocompleteService,f=new o.DirectionsService,p=new o.DirectionsRenderer,u.map.instance=t,p.setMap(u.map.instance),d=new o.places.PlacesService(u.map.instance),u.placesReady=!0,console.log("ready")})}function c(e,o,t,n){console.log(o),r(function(){e.panTo(new google.maps.LatLng(o.latitude,o.longitude)),t&&e.panBy(0,-200)},100)}function l(e,o,t){var r=t[0],i=r.latLng.lat(),a=r.latLng.lng();u.marker={id:Date.now(),location:{latitude:i,longitude:a},show:!1},n.$apply()}function s(){console.log("bounds changed"),!u.map.instance}var u=this,d=null,p=null,f=null,m=null;u.control={uploading:!1},u.map={center:{latitude:45.50174502816667,longitude:-73.5703881829977},zoom:14,options:{scrollwheel:!0},mapMarker:!0,disableDefaultUI:!0,control:{},events:{click:l,idle:s}},u.info={name:"Venue name",address:"",icon:""},u.marker={id:0,location:{latitude:45.50174502816667,longitude:-73.5703881829977},show:!1},u.dropzone=i.create(function(e,o){n.$apply(function(){console.log(o.secure_url),u.control.uploading=!1})},function(){n.$apply(function(){u.control.uploading=!0})}),a(),u.clickMarker=function(){console.log("click"),u.marker.show=!u.marker.show,n.$apply()},u.autocompleteAddress=function(e){var o=t.defer();return m.getQueryPredictions({input:e},function(e){o.resolve(e?_.filter(e,"place_id"):[])}),o.promise},u.getPlace=function(){console.log(u.info.place),u.info.place&&d.getDetails({placeId:u.info.place.place_id},function(e,o){console.log(e,o),u.marker={id:Date.now(),name:e.name,location:{latitude:parseFloat(e.geometry.location.lat()),longitude:parseFloat(e.geometry.location.lng())},show:!0},c(u.map.instance,u.marker.location,null,!0),n.$apply()})}}angular.module("AnyDayBuddyAds").directive("adbDisplayChooser",e),o.$inject=["uiGmapGoogleMapApi","uiGmapIsReady","$q","$scope","$timeout","DropzoneService"]}(),function(){"use strict";function e(e,o,t){function n(){var n=o.defer();return e({method:"GET",url:t+"/campaign/options/"}).success(function(e,o,t,r){n.resolve(e)}).error(function(e){n.reject(e)}),n.promise}function r(){var n=o.defer();return e({method:"GET",url:t+"/commerce/clientToken/"}).success(function(e,o,t,r){n.resolve(e)}).error(function(e){n.reject(e)}),n.promise}var i={getOptions:n,getClientToken:r};return i}angular.module("AnyDayBuddyAds").service("DataService",e),e.$inject=["$http","$q","baseApi"]}(),function(){"use strict";function e(){function e(e,o,t){return{options:{url:"https://api.cloudinary.com/v1_1/cloud9/image/upload",uploadMultiple:!1,maxFiles:1,acceptedFiles:"image/*",dictDefaultMessage:"Drop file or click here to upload",addRemoveLinks:!0},eventHandlers:{sending:function(e,t,n){n.append("api_key",839988333153567),n.append("timestamp",Date.now()/1e3|0),n.append("upload_preset","sm2ev4nu"),o&&o()},success:e,removedfile:t}}}function o(e,o,t){return{options:{url:"https://api.cloudinary.com/v1_1/cloud9/image/upload",maxFiles:e,acceptedFiles:"image/*",dictDefaultMessage:"Drop files or click here to upload"},eventHandlers:{sending:function(e,o,n){n.append("api_key",839988333153567),n.append("timestamp",Date.now()/1e3|0),n.append("upload_preset","sm2ev4nu"),t&&t()},success:o}}}var t={create:e,createMultiple:o};return t}angular.module("AnyDayBuddyAds").service("DropzoneService",e)}(),function(){"use strict";function e(e,o,t){function n(){var e=$rootScope.currentUser;return!!e}function r(n){var r=t.defer();return o({method:"POST",url:e+"login",data:n}).success(function(e){$rootScope.currentUser=e.user,r.resolve(e)}).error(function(e){r.reject(e)}),r.promise}var i={isLoggedIn:n,login:r};return i}angular.module("AnyDayBuddyAds").factory("userService",e),e.$inject=["API_URL","$http","$q"]}(),function(){"use strict";function e(e){function o(o,t,n){var r,i;r=o.dropzone,i=new e(t[0],r.options),o.reset&&i.on("complete",function(e){i.removeFile(e)}),angular.forEach(r.eventHandlers,function(e,o){i.on(o,e)})}var t={link:o,restrict:"EA",scope:{dropzone:"=dropzone",reset:"@reset"}};return t}angular.module("AnyDayBuddyAds").directive("dropzone",e),e.$inject=["Dropzone"]}(),function(){"use strict";function e(){var e={restrict:"EA",templateUrl:"assets/views/footer/footer.html",controller:o,controllerAs:"vm",bindToController:!0};return e}function o(){function e(){console.log("footer Activated")}e()}angular.module("AnyDayBuddyAds").directive("footerDirective",e),o.$inject=[]}(),function(){"use strict";function e(){var e={restrict:"EA",templateUrl:"assets/views/header/header.html",controller:o,controllerAs:"vm",bindToController:!0};return e}function o(){function e(){console.log("header Activated")}e()}angular.module("AnyDayBuddyAds").directive("headerDirective",e),o.$inject=[]}();
//# sourceMappingURL=data:application/json;base64,
