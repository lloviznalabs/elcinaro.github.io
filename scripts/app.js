!function(){"use strict";angular.module("AnyDayBuddyAds",["ui.router","ngMaterial","uiGmapgoogle-maps"])}(),function(){"use strict";angular.module("AnyDayBuddyAds").constant("_",window._).constant("jQuery",window.jQuery).constant("Dropzone",window.Dropzone).constant("braintree",window.braintree).constant("baseApi","https://api.anydaybuddy.com")}(),function(){"use strict";function e(e){e.configure({key:"AIzaSyAonFuCDb7HjXUz0uocKbEGUJz91IL9EVs",libraries:"places"})}function t(e,t){e.definePalette("primary",{50:"#9dceda",100:"#65b2c5",200:"#429ab0",300:"#2f6d7c",400:"#265966",500:"#1e4650",600:"#16323a",700:"#0d1f23",800:"#050c0d",900:"#000000",A100:"#9dceda",A200:"#65b2c5",A400:"#265966",A700:"#0d1f23",contrastDefaultColor:"light",contrastDarkColors:"50 100 200 A100 A200"}),e.definePalette("accent",{50:"#d0ebed",100:"#99d4d8",200:"#70c3c8",300:"#43a7ae",400:"#3a9298",500:"#327d82",600:"#29686c",700:"#215256",800:"#183d40",900:"#10282a",A100:"#d0ebed",A200:"#99d4d8",A400:"#3a9298",A700:"#215256",contrastDefaultColor:"light",contrastDarkColors:"50 100 200 300 A100 A200"}),e.definePalette("warn",{50:"#faeee6",100:"#ecc3a7",200:"#e2a379",300:"#d57b3e",400:"#c96b2b",500:"#b05e26",600:"#975121",700:"#7e431b",800:"#643616",900:"#4b2810",A100:"#faeee6",A200:"#ecc3a7",A400:"#c96b2b",A700:"#7e431b",contrastDefaultColor:"light",contrastDarkColors:"50 100 200 300 A100 A200"}),e.theme("default").primaryPalette("primary").accentPalette("accent").warnPalette("warn")}angular.module("AnyDayBuddyAds").config(t).config(e),e.$inject=["uiGmapGoogleMapApiProvider"],t.$inject=["$mdThemingProvider","$locationProvider"]}(),function(){"use strict";function e(e,t,o){e.$on("$stateChangeStart",function(t,o){e.fill="login"===o.name})}angular.module("AnyDayBuddyAds").run(e),e.$inject=["$rootScope","$state","Auth"]}(),function(){"use strict";function e(e,t,o){e.state("home",{url:"/",views:{main:{controller:"HomeController",controllerAs:"vm",templateUrl:"assets/views/home.html"}},authenticate:!1}).state("dashboard",{url:"/dashboard",views:{main:{controller:"DashboardController",controllerAs:"vm",templateUrl:"assets/views/dashboard/index.html"}},authenticate:!1}).state("dashboard.content",{url:"/content",views:{dashboard:{controller:"DashboardController",controllerAs:"vm",templateUrl:"assets/views/dashboard/content.html"}},authenticate:!1}).state("orders",{url:"/orders",views:{main:{controller:"OrdersController",controllerAs:"vm",templateUrl:"assets/views/orders.html"}},authenticate:!1}).state("login",{url:"/login",views:{main:{controller:"LoginController",controllerAs:"vm",templateUrl:"assets/views/login.html"}},authenticate:!1}),t.otherwise("/")}angular.module("AnyDayBuddyAds").config(e),e.$inject=["$stateProvider","$urlRouterProvider","$locationProvider"]}(),function(){"use strict";function e(e,t){}e.$inject=["$http","$q"],angular.module("AnyDayBuddyAds").controller("DashboardController",e)}(),function(){"use strict";function e(e,t){function o(){}function n(e){t("html, body").animate({scrollTop:t(e).offset().top},1e3)}var r=this;r.title="Home Controller",r.scrollTo=n,o()}angular.module("AnyDayBuddyAds").controller("HomeController",e),e.$inject=["$rootScope","jQuery"]}(),function(){"use strict";function e(e){var t=this;t.login=function(){console.log("LOGIN",t.user),e.login(t.user).then(function(e){console.log(e)})}}angular.module("AnyDayBuddyAds").controller("LoginController",e),e.$inject=["Auth"]}(),function(){"use strict";function e(){function e(e,t,o,n){}var o={restrict:"EA",templateUrl:"assets/views/orders/orders.campaign.html",scope:{options:"=",form:"=",total:"="},link:e,controller:t,controllerAs:"vm",bindToController:!0};return o}function t(e,t){function o(){}o()}angular.module("AnyDayBuddyAds").directive("adbOrdersCampaign",e),t.$inject=["$http","$q"]}(),function(){"use strict";function e(){function e(e,t,o,n){}var o={restrict:"EA",templateUrl:"assets/views/orders/orders.checkout.html",scope:{options:"=",form:"=",total:"="},link:e,controller:t,controllerAs:"vm",bindToController:!0};return o}function t(e,t,o,n,r,i){function s(){i.getClientToken().then(function(e){console.log(e),a(e.clientToken)}).catch(function(e){console.log(e)})}function a(e){t.setup(e,"custom",{paypal:{container:"paypal-container",singleUse:!0,amount:"0",currency:"USD",locale:"en_us",enableShippingAddress:!1},onPaymentMethodReceived:function(e){c(e.nonce)},onReady:function(e){l.checkout=e}})}function c(e){console.log(e)}var l=this;l.checkout={},s(),l.launch=function(){console.log(l.checkout,l.form)},o.$watch("vm.checkout",function(e,t){e&&console.log(e)})}angular.module("AnyDayBuddyAds").directive("adbOrdersCheckout",e),t.$inject=["_","braintree","$scope","$http","$q","DataService"]}(),function(){"use strict";function e(){function e(e,t,o,n){}var o={restrict:"EA",templateUrl:"assets/views/orders/orders.customer.html",scope:{options:"=",form:"=",total:"=",control:"="},link:e,controller:t,controllerAs:"vm",bindToController:!0};return o}function t(e,t){function o(){}var n=this;o(),n.nextTab=function(){n.control.selectedTab+=1}}angular.module("AnyDayBuddyAds").directive("adbOrdersCustomer",e),t.$inject=["$http","$q"]}(),function(){"use strict";function e(e,t,o,n){function r(){n.getOptions().then(function(e){console.log(e),c.options.target=i(e),console.log(c.form)}).catch(function(e){console.log(e)})}function i(t){var o=function(t,n){return e.isObject(t)?e.merge({},t,n,o):t||n},n=e.flatten([{},t,o]);return e.merge.apply(e,n)}function s(e,t){o.show({fullscreen:!0,targetEvent:e,clickOutsideToClose:!0,templateUrl:"app/shared/layout/imageModal.html",locals:{image:t},controller:["$scope","image",function(e,t){e.image=t}]})}function a(){o.show({templateUrl:"app/components/ad/advertisementModal.html",clickOutsideToClose:!0,fullscreen:!0})}var c=this;c.openImage=s,c.add=a,c.total=0,c.control={selectedTab:0},c.options={target:{display:[],media:[],impressionsUnits:[],impressionsTime:[],distance:[],age:[],gender:[]}},c.form={media:{},options:{display:{},impressions:{},distance:{},age:{},gender:{},interests:{}},customer:{},auth:{}},r(),t.$watch("vm.form",function(t,o){console.log(t),c.total=t.media.hasOwnProperty("fee")?t.media.fee:0,e.map(t.options,function(e){e.hasOwnProperty("fee")&&(c.total+=c.total*e.fee),e.hasOwnProperty("discount")&&(c.total-=c.total*e.discount)})},!0)}angular.module("AnyDayBuddyAds").controller("OrdersController",e),e.$inject=["_","$scope","$mdDialog","DataService"]}(),function(){"use strict";function e(){function e(e,t,o,n){}var o={restrict:"EA",templateUrl:"assets/views/orders/orders.resume.html",scope:{options:"=",form:"=",total:"="},link:e,controller:t,controllerAs:"vm",bindToController:!0};return o}function t(e,t,o){function n(){}var r=this;n(),r.formatImpressions=function(){if(r.form.impressionType&&r.form.options.impressions.hasOwnProperty("id")){var t={impressionsUnits:e.join([r.form.options.impressions.quantity,r.form.options.impressions.type]," "),impressionsTime:e.join([r.form.options.impressions.time,r.form.options.impressions.period]," ")};return t[r.form.impressionType]}},r.formatTarget=function(){var t={distance:{value:r.form.options.distance,render:e.join(["Distance:",r.form.options.distance.distance||"","Km"]," ")},age:{value:r.form.options.age,render:e.join(["Age between:",e.join(r.form.options.age.range,"-")]," ")},gender:{value:r.form.options.gender,render:e.join(["Gender:",r.form.options.gender.gender]," ")},interests:{value:r.form.options.interests,render:e.join(["Interests:",r.form.options.interests.quantity]," ")}},o=e.pickBy(t,function(e){return e.value.hasOwnProperty("id")});return e.isEmpty(o)?"":e.join(["Target: ",e.map(Object.keys(o),function(e){return t[e].render})],"")},r.formatResume=function(){return resume}}angular.module("AnyDayBuddyAds").directive("adbOrdersResume",e),t.$inject=["_","$http","$q"]}(),function(){"use strict";function e(){function e(e,t,o,n){}var o={restrict:"EA",templateUrl:"assets/views/orders/orders.display.html",scope:{options:"=",form:"=",total:"="},link:e,controller:t,controllerAs:"vm",bindToController:!0};return o}function t(e,t,o,n,r,i){function s(){o.all([e,t.promise(1)]).then(function(e){var t=e[0],o=e[1][0].map;u.window={pixelOffset:new t.Size(0,(-40)),closeClick:function(){u.marker.show=!1}},m=new t.places.AutocompleteService,f=new t.DirectionsService,p=new t.DirectionsRenderer,u.map.instance=o,p.setMap(u.map.instance),d=new t.places.PlacesService(u.map.instance),u.placesReady=!0,console.log("ready")})}function a(e,t,o,n){console.log(t),r(function(){e.panTo(new google.maps.LatLng(t.latitude,t.longitude)),o&&e.panBy(0,-200)},100)}function c(e,t,o){var r=o[0],i=r.latLng.lat(),s=r.latLng.lng();u.marker={id:Date.now(),location:{latitude:i,longitude:s},show:!1},n.$apply()}function l(){console.log("bounds changed"),!u.map.instance}var u=this,d=null,p=null,f=null,m=null;u.control={uploading:!1},u.map={center:{latitude:45.50174502816667,longitude:-73.5703881829977},zoom:14,options:{scrollwheel:!0},mapMarker:!0,disableDefaultUI:!0,control:{},events:{click:c,idle:l}},u.info={name:"Venue name",address:"",icon:""},u.marker={id:0,location:{latitude:45.50174502816667,longitude:-73.5703881829977},show:!1},u.dropzone=i.create(function(e,t){n.$apply(function(){console.log(t.secure_url),u.control.uploading=!1})},function(){n.$apply(function(){u.control.uploading=!0})}),s(),u.clickMarker=function(){console.log("click"),u.marker.show=!u.marker.show,n.$apply()},u.autocompleteAddress=function(e){var t=o.defer();return m.getQueryPredictions({input:e},function(e){t.resolve(e?_.filter(e,"place_id"):[])}),t.promise},u.getPlace=function(){console.log(u.info.place),u.info.place&&d.getDetails({placeId:u.info.place.place_id},function(e,t){console.log(e,t),u.marker={id:Date.now(),name:e.name,location:{latitude:parseFloat(e.geometry.location.lat()),longitude:parseFloat(e.geometry.location.lng())},show:!0},a(u.map.instance,u.marker.location,null,!0),n.$apply()})}}angular.module("AnyDayBuddyAds").directive("adbDisplayChooser",e),t.$inject=["uiGmapGoogleMapApi","uiGmapIsReady","$q","$scope","$timeout","DropzoneService"]}(),function(){"use strict";function e(e,t,o,n,r,i,s){function a(t){var r=n.defer();return o.post(e+"/auth/validate/"+t).success(function(e){r.resolve(e)}).error(function(e){r.reject(e)}),r.promise}function c(t){var r=n.defer();return o.post(e+"/auth/login",t).success(function(e,t,o,n){r.resolve(e),e.hasOwnProperty("token")&&(angular.copy(e.user,i.user),s.set("access_token",e.token),s.setObject("user",e.user))}).error(function(e){r.reject(e)}),r.promise}function l(t){var r=n.defer();return o.post(e+"/auth/register",t).success(function(e,t,o,n){r.resolve(e)}).error(function(e){r.reject(e)}),r.promise}function u(t,r){var i=n.defer();return o.post(e+"/auth/resetpassword/"+t,r).success(function(e,t,o,n){i.resolve(e)}).error(function(e){i.reject(e)}),i.promise}function d(t){var r=n.defer();return o.post(e+"/auth/resetPasswordRequest",t).success(function(e,t,o,n){r.resolve(e)}).error(function(e){r.reject(e)}),r.promise}function p(){s.remove("user"),s.remove("access_token"),s.remove("original_user"),i.isAuthenticated=!1,i.user=null,i.view="auth",i.currentState="login",t.location.reload()}function f(e,t){e.hasOwnProperty("token")?(!t&&s.get("access_token")||s.set("access_token",e.token),i.user=e.user,s.setObject("user",e.user)):console.log("Bad Date",e)}function m(){return s.get("access_token")}var g={validate:a,isAuthenticated:m,login:c,logout:p,register:l,forgot:d,reset:u,setCredentials:f};return g}function t(e,t,o){function n(e){var o;return t.get("access_token")&&(o=t.get("access_token")),o&&(e.headers.Authorization="Bearer "+o),e}function r(n){return 401!==n.status&&403!==n.status||(t.remove("access_token"),o.get("$state").go("login")),e.reject(n)}var i={request:n,responseError:r};return i}t.$inject=["$q","$localstorage","$injector"],angular.module("AnyDayBuddyAds").factory("Auth",e).factory("AuthInterceptor",t).config(["$httpProvider",function(e){e.interceptors.push("AuthInterceptor"),e.defaults.withCredentials=!0}]),e.$inject=["baseApi","$window","$http","$q","$state","$rootScope","$localstorage"]}(),function(){"use strict";function e(e,t,o){function n(){var n=t.defer();return e({method:"GET",url:o+"/campaign/options/"}).success(function(e,t,o,r){n.resolve(e)}).error(function(e){n.reject(e)}),n.promise}function r(){var o=t.defer();return e({method:"GET",url:"http://localhost:1338/commerce/clientToken/"}).success(function(e,t,n,r){o.resolve(e)}).error(function(e){o.reject(e)}),o.promise}function i(o){var n=t.defer();return e.post("http://localhost:1338/campaign/create/",o).success(function(e){n.resolve(e)}).error(function(e){n.reject(e)}),n.promise}var s={getOptions:n,getClientToken:r,createCampaign:i};return s}angular.module("AnyDayBuddyAds").service("DataService",e),e.$inject=["$http","$q","baseApi"]}(),function(){"use strict";function e(){function e(e,t,o){return{options:{url:"https://api.cloudinary.com/v1_1/cloud9/image/upload",uploadMultiple:!1,maxFiles:1,acceptedFiles:"image/*",dictDefaultMessage:"Drop file or click here to upload",addRemoveLinks:!0},eventHandlers:{sending:function(e,o,n){n.append("api_key",839988333153567),n.append("timestamp",Date.now()/1e3|0),n.append("upload_preset","sm2ev4nu"),t&&t()},success:e,removedfile:o}}}function t(e,t,o){return{options:{url:"https://api.cloudinary.com/v1_1/cloud9/image/upload",maxFiles:e,acceptedFiles:"image/*",dictDefaultMessage:"Drop files or click here to upload"},eventHandlers:{sending:function(e,t,n){n.append("api_key",839988333153567),n.append("timestamp",Date.now()/1e3|0),n.append("upload_preset","sm2ev4nu"),o&&o()},success:t}}}var o={create:e,createMultiple:t};return o}angular.module("AnyDayBuddyAds").service("DropzoneService",e)}(),function(){"use strict";function e(e){function t(t,o){e.localStorage[t]=o}function o(t,o){return e.localStorage[t]||o}function n(t,o){e.localStorage[t]=JSON.stringify(o)}function r(t,o){return JSON.parse(e.localStorage[t]||o||"{}")}function i(t){return e.localStorage.removeItem(t)}var s={set:t,get:o,setObject:n,getObject:r,remove:i};return s}angular.module("AnyDayBuddyAds").factory("$localstorage",e),e.$inject=["$window"]}(),function(){"use strict";function e(e){function t(t,o,n){var r,i;r=t.dropzone,i=new e(o[0],r.options),t.reset&&i.on("complete",function(e){i.removeFile(e)}),angular.forEach(r.eventHandlers,function(e,t){i.on(t,e)})}var o={link:t,restrict:"EA",scope:{dropzone:"=dropzone",reset:"@reset"}};return o}angular.module("AnyDayBuddyAds").directive("dropzone",e),e.$inject=["Dropzone"]}(),function(){"use strict";function e(){var e={restrict:"EA",templateUrl:"assets/views/footer/footer.html",controller:t,controllerAs:"vm",bindToController:!0};return e}function t(){function e(){console.log("footer Activated")}e()}angular.module("AnyDayBuddyAds").directive("footerDirective",e),t.$inject=[]}(),function(){"use strict";function e(){var e={restrict:"EA",templateUrl:"assets/views/header/header.html",controller:t,controllerAs:"vm",bindToController:!0};return e}function t(){function e(){console.log("header Activated")}e()}angular.module("AnyDayBuddyAds").directive("headerDirective",e),t.$inject=[]}();
//# sourceMappingURL=data:application/json;base64,
