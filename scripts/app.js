!function(){"use strict";angular.module("AnyDayBuddyAds",["ui.router","ngMaterial","uiGmapgoogle-maps"])}(),function(){"use strict";angular.module("AnyDayBuddyAds").constant("_",window._).constant("jQuery",window.jQuery).constant("Dropzone",window.Dropzone).constant("braintree",window.braintree).constant("baseApi","http://localhost:1338")}(),function(){"use strict";function e(e){e.configure({key:"AIzaSyAonFuCDb7HjXUz0uocKbEGUJz91IL9EVs",libraries:"places"})}function n(e,n){e.definePalette("primary",{50:"#9dceda",100:"#65b2c5",200:"#429ab0",300:"#2f6d7c",400:"#265966",500:"#1e4650",600:"#16323a",700:"#0d1f23",800:"#050c0d",900:"#000000",A100:"#9dceda",A200:"#65b2c5",A400:"#265966",A700:"#0d1f23",contrastDefaultColor:"light",contrastDarkColors:"50 100 200 A100 A200"}),e.definePalette("accent",{50:"#d0ebed",100:"#99d4d8",200:"#70c3c8",300:"#43a7ae",400:"#3a9298",500:"#327d82",600:"#29686c",700:"#215256",800:"#183d40",900:"#10282a",A100:"#d0ebed",A200:"#99d4d8",A400:"#3a9298",A700:"#215256",contrastDefaultColor:"light",contrastDarkColors:"50 100 200 300 A100 A200"}),e.definePalette("warn",{50:"#faeee6",100:"#ecc3a7",200:"#e2a379",300:"#d57b3e",400:"#c96b2b",500:"#b05e26",600:"#975121",700:"#7e431b",800:"#643616",900:"#4b2810",A100:"#faeee6",A200:"#ecc3a7",A400:"#c96b2b",A700:"#7e431b",contrastDefaultColor:"light",contrastDarkColors:"50 100 200 300 A100 A200"}),e.theme("default").primaryPalette("primary").accentPalette("accent").warnPalette("warn")}angular.module("AnyDayBuddyAds").config(n).config(e),e.$inject=["uiGmapGoogleMapApiProvider"],n.$inject=["$mdThemingProvider","$locationProvider"]}(),function(){"use strict";function e(e,n,t){e.$state=n,t.isAuthenticated()&&(e.user=t.getUser()),e.$on("$stateChangeStart",function(a,o){e.fill=["login"].indexOf(o.name)!==-1,e.fixed=["dashboard","dashboard.campaigns","dashboard.profile"].indexOf(o.name)!==-1,o.authenticate&&!t.isAuthenticated()&&(a.preventDefault(),n.transitionTo("login"))})}angular.module("AnyDayBuddyAds").run(e),e.$inject=["$rootScope","$state","Auth"]}(),function(){"use strict";function e(e,n,t){e.state("home",{url:"/",views:{main:{controller:"HomeController",controllerAs:"vm",templateUrl:"assets/views/home.html"}},authenticate:!1}).state("dashboard",{url:"/dashboard",views:{main:{controller:"DashboardController",controllerAs:"vm",templateUrl:"assets/views/dashboard/index.html"}},authenticate:!0}).state("dashboard.profile",{url:"/profile",views:{dashboard:{controller:"ProfileController",controllerAs:"vm",templateUrl:"assets/views/dashboard/profile.html"}},authenticate:!0}).state("dashboard.campaigns",{url:"/campaigns/:id",views:{dashboard:{controller:"CampaignController",controllerAs:"vm",templateUrl:"assets/views/dashboard/campaigns.html"}},authenticate:!0}).state("orders",{url:"/orders",views:{main:{controller:"OrdersController",controllerAs:"vm",templateUrl:"assets/views/orders.html"}},authenticate:!1}).state("login",{url:"/login",views:{main:{controller:"LoginController",controllerAs:"vm",templateUrl:"assets/views/login.html"}},authenticate:!1}),n.otherwise("/")}angular.module("AnyDayBuddyAds").config(e),e.$inject=["$stateProvider","$urlRouterProvider","$locationProvider"]}(),function(){"use strict";function e(e,n,t,a){function o(){console.log(),r.loading=!0,i(t.id||"all")}function i(e){a.getCampaigns(e).then(function(e){r.ads=r.detail?[e]:e,console.log(e)}).catch(function(e){console.log(e)}).finally(function(){r.loading=!1})}var r=this;r.ads=[],r.loading=!1,r.detail=!!t.id,o(),r.getDistance=function(n){return n?n.distance?e.join([n.distance,"Km"]," "):n.isCity?"City":n.isState?"State":n.isCountry?"Country":void 0:"N/A"},r.getImpressions=function(n){if(!n)return"N/A";var t={time:function(n){return e.join([n.time,n.period]," ")},units:function(n){return e.join([n.quantity,"units"]," ")}};return t[n.type](n)}}angular.module("AnyDayBuddyAds").controller("CampaignController",e),e.$inject=["_","$state","$stateParams","DataService"]}(),function(){"use strict";function e(e,n){function t(){console.log("DashboardController")}t()}e.$inject=["$http","$q"],angular.module("AnyDayBuddyAds").controller("DashboardController",e)}(),function(){"use strict";function e(e,n,t,a,o,i,r){function s(){console.log("Profile Controller"),console.log(n.user),angular.copy(n.user,d.data),d.data.country=e.find(d.countries,function(e){return e.name===n.user.country||e.id===n.user.country});n.user.imageGallery.indexOf(n.user.profileImage);a.then(function(e){u=new e.places.AutocompleteService,d.placesReady=!0}),d.data.birth=moment(n.user.birth||{}).toDate()}function c(e){var n=e?d.countries.filter(l(e)):d.countries;return n}function l(n){var t=e.capitalize(n);return function(e){return 0===e.name.indexOf(t)}}var d=this,u=null;d.countries=r.getCountries(),d.data={country:"CA"},d.placesReady=!1,s(),d.autocompleteCountry=function(e){return c(e)},d.autocompleteAddress=function(n){var a=t.defer();return u.getQueryPredictions({input:n},function(n){a.resolve(n?e.filter(e.filter(n,"place_id"),function(n){return!e.includes(n.types,"establishment")&&!e.includes(n.types,"country")}):[])}),a.promise},d.updateProfile=function(){d.loading=!0,d.data.country=angular.isObject(d.data.country)?d.data.country.id:d.data.country,i.update(n.user.id,d.data).then(function(e){d.data=e,d.error=!1,d.data.birth=moment(d.data.birth).toDate()},function(e){d.error=!0}).finally(function(){d.loading=!1})}}angular.module("AnyDayBuddyAds").controller("ProfileController",e),e.$inject=["_","$rootScope","$q","uiGmapGoogleMapApi","uiGmapIsReady","UserService","UtilService"]}(),function(){"use strict";function e(e,n){function t(){}function a(e){n("html, body").animate({scrollTop:n(e).offset().top},1e3)}var o=this;o.title="Home Controller",o.scrollTo=a,t()}angular.module("AnyDayBuddyAds").controller("HomeController",e),e.$inject=["$rootScope","jQuery"]}(),function(){"use strict";function e(e,n){var t=this;t.loading=!1,t.auth=function(){console.log("LOGIN",t.user),t.loading=!0,n.login(t.user).then(function(n){console.log(n),e.go("dashboard.campaigns")}).catch(function(e){console.log(e)}).finally(function(){t.loading=!1})}}angular.module("AnyDayBuddyAds").controller("LoginController",e),e.$inject=["$state","Auth"]}(),function(){"use strict";function e(e,n,t,a,o){function i(){console.log("signup controller")}function r(e){var n=e?c.countries.filter(s(e)):c.countries;return n}function s(e){var n=_.capitalize(e);return function(e){return 0===e.name.indexOf(n)}}var c=this;c.data={country:{}},c.loading=!1,c.isConfirm=!0,c.availability=!0,c.countries=o.getCountries(),i(),c.autocompleteCountry=function(e){return r(e)},c.signupAttempt=function(){c.loading=!0;var e=c.data.country;c.data.country=e.id,a.register(c.data).then(function(e){a.setCredentials(e),n.hide()},function(e){console.log(e),c.error=!0}).finally(function(){c.loading=!1})},c.checkCredentailsAvailability=function(e){var n={};c.availability=!0,c.data[e]&&(c.loading=!0,n[e]=c.data[e],a.credentialAvaliability(n).then(function(e){c.availability=e.availability,c.loading=!1},function(e){c.error=!0,c.loading=!1}))},c.compare=function(){c.isConfirm=c.data.confirmPassword==c.data.password},c.close=function(){n.cancel()},t.$watch("vm.data",function(e,n){console.log(e)},!0)}angular.module("AnyDayBuddyAds").controller("SignupController",e),e.$inject=["$rootScope","$mdDialog","$scope","Auth","UtilService"]}(),function(){"use strict";function e(e,n,t){function a(a,i){var r=n.defer();return e.get(t+"/campaign/categories/",{params:{country:i.country}}).success(function(e){r.resolve(e),console.log(e.length),angular.copy(e,o.categories)}).error(function(e){r.reject(e)}),r.promise}var o={categories:[],getCategories:a};return o}angular.module("AnyDayBuddyAds").service("CategoryService",e),e.$inject=["$http","$q","baseApi"]}(),function(){"use strict";function e(e,n,t,a,o,i,r){function s(){return r.getObject("user",null)}function c(n){var o=a.defer();return t.post(e+"/auth/validate/"+n).success(function(e){o.resolve(e)}).error(function(e){o.reject(e)}),o.promise}function l(n){var o=a.defer();return t.post(e+"/auth/login",n).success(function(e,n,t,a){o.resolve(e),e.hasOwnProperty("token")&&(i.user=angular.copy(e.user),i.$emit("login",e.user),r.set("access_token",e.token),r.setObject("user",e.user))}).error(function(e){o.reject(e)}),o.promise}function d(n){var o=a.defer();return t.post(e+"/auth/register",n).success(function(e,n,t,a){o.resolve(e)}).error(function(e){o.reject(e)}),o.promise}function u(n,o){var i=a.defer();return t.post(e+"/auth/resetpassword/"+n,o).success(function(e,n,t,a){i.resolve(e)}).error(function(e){i.reject(e)}),i.promise}function m(n){var o=a.defer();return t.post(e+"/auth/resetPasswordRequest",n).success(function(e,n,t,a){o.resolve(e)}).error(function(e){o.reject(e)}),o.promise}function f(){r.remove("user"),r.remove("access_token"),r.remove("original_user"),i.isAuthenticated=!1,i.user=null,i.view="auth",i.currentState="login",n.location.reload()}function p(e,n){e.hasOwnProperty("token")?(!n&&r.get("access_token")||r.set("access_token",e.token),i.user=e.user,r.setObject("user",e.user)):console.log("Bad Date",e)}function g(){return r.get("access_token")}function y(n){var o=a.defer();return t.get(e+"/user/availability/",{params:n}).success(function(e,n,t,a){o.resolve(e)}).error(function(e){o.reject(e)}),o.promise}var h={getUser:s,validate:c,isAuthenticated:g,login:l,logout:f,register:d,forgot:m,reset:u,setCredentials:p,credentialAvaliability:y};return h}function n(e,n,t){function a(e){var t;return n.get("access_token")&&(t=n.get("access_token")),t&&(e.headers.Authorization="Bearer "+t),e}function o(a){return 401!==a.status&&403!==a.status||(n.remove("access_token"),t.get("$state").go("login")),e.reject(a)}var i={request:a,responseError:o};return i}n.$inject=["$q","$localstorage","$injector"],angular.module("AnyDayBuddyAds").factory("Auth",e).factory("AuthInterceptor",n).config(["$httpProvider",function(e){e.interceptors.push("AuthInterceptor"),e.defaults.withCredentials=!0}]),e.$inject=["baseApi","$window","$http","$q","$state","$rootScope","$localstorage"]}(),function(){"use strict";function e(e,n,t){function a(){var a=n.defer();return e({method:"GET",url:t+"/campaign/options/"}).success(function(e,n,t,o){a.resolve(e)}).error(function(e){a.reject(e)}),a.promise}function o(){var a=n.defer();return e({method:"GET",url:t+"/commerce/clientToken/"}).success(function(e,n,t,o){a.resolve(e)}).error(function(e){a.reject(e)}),a.promise}function i(a){var o=n.defer();return e.post(t+"/campaign/create/",a).success(function(e){o.resolve(e)}).error(function(e){o.reject(e)}),o.promise}function r(a){var o=n.defer();return e.get(t+"/campaign/"+a+"/").success(function(e){o.resolve(e)}).error(function(e){o.reject(e)}),o.promise}var s={getOptions:a,getClientToken:o,createCampaign:i,getCampaigns:r};return s}angular.module("AnyDayBuddyAds").service("DataService",e),e.$inject=["$http","$q","baseApi"]}(),function(){"use strict";function e(){function e(e,t,a,o){return{options:{url:"https://api.cloudinary.com/v1_1/cloud9/image/upload",uploadMultiple:!1,maxFiles:1,acceptedFiles:"image/*",dictDefaultMessage:"Drop file or click here to upload",addRemoveLinks:!0,init:function(){this.on("thumbnail",function(t){t.width!==n[e].width||t.height!==n[e].height?t.rejectDimensions():t.acceptDimensions()})},accept:function(e,n){e.acceptDimensions=n,e.rejectDimensions=function(){n("Invalid dimension.")}}},eventHandlers:{sending:function(e,n,t){t.append("api_key",839988333153567),t.append("timestamp",Date.now()/1e3|0),t.append("upload_preset","sm2ev4nu"),a&&a()},success:t,removedfile:o}}}function t(e,n,t){return{options:{url:"https://api.cloudinary.com/v1_1/cloud9/image/upload",maxFiles:e,acceptedFiles:"image/*",dictDefaultMessage:"Drop files or click here to upload"},eventHandlers:{sending:function(e,n,a){a.append("api_key",839988333153567),a.append("timestamp",Date.now()/1e3|0),a.append("upload_preset","sm2ev4nu"),t&&t()},success:n}}}var a={create:e,createMultiple:t};return a}angular.module("AnyDayBuddyAds").service("DropzoneService",e);var n={mobile:{width:750,height:100},desktop:{width:880,height:1156}}}(),function(){"use strict";function e(e){function n(n,t){e.localStorage[n]=t}function t(n,t){return e.localStorage[n]||t}function a(n,t){e.localStorage[n]=JSON.stringify(t)}function o(n,t){return JSON.parse(e.localStorage[n]||(void 0!==t?t:"{}"))}function i(n){return e.localStorage.removeItem(n)}var r={set:n,get:t,setObject:a,getObject:o,remove:i};return r}angular.module("AnyDayBuddyAds").factory("$localstorage",e),e.$inject=["$window"]}(),function(){"use strict";function e(e,t,a,o,i){function r(){var n=t.defer();return e({method:"GET",url:i+"/campaign/options/"}).success(function(e,t,a,o){n.resolve(e)}).error(function(e){n.reject(e)}),n.promise}function s(n,r){var s=t.defer(),c=i+"/user/"+n;return e.put(c,r).success(function(e,n,t,i){s.resolve(e),angular.copy(e,o.user),a.setObject("user",e)}).error(function(e){s.reject(e)}),s.promise}var c={getOptions:r,getClientToken:n,update:s};return c}function n(){return{}}angular.module("AnyDayBuddyAds").service("UserService",e),e.$inject=["$http","$q","$localstorage","$rootScope","baseApi"]}(),function(){"use strict";function e(){function e(){return[{name:"Afghanistan",id:"AF"},{name:"Åland Islands",id:"AX"},{name:"Albania",id:"AL"},{name:"Algeria",id:"DZ"},{name:"American Samoa",id:"AS"},{name:"AndorrA",id:"AD"},{name:"Angola",id:"AO"},{name:"Anguilla",id:"AI"},{name:"Antarctica",id:"AQ"},{name:"Antigua and Barbuda",id:"AG"},{name:"Argentina",id:"AR"},{name:"Armenia",id:"AM"},{name:"Aruba",id:"AW"},{name:"Australia",id:"AU"},{name:"Austria",id:"AT"},{name:"Azerbaijan",id:"AZ"},{name:"Bahamas",id:"BS"},{name:"Bahrain",id:"BH"},{name:"Bangladesh",id:"BD"},{name:"Barbados",id:"BB"},{name:"Belarus",id:"BY"},{name:"Belgium",id:"BE"},{name:"Belize",id:"BZ"},{name:"Benin",id:"BJ"},{name:"Bermuda",id:"BM"},{name:"Bhutan",id:"BT"},{name:"Bolivia",id:"BO"},{name:"Bosnia and Herzegovina",id:"BA"},{name:"Botswana",id:"BW"},{name:"Bouvet Island",id:"BV"},{name:"Brazil",id:"BR"},{name:"British Indian Ocean Territory",id:"IO"},{name:"Brunei Darussalam",id:"BN"},{name:"Bulgaria",id:"BG"},{name:"Burkina Faso",id:"BF"},{name:"Burundi",id:"BI"},{name:"Cambodia",id:"KH"},{name:"Cameroon",id:"CM"},{name:"Canada",id:"CA"},{name:"Cape Verde",id:"CV"},{name:"Cayman Islands",id:"KY"},{name:"Central African Republic",id:"CF"},{name:"Chad",id:"TD"},{name:"Chile",id:"CL"},{name:"China",id:"CN"},{name:"Christmas Island",id:"CX"},{name:"Cocos (Keeling) Islands",id:"CC"},{name:"Colombia",id:"CO"},{name:"Comoros",id:"KM"},{name:"Congo",id:"CG"},{name:"Congo, The Democratic Republic of the",id:"CD"},{name:"Cook Islands",id:"CK"},{name:"Costa Rica",id:"CR"},{name:"Cote D'Ivoire",id:"CI"},{name:"Croatia",id:"HR"},{name:"Cuba",id:"CU"},{name:"Cyprus",id:"CY"},{name:"Czech Republic",id:"CZ"},{name:"Denmark",id:"DK"},{name:"Djibouti",id:"DJ"},{name:"Dominica",id:"DM"},{name:"Dominican Republic",id:"DO"},{name:"Ecuador",id:"EC"},{name:"Egypt",id:"EG"},{name:"El Salvador",id:"SV"},{name:"Equatorial Guinea",id:"GQ"},{name:"Eritrea",id:"ER"},{name:"Estonia",id:"EE"},{name:"Ethiopia",id:"ET"},{name:"Falkland Islands (Malvinas)",id:"FK"},{name:"Faroe Islands",id:"FO"},{name:"Fiji",id:"FJ"},{name:"Finland",id:"FI"},{name:"France",id:"FR"},{name:"French Guiana",id:"GF"},{name:"French Polynesia",id:"PF"},{name:"French Southern Territories",id:"TF"},{name:"Gabon",id:"GA"},{name:"Gambia",id:"GM"},{name:"Georgia",id:"GE"},{name:"Germany",id:"DE"},{name:"Ghana",id:"GH"},{name:"Gibraltar",id:"GI"},{name:"Greece",id:"GR"},{name:"Greenland",id:"GL"},{name:"Grenada",id:"GD"},{name:"Guadeloupe",id:"GP"},{name:"Guam",id:"GU"},{name:"Guatemala",id:"GT"},{name:"Guernsey",id:"GG"},{name:"Guinea",id:"GN"},{name:"Guinea-Bissau",id:"GW"},{name:"Guyana",id:"GY"},{name:"Haiti",id:"HT"},{name:"Heard Island and Mcdonald Islands",id:"HM"},{name:"Holy See (Vatican City State)",id:"VA"},{name:"Honduras",id:"HN"},{name:"Hong Kong",id:"HK"},{name:"Hungary",id:"HU"},{name:"Iceland",id:"IS"},{name:"India",id:"IN"},{name:"Indonesia",id:"ID"},{name:"Iran, Islamic Republic Of",id:"IR"},{name:"Iraq",id:"IQ"},{name:"Ireland",id:"IE"},{name:"Isle of Man",id:"IM"},{name:"Israel",id:"IL"},{name:"Italy",id:"IT"},{name:"Jamaica",id:"JM"},{name:"Japan",id:"JP"},{name:"Jersey",id:"JE"},{name:"Jordan",id:"JO"},{name:"Kazakhstan",id:"KZ"},{name:"Kenya",id:"KE"},{name:"Kiribati",id:"KI"},{name:"Korea, Democratic People'S Republic of",id:"KP"},{name:"Korea, Republic of",id:"KR"},{name:"Kuwait",id:"KW"},{name:"Kyrgyzstan",id:"KG"},{name:"Lao People'S Democratic Republic",id:"LA"},{name:"Latvia",id:"LV"},{name:"Lebanon",id:"LB"},{name:"Lesotho",id:"LS"},{name:"Liberia",id:"LR"},{name:"Libyan Arab Jamahiriya",id:"LY"},{name:"Liechtenstein",id:"LI"},{name:"Lithuania",id:"LT"},{name:"Luxembourg",id:"LU"},{name:"Macao",id:"MO"},{name:"Macedonia, The Former Yugoslav Republic of",id:"MK"},{name:"Madagascar",id:"MG"},{name:"Malawi",id:"MW"},{name:"Malaysia",id:"MY"},{name:"Maldives",id:"MV"},{name:"Mali",id:"ML"},{name:"Malta",id:"MT"},{name:"Marshall Islands",id:"MH"},{name:"Martinique",id:"MQ"},{name:"Mauritania",id:"MR"},{name:"Mauritius",id:"MU"},{name:"Mayotte",id:"YT"},{name:"Mexico",id:"MX"},{name:"Micronesia, Federated States of",id:"FM"},{name:"Moldova, Republic of",id:"MD"},{name:"Monaco",id:"MC"},{name:"Mongolia",id:"MN"},{name:"Montserrat",id:"MS"},{name:"Morocco",id:"MA"},{name:"Mozambique",id:"MZ"},{name:"Myanmar",id:"MM"},{name:"Namibia",id:"NA"},{name:"Nauru",id:"NR"},{name:"Nepal",id:"NP"},{name:"Netherlands",id:"NL"},{name:"Netherlands Antilles",id:"AN"},{name:"New Caledonia",id:"NC"},{name:"New Zealand",id:"NZ"},{name:"Nicaragua",id:"NI"},{name:"Niger",id:"NE"},{name:"Nigeria",id:"NG"},{name:"Niue",id:"NU"},{name:"Norfolk Island",id:"NF"},{name:"Northern Mariana Islands",id:"MP"},{name:"Norway",id:"NO"},{name:"Oman",id:"OM"},{name:"Pakistan",id:"PK"},{name:"Palau",id:"PW"},{name:"Palestinian Territory, Occupied",id:"PS"},{name:"Panama",id:"PA"},{name:"Papua New Guinea",id:"PG"},{name:"Paraguay",id:"PY"},{name:"Peru",id:"PE"},{name:"Philippines",id:"PH"},{name:"Pitcairn",id:"PN"},{name:"Poland",id:"PL"},{name:"Portugal",id:"PT"},{name:"Puerto Rico",id:"PR"},{name:"Qatar",id:"QA"},{name:"Reunion",id:"RE"},{name:"Romania",id:"RO"},{name:"Russian Federation",id:"RU"},{name:"RWANDA",id:"RW"},{name:"Saint Helena",id:"SH"},{name:"Saint Kitts and Nevis",id:"KN"},{name:"Saint Lucia",id:"LC"},{name:"Saint Pierre and Miquelon",id:"PM"},{name:"Saint Vincent and the Grenadines",id:"VC"},{name:"Samoa",id:"WS"},{name:"San Marino",id:"SM"},{name:"Sao Tome and Principe",id:"ST"},{name:"Saudi Arabia",id:"SA"},{name:"Senegal",id:"SN"},{name:"Serbia and Montenegro",id:"CS"},{name:"Seychelles",id:"SC"},{name:"Sierra Leone",id:"SL"},{name:"Singapore",id:"SG"},{name:"Slovakia",id:"SK"},{name:"Slovenia",id:"SI"},{name:"Solomon Islands",id:"SB"},{name:"Somalia",id:"SO"},{name:"South Africa",id:"ZA"},{name:"South Georgia and the South Sandwich Islands",id:"GS"},{name:"Spain",id:"ES"},{name:"Sri Lanka",id:"LK"},{name:"Sudan",id:"SD"},{name:"Suriname",id:"SR"},{name:"Svalbard and Jan Mayen",id:"SJ"},{name:"Swaziland",id:"SZ"},{name:"Sweden",id:"SE"},{name:"Switzerland",id:"CH"},{name:"Syrian Arab Republic",id:"SY"},{name:"Taiwan, Province of China",id:"TW"},{name:"Tajikistan",id:"TJ"},{name:"Tanzania, United Republic of",id:"TZ"},{name:"Thailand",id:"TH"},{name:"Timor-Leste",id:"TL"},{name:"Togo",id:"TG"},{name:"Tokelau",id:"TK"},{name:"Tonga",id:"TO"},{name:"Trinidad and Tobago",id:"TT"},{name:"Tunisia",id:"TN"},{name:"Turkey",id:"TR"},{name:"Turkmenistan",id:"TM"},{name:"Turks and Caicos Islands",id:"TC"},{name:"Tuvalu",id:"TV"},{name:"Uganda",id:"UG"},{name:"Ukraine",id:"UA"},{name:"United Arab Emirates",id:"AE"},{name:"United Kingdom",id:"GB"},{name:"United States",id:"US"},{name:"United States Minor Outlying Islands",id:"UM"},{name:"Uruguay",id:"UY"},{name:"Uzbekistan",id:"UZ"},{name:"Vanuatu",id:"VU"},{name:"Venezuela",id:"VE"},{name:"Viet Nam",id:"VN"},{name:"Virgin Islands, British",id:"VG"},{name:"Virgin Islands, U.S.",id:"VI"},{name:"Wallis and Futuna",id:"WF"},{name:"Western Sahara",id:"EH"},{name:"Yemen",id:"YE"},{name:"Zambia",id:"ZM"},{name:"Zimbabwe",id:"ZW"}]}var n={getCountries:e};return n}angular.module("AnyDayBuddyAds").factory("UtilService",e)}(),function(){"use strict";function e(){var e={restrict:"EA",templateUrl:"assets/views/orders/orders.campaign.html",scope:{options:"=",form:"=",total:"=",control:"="},controller:n,controllerAs:"vm",bindToController:!0};return e}function n(e,n,t,a){function o(){console.log("campaign directive"),a.then(function(e){console.log(e),s=new e.places.AutocompleteService,r.placesReady=!0})}function i(){r.loading=!0,t.getCategories("all",{all:!0,official:!0,country:r.form.country}).then(function(e){r.categories=e}).finally(function(){r.loading=!1})}var r=this,s=null;r.interests=[],r.categories=[],r.categoriesReady=!1,o(),r.autocompleteCities=function(e){var t=n.defer();return s.getQueryPredictions({input:e},function(e){t.resolve(e?_.filter(_.filter(e,"place_id"),function(e){return _.includes(e.types,"locality")||_.includes(e.types,"administrative_area_level_3")}):[])}),t.promise},r.autocompleteStates=function(e){var t=n.defer();return s.getQueryPredictions({input:e},function(e){t.resolve(e?_.filter(_.filter(e,"place_id"),function(e){return _.includes(e.types,"administrative_area_level_1")||_.includes(e.types,"administrative_area_level_2")}):[])}),t.promise},r.autocompleteCountries=function(e){var t=n.defer();return s.getQueryPredictions({input:e},function(e){t.resolve(e?_.filter(_.filter(e,"place_id"),function(e){return _.includes(e.types,"country")}):[])}),t.promise},e.$watch("vm.control.selectedTab",function(e,n){r.categoriesReady||2!==e||i()},!0)}angular.module("AnyDayBuddyAds").directive("adbOrdersCampaign",e),n.$inject=["$scope","$q","CategoryService","uiGmapGoogleMapApi"]}(),function(){"use strict";function e(){var e={restrict:"EA",templateUrl:"assets/views/orders/orders.checkout.html",scope:{options:"=",form:"=",total:"=",success:"=",control:"="},controller:n,controllerAs:"vm",bindToController:!0};return e}function n(e,n,t,a,o,i,r){function s(){r.getClientToken().then(function(e){console.log(e),c(e.clientToken)}).catch(function(e){console.log(e)})}function c(e){n.setup(e,"custom",{paypal:{container:"paypal-container",singleUse:!0,amount:"0",currency:"USD",locale:"en_us",enableShippingAddress:!1},onPaymentMethodReceived:function(e){l(e.nonce)},onReady:function(e){d.checkout=e}})}function l(e){console.log(e),t.$apply(function(){d.form.nonce=e,d.authorization=!0})}var d=this;d.checkout={},d.loading=!1,d.authorization=!1,d.launch=function(){d.loading=!0,d.form.amount=d.total,r.createCampaign(d.form).then(function(e){console.log(e),d.success=!0,a.fill=!0}).catch(function(e){console.log(e),d.success=!1}).finally(function(){d.loading=!1})},t.$watch("vm.form",function(e,n){e&&console.log(e)}),t.$watch("vm.control.selectedTab",function(e,n){console.log("current tab ",e),3==e&&s()},!0),t.$watch("vm.checkout",function(e,n){e&&console.log(e)})}angular.module("AnyDayBuddyAds").directive("adbOrdersCheckout",e),n.$inject=["_","braintree","$scope","$rootScope","$http","$q","DataService"]}(),function(){"use strict";function e(){var e={restrict:"EA",templateUrl:"assets/views/orders/orders.customer.html",scope:{form:"=",control:"="},controller:n,controllerAs:"vm",bindToController:!0};return e}function n(e,n,t,a,o){function i(){r.control.tabs[0].valid=!1,r.control.tabs[1].valid=!0,r.control.selectedTab+=1}var r=this;r.nextTab=i,r.auth=function(){r.loading=!0,o.login(r.form.auth).then(function(e){console.log(e),i()}).catch(function(e){console.log(e)}).finally(function(){r.loading=!1})},r.signup=function(){a.show({fullscreen:!0,controllerAs:"vm",controller:"SignupController",templateUrl:"assets/views/modal/signup.html"}).then(function(){i()})}}angular.module("AnyDayBuddyAds").directive("adbOrdersCustomer",e),n.$inject=["$http","$q","$rootScope","$mdDialog","Auth"]}(),function(){"use strict";function e(e,n,t,a,o,i,r){function s(){i.getOptions().then(function(e){console.log(e),y.options.target=c(e),console.log(y.form)}).catch(function(e){console.log(e)})}function c(n){var t=function(n,a){return e.isObject(n)?e.merge({},n,a,t):n||a},a=e.flatten([{},n,t]);return e.merge.apply(e,a)}function l(e,n){a.show({fullscreen:!0,targetEvent:e,clickOutsideToClose:!0,templateUrl:"app/shared/layout/imageModal.html",locals:{image:n},controller:["$scope","image",function(e,n){e.image=n}]})}function d(){a.show({templateUrl:"app/components/ad/advertisementModal.html",clickOutsideToClose:!0,fullscreen:!0})}function u(){o.show(o.simple().textContent("Awesome, you can now go to next step!").position("bottom right").hideDelay(3e3))}function m(n){var t=!1;return t="both"===n?!!e.isEmpty(e.pickBy(y.form.banner,e.isNull)):!!(y.form.banner.description&&y.form.banner.url&&y.form.banner[n])}function f(){return!e.isEmpty(y.form.marker)}function p(){var e=y.form.media.display,n=y.form.options.display.display;switch(n){case"banner":return m(e);case"map":return f()}return!1}function g(){switch(y.control.selectedTab){case 1:y.form.media.hasOwnProperty("id")&&y.form.options.display.hasOwnProperty("id")&&p()?(y.control.tabs[2].valid=!0,u()):y.control.tabs[2].valid=!1;break;case 2:y.form.options.impressions.hasOwnProperty("id")?(y.control.tabs[3].valid=!0,u()):y.control.tabs[3].valid=!1;break;default:console.log(y.control.selectedTab)}}var y=this;y.openImage=l,y.add=d,y.total=0,y.success=!1,y.control={selectedTab:t.user?1:0,tabs:[{valid:!t.user,show:!0},{valid:!1,show:!0},{valid:!1,show:!0},{valid:!1,show:!0}]},y.options={target:{display:[],media:[],impressionsUnits:[],impressionsTime:[],distance:[],age:[],gender:[]}},y.form={media:{},banner:{},marker:{},options:{display:{},impressions:{},distance:{},age:{},gender:{},interests:{},activities:[]},customer:{},country:t.user?e.find(r.getCountries(),function(e){return e.name===t.user.country||e.id===t.user.country})||"CA":"CA",state:null,city:null,categories:[]},s(),y.selectedTab=function(){return t.user?y.control.selectedTab:0},n.$watch(function(){return t.user},function(){t.user&&(y.form.country=e.find(r.getCountries(),function(e){return e.name===t.user.country||e.id===t.user.country}).id)},!0),n.$watch("vm.form",function(n,t){console.log(n),g(),y.total=n.media.hasOwnProperty("fee")?n.media.fee:0,e.map(n.options,function(e){e.hasOwnProperty("fee")&&(y.total+=y.total*e.fee),e.hasOwnProperty("discount")&&(y.total-=y.total*e.discount)})},!0)}angular.module("AnyDayBuddyAds").controller("OrdersController",e),e.$inject=["_","$scope","$rootScope","$mdDialog","$mdToast","DataService","UtilService"]}(),function(){"use strict";function e(){function e(e,n,t,a){}var t={restrict:"EA",templateUrl:"assets/views/orders/orders.resume.html",scope:{options:"=",form:"=",total:"="},link:e,controller:n,controllerAs:"vm",bindToController:!0};return t}function n(e,n,t){function a(){}var o=this;a(),o.formatImpressions=function(){if(o.form.impressionType&&o.form.options.impressions.hasOwnProperty("id")){var n={impressionsUnits:e.join([o.form.options.impressions.quantity,o.form.options.impressions.type]," "),impressionsTime:e.join([o.form.options.impressions.time,o.form.options.impressions.period]," ")};return n[o.form.impressionType]}},o.formatTarget=function(){var n={distance:{value:o.form.options.distance,render:e.join(["Distance:",o.form.options.distance.distance||"","Km"]," ")},age:{value:o.form.options.age,render:e.join(["Age between:",e.join(o.form.options.age.range,"-")]," ")},gender:{value:o.form.options.gender,render:e.join(["Gender:",o.form.options.gender.gender]," ")},interests:{value:o.form.options.interests,render:e.join(["Interests:",o.form.options.interests.quantity]," ")}},t=e.pickBy(n,function(e){return e.value.hasOwnProperty("id")});return e.isEmpty(t)?"":e.join(["Target: ",e.map(Object.keys(t),function(e){return n[e].render})],"")},o.formatResume=function(){return resume}}angular.module("AnyDayBuddyAds").directive("adbOrdersResume",e),n.$inject=["_","$http","$q"]}(),function(){"use strict";function e(){var e={restrict:"EA",templateUrl:"assets/views/orders/orders.display.html",scope:{options:"=",form:"=",total:"="},controller:n,controllerAs:"vm",bindToController:!0};return e}function n(e,n,t,a,o,i){function r(){console.log("activate"),d()}function s(e,n,t,a){console.log(n),o(function(){e.panTo(new google.maps.LatLng(n.latitude,n.longitude)),t&&e.panBy(0,-200)},100)}function c(e,n,t){var o=t[0],i=o.latLng.lat(),r=o.latLng.lng();u.marker={id:Date.now(),location:{latitude:i,longitude:r},show:!1},a.$apply()}function l(){console.log("bounds changed"),console.log(u.placesReady),u.map.instance||d()}function d(){t.all([e,n.promise(1)]).then(function(e){var n=e[0],t=e[1][0].map;u.window={pixelOffset:new n.Size(0,(-40)),closeClick:function(){u.marker.show=!1}},g=new n.places.AutocompleteService,p=new n.DirectionsService,f=new n.DirectionsRenderer,u.map.instance=t,f.setMap(u.map.instance),m=new n.places.PlacesService(u.map.instance),u.placesReady=!0,console.log("ready")})}var u=this,m=null,f=null,p=null,g=null;u.markerConfirmed=!1,u.placesReady=!1,u.control={uploading:!1},u.map={center:{latitude:45.50174502816667,longitude:-73.5703881829977},zoom:14,options:{scrollwheel:!0},mapMarker:!0,disableDefaultUI:!0,control:{},events:{click:c,idle:l}},u.info={name:"",address:"",icon:""},u.marker={id:0,location:{latitude:45.50174502816667,longitude:-73.5703881829977},show:!1},u.desktopDropzone=i.create("desktop",function(e,n){a.$apply(function(){console.log(n.secure_url),u.form.banner.website=n.secure_url,u.control.uploading=!1})},function(){a.$apply(function(){u.control.uploading=!0})}),u.mobileDropzone=i.create("mobile",function(e,n){a.$apply(function(){console.log(n.secure_url),u.form.banner.app=n.secure_url,u.control.uploading=!1})},function(){a.$apply(function(){u.control.uploading=!0})}),r(),u.clickMarker=function(){console.log("click"),u.marker.show=!u.marker.show,a.$apply()},u.autocompleteAddress=function(e){u.markerConfirmed=!1;var n=t.defer();return g.getQueryPredictions({input:e},function(e){n.resolve(e?_.filter(e,"place_id"):[])}),n.promise},u.getPlace=function(){return console.log(u.info.place),u.info.place?void m.getDetails({placeId:u.info.place.place_id},function(e,n){console.log(e,n),u.marker={id:Date.now(),address:e.formatted_address,name:u.info.name,location:{latitude:parseFloat(e.geometry.location.lat()),longitude:parseFloat(e.geometry.location.lng())},show:!0,country:_.filter(e.address_components,function(e){return _.includes(e.types,"country")})[0].long_name,address_components:e.address_components},s(u.map.instance,u.marker.location,null,!0),a.$apply()}):void(u.markerConfirmed=!1)},u.confirmMarker=function(){u.info.name&&(u.form.marker={id:u.marker.id,address:u.marker.address,name:u.info.name,location:u.marker.location,show:!0,country:u.marker.country,address_components:u.marker.address_components},u.markerConfirmed=!0,console.log(u.form.marker))}}angular.module("AnyDayBuddyAds").directive("adbDisplayChooser",e),n.$inject=["uiGmapGoogleMapApi","uiGmapIsReady","$q","$scope","$timeout","DropzoneService"]}(),function(){"use strict";function e(e){function n(n,t,a){var o,i;o=n.dropzone,i=new e(t[0],o.options),n.reset&&i.on("complete",function(e){i.removeFile(e)}),angular.forEach(o.eventHandlers,function(e,n){i.on(n,e)})}var t={link:n,restrict:"EA",scope:{dropzone:"=dropzone",reset:"@reset"}};return t}angular.module("AnyDayBuddyAds").directive("dropzone",e),e.$inject=["Dropzone"]}(),function(){"use strict";function e(){var e={restrict:"EA",controllerAs:"vm",controller:n,bindToController:!0,templateUrl:"assets/views/chips/adbChips.html",scope:{map:"=?",max:"@?",list:"=",label:"@?",click:"=?",create:"=?",filter:"=?",id:"@?adbId",disabled:"=",editable:"=",hideList:"=?",listClass:"@?",showCount:"=?",placeholder:"@?",model:"=?ngModel"
}};return e}function n(e,n,t,a,o,i){function r(){d.map||(d.map={name:"name",image:"image",type:"chip"}),d.placeholder||(d.placeholder="Type here to filter"),void 0===d.listClass&&(d.listClass="fixed-rows"),void 0===d.showCount&&(d.showCount=!0),d.create&&n(document).keydown(l),void 0===d.filter&&(d.filter={}),e.isUndefined(d.model)&&(d.model=[])}function s(e){return function(n){return!d.exists(n)&&n[d.map.name].toLowerCase().indexOf(e.toLowerCase())!=-1}}function c(e,t){if(!e.length&&t.indexOf(",")!=-1){var a=d.create(t.split(",").filter(function(e){return e&&e.length}));console.log(a),angular.forEach(a,function(e){d.selectItem(e)}),n(d.input).val("")}}function l(e){e.stopPropagation(),n(d.input).is(":focus")&&13==e.which&&t.$apply(function(){var e=d.queryGiven?d.list.filter(s(d.queryGiven)):[];c(e,d.queryGiven+",")})}var d=this;d.queryGiven="",d.input="#chips-"+(d.id||Date.now())+" md-autocomplete-wrap input",r(),d.querySearch=function(e){d.queryGiven=e;var n=e?d.list.filter(s(e)):[];return d.create&&c(n,e),n},d.selectItem=function(n){console.log(d.model),d.editable&&d.model.push(n),e.isFunction(d.click)&&d.click(n)},d.exists=function(n){return e.findIndex(d.model,function(e){return e[d.map.name]==n[d.map.name]})>=0},d.stopPropagation=function(e){e.stopPropagation()}}angular.module("AnyDayBuddyAds").directive("adbChips",e),n.$inject=["_","jQuery","$scope","$timeout","$mdConstant","$mdDialog"]}(),function(){"use strict";function e(){var e={restrict:"EA",templateUrl:"assets/views/footer/footer.html",controller:n,controllerAs:"vm",bindToController:!0};return e}function n(){function e(){console.log("footer Activated")}e()}angular.module("AnyDayBuddyAds").directive("footerDirective",e),n.$inject=[]}(),function(){"use strict";function e(){var e={restrict:"EA",templateUrl:"assets/views/header/header.html",controller:n,controllerAs:"vm",bindToController:!0,scope:{}};return e}function n(e,n,t){var a=this;a.logout=function(){console.log("LOGOUT"),e.logout()},t.$on("login",function(e,n){t.user||angular.copy(n,t.user),console.log("login",t.user)})}angular.module("AnyDayBuddyAds").directive("headerDirective",e),n.$inject=["Auth","$scope","$rootScope"]}();
//# sourceMappingURL=data:application/json;base64,
