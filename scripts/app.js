!function(){"use strict";angular.module("AnyDayBuddyAds",["ui.router","ngMaterial","uiGmapgoogle-maps"])}(),function(){"use strict";angular.module("AnyDayBuddyAds").constant("_",window._).constant("jQuery",window.jQuery).constant("Dropzone",window.Dropzone).constant("braintree",window.braintree).constant("baseApi","https://api.anydaybuddy.com")}(),function(){"use strict";function e(e){e.configure({key:"AIzaSyAonFuCDb7HjXUz0uocKbEGUJz91IL9EVs",libraries:"places"})}function n(e,n){e.definePalette("primary",{50:"#9dceda",100:"#65b2c5",200:"#429ab0",300:"#2f6d7c",400:"#265966",500:"#1e4650",600:"#16323a",700:"#0d1f23",800:"#050c0d",900:"#000000",A100:"#9dceda",A200:"#65b2c5",A400:"#265966",A700:"#0d1f23",contrastDefaultColor:"light",contrastDarkColors:"50 100 200 A100 A200"}),e.definePalette("accent",{50:"#d0ebed",100:"#99d4d8",200:"#70c3c8",300:"#43a7ae",400:"#3a9298",500:"#327d82",600:"#29686c",700:"#215256",800:"#183d40",900:"#10282a",A100:"#d0ebed",A200:"#99d4d8",A400:"#3a9298",A700:"#215256",contrastDefaultColor:"light",contrastDarkColors:"50 100 200 300 A100 A200"}),e.definePalette("warn",{50:"#faeee6",100:"#ecc3a7",200:"#e2a379",300:"#d57b3e",400:"#c96b2b",500:"#b05e26",600:"#975121",700:"#7e431b",800:"#643616",900:"#4b2810",A100:"#faeee6",A200:"#ecc3a7",A400:"#c96b2b",A700:"#7e431b",contrastDefaultColor:"light",contrastDarkColors:"50 100 200 300 A100 A200"}),e.theme("default").primaryPalette("primary").accentPalette("accent").warnPalette("warn")}angular.module("AnyDayBuddyAds").config(n).config(e),e.$inject=["uiGmapGoogleMapApiProvider"],n.$inject=["$mdThemingProvider","$locationProvider"]}(),function(){"use strict";function e(e,n,a){e.$state=n,e.user=a.getUser(),e.$on("$stateChangeStart",function(i,o){e.fill=["login","dashboard","dashboard.campaigns"].indexOf(o.name)!==-1,o.authenticate&&!a.isAuthenticated()&&(i.preventDefault(),n.transitionTo("login"))})}angular.module("AnyDayBuddyAds").run(e),e.$inject=["$rootScope","$state","Auth"]}(),function(){"use strict";function e(e,n,a){e.state("home",{url:"/",views:{main:{controller:"HomeController",controllerAs:"vm",templateUrl:"assets/views/home.html"}},authenticate:!1}).state("dashboard",{url:"/dashboard",views:{main:{controller:"DashboardController",controllerAs:"vm",templateUrl:"assets/views/dashboard/index.html"}},authenticate:!0}).state("dashboard.profile",{url:"/profile",views:{dashboard:{controller:"ProfileController",controllerAs:"vm",templateUrl:"assets/views/dashboard/profile.html"}},authenticate:!0}).state("dashboard.campaigns",{url:"/campaigns",views:{dashboard:{controller:"CampaignController",controllerAs:"vm",templateUrl:"assets/views/dashboard/campaigns.html"}},authenticate:!0}).state("orders",{url:"/orders",views:{main:{controller:"OrdersController",controllerAs:"vm",templateUrl:"assets/views/orders.html"}},authenticate:!1}).state("login",{url:"/login",views:{main:{controller:"LoginController",controllerAs:"vm",templateUrl:"assets/views/login.html"}},authenticate:!1}),n.otherwise("/")}angular.module("AnyDayBuddyAds").config(e),e.$inject=["$stateProvider","$urlRouterProvider","$locationProvider"]}(),function(){"use strict";function e(e){function n(){e.getCampaigns().then(function(e){console.log(e)})}n()}angular.module("AnyDayBuddyAds").controller("CampaignController",e),e.$inject=["DataService"]}(),function(){"use strict";function e(e,n){}e.$inject=["$http","$q"],angular.module("AnyDayBuddyAds").controller("DashboardController",e)}(),function(){"use strict";function e(e,n,a,i,o){function t(){e.user.imageGallery.indexOf(e.user.profileImage);a.then(function(e){s=new e.places.AutocompleteService,r.placesReady=!0}),angular.copy(e.user,r.data),r.data.birth=moment(e.user.birth).toDate()}var r=this,s=null;r.data={},r.placesReady=!1,r.countries=o.getCountries(),t(),r.autocompleteAddress=function(e){var a=n.defer();return s.getQueryPredictions({input:e},function(e){a.resolve(e?_.filter(_.filter(e,"place_id"),function(e){return!_.includes(e.types,"establishment")&&!_.includes(e.types,"country")}):[])}),a.promise},r.updateProfile=function(){r.loading=!0,r.data.country=angular.isObject(r.data.country)?r.data.country.name:r.data.country,UserService.update(userId,r.data).then(function(e){r.data=e,r.error=!1,r.data.birth=moment(r.data.birth).toDate()},function(e){r.error=!0}).finally(function(){r.loading=!1})}}angular.module("AnyDayBuddyAds").controller("ProfileController",e),e.$inject=["$rootScope","$q","uiGmapGoogleMapApi","uiGmapIsReady","UtilService"]}(),function(){"use strict";function e(e,n){function a(){}function i(e){n("html, body").animate({scrollTop:n(e).offset().top},1e3)}var o=this;o.title="Home Controller",o.scrollTo=i,a()}angular.module("AnyDayBuddyAds").controller("HomeController",e),e.$inject=["$rootScope","jQuery"]}(),function(){"use strict";function e(e,n){var a=this;a.loading=!1,a.auth=function(){console.log("LOGIN",a.user),a.loading=!0,n.login(a.user).then(function(n){console.log(n),e.go("dashboard.campaigns")}).catch(function(e){console.log(e)}).finally(function(){a.loading=!1})}}angular.module("AnyDayBuddyAds").controller("LoginController",e),e.$inject=["$state","Auth"]}(),function(){"use strict";function e(e,n,a){var i=this;i.data={},i.loading=!1,i.isConfirm=!0,i.availability=!0,i.signupAttempt=function(){i.loading=!0,a.register(i.data).then(function(e){a.setCredentials(e),n.hide()},function(e){console.log(e),i.error=!0}).finally(function(){i.loading=!1})},i.checkCredentailsAvailability=function(e){var n={};i.availability=!0,i.data[e]&&(i.loading=!0,n[e]=i.data[e],a.credentialAvaliability(n).then(function(e){i.availability=e.availability,i.loading=!1},function(e){i.loading=!1}))},i.compare=function(){i.isConfirm=i.data.confirmPassword==i.data.password},i.close=function(){n.cancel()}}angular.module("AnyDayBuddyAds").controller("SignupController",e),e.$inject=["$rootScope","$mdDialog","Auth"]}(),function(){"use strict";function e(e,n,a,i,o,t,r){function s(){return r.getObject("user",null)}function l(n){var o=i.defer();return a.post(e+"/auth/validate/"+n).success(function(e){o.resolve(e)}).error(function(e){o.reject(e)}),o.promise}function c(n){var o=i.defer();return a.post(e+"/auth/login",n).success(function(e,n,a,i){o.resolve(e),e.hasOwnProperty("token")&&(t.user=angular.copy(e.user),t.$emit("login",e.user),r.set("access_token",e.token),r.setObject("user",e.user))}).error(function(e){o.reject(e)}),o.promise}function d(n){var o=i.defer();return a.post(e+"/auth/register",n).success(function(e,n,a,i){o.resolve(e)}).error(function(e){o.reject(e)}),o.promise}function u(n,o){var t=i.defer();return a.post(e+"/auth/resetpassword/"+n,o).success(function(e,n,a,i){t.resolve(e)}).error(function(e){t.reject(e)}),t.promise}function m(n){var o=i.defer();return a.post(e+"/auth/resetPasswordRequest",n).success(function(e,n,a,i){o.resolve(e)}).error(function(e){o.reject(e)}),o.promise}function p(){r.remove("user"),r.remove("access_token"),r.remove("original_user"),t.isAuthenticated=!1,t.user=null,t.view="auth",t.currentState="login",n.location.reload()}function f(e,n){e.hasOwnProperty("token")?(!n&&r.get("access_token")||r.set("access_token",e.token),t.user=e.user,r.setObject("user",e.user)):console.log("Bad Date",e)}function g(){return r.get("access_token")}function h(n){var o=i.defer();return a.get(e+"/user/availability/",{params:n}).success(function(e,n,a,i){o.resolve(e)}).error(function(e){o.reject(e)}),o.promise}var y={getUser:s,validate:l,isAuthenticated:g,login:c,logout:p,register:d,forgot:m,reset:u,setCredentials:f,credentialAvaliability:h};return y}function n(e,n,a){function i(e){var a;return n.get("access_token")&&(a=n.get("access_token")),a&&(e.headers.Authorization="Bearer "+a),e}function o(i){return 401!==i.status&&403!==i.status||(n.remove("access_token"),a.get("$state").go("login")),e.reject(i)}var t={request:i,responseError:o};return t}n.$inject=["$q","$localstorage","$injector"],angular.module("AnyDayBuddyAds").factory("Auth",e).factory("AuthInterceptor",n).config(["$httpProvider",function(e){e.interceptors.push("AuthInterceptor"),e.defaults.withCredentials=!0}]),e.$inject=["baseApi","$window","$http","$q","$state","$rootScope","$localstorage"]}(),function(){"use strict";function e(e,n,a){function i(){var i=n.defer();return e({method:"GET",url:a+"/campaign/options/"}).success(function(e,n,a,o){i.resolve(e)}).error(function(e){i.reject(e)}),i.promise}function o(){var i=n.defer();return e({method:"GET",url:a+"/commerce/clientToken/"}).success(function(e,n,a,o){i.resolve(e)}).error(function(e){i.reject(e)}),i.promise}function t(i){var o=n.defer();return e.post(a+"/campaign/create/",i).success(function(e){o.resolve(e)}).error(function(e){o.reject(e)}),o.promise}function r(){var i=n.defer();return e.get(a+"/campaign/all/").success(function(e){i.resolve(e)}).error(function(e){i.reject(e)}),i.promise}var s={getOptions:i,getClientToken:o,createCampaign:t,getCampaigns:r};return s}angular.module("AnyDayBuddyAds").service("DataService",e),e.$inject=["$http","$q","baseApi"]}(),function(){"use strict";function e(){function e(e,a,i,o){return{options:{url:"https://api.cloudinary.com/v1_1/cloud9/image/upload",uploadMultiple:!1,maxFiles:1,acceptedFiles:"image/*",dictDefaultMessage:"Drop file or click here to upload",addRemoveLinks:!0,init:function(){this.on("thumbnail",function(a){a.width!==n[e].width||a.height!==n[e].height?a.rejectDimensions():a.acceptDimensions()})},accept:function(e,n){e.acceptDimensions=n,e.rejectDimensions=function(){n("Invalid dimension.")}}},eventHandlers:{sending:function(e,n,a){a.append("api_key",839988333153567),a.append("timestamp",Date.now()/1e3|0),a.append("upload_preset","sm2ev4nu"),i&&i()},success:a,removedfile:o}}}function a(e,n,a){return{options:{url:"https://api.cloudinary.com/v1_1/cloud9/image/upload",maxFiles:e,acceptedFiles:"image/*",dictDefaultMessage:"Drop files or click here to upload"},eventHandlers:{sending:function(e,n,i){i.append("api_key",839988333153567),i.append("timestamp",Date.now()/1e3|0),i.append("upload_preset","sm2ev4nu"),a&&a()},success:n}}}var i={create:e,createMultiple:a};return i}angular.module("AnyDayBuddyAds").service("DropzoneService",e);var n={mobile:{width:750,height:100},desktop:{width:880,height:1156}}}(),function(){"use strict";function e(e){function n(n,a){e.localStorage[n]=a}function a(n,a){return e.localStorage[n]||a}function i(n,a){e.localStorage[n]=JSON.stringify(a)}function o(n,a){return JSON.parse(e.localStorage[n]||(void 0!==a?a:"{}"))}function t(n){return e.localStorage.removeItem(n)}var r={set:n,get:a,setObject:i,getObject:o,remove:t};return r}angular.module("AnyDayBuddyAds").factory("$localstorage",e),e.$inject=["$window"]}(),function(){"use strict";function e(e,n,a,i){function o(){var a=n.defer();return e({method:"GET",url:i+"/campaign/options/"}).success(function(e,n,i,o){a.resolve(e)}).error(function(e){a.reject(e)}),a.promise}var t={getOptions:o,getClientToken:getClientToken,createCampaign:createCampaign};return t}angular.module("AnyDayBuddyAds").service("UserService",e),e.$inject=["$http","$q","$localstorage","baseApi"]}(),function(){"use strict";function e(){function e(){return[{name:"Afghanistan",id:"AF"},{name:"Åland Islands",id:"AX"},{name:"Albania",id:"AL"},{name:"Algeria",id:"DZ"},{name:"American Samoa",id:"AS"},{name:"AndorrA",id:"AD"},{name:"Angola",id:"AO"},{name:"Anguilla",id:"AI"},{name:"Antarctica",id:"AQ"},{name:"Antigua and Barbuda",id:"AG"},{name:"Argentina",id:"AR"},{name:"Armenia",id:"AM"},{name:"Aruba",id:"AW"},{name:"Australia",id:"AU"},{name:"Austria",id:"AT"},{name:"Azerbaijan",id:"AZ"},{name:"Bahamas",id:"BS"},{name:"Bahrain",id:"BH"},{name:"Bangladesh",id:"BD"},{name:"Barbados",id:"BB"},{name:"Belarus",id:"BY"},{name:"Belgium",id:"BE"},{name:"Belize",id:"BZ"},{name:"Benin",id:"BJ"},{name:"Bermuda",id:"BM"},{name:"Bhutan",id:"BT"},{name:"Bolivia",id:"BO"},{name:"Bosnia and Herzegovina",id:"BA"},{name:"Botswana",id:"BW"},{name:"Bouvet Island",id:"BV"},{name:"Brazil",id:"BR"},{name:"British Indian Ocean Territory",id:"IO"},{name:"Brunei Darussalam",id:"BN"},{name:"Bulgaria",id:"BG"},{name:"Burkina Faso",id:"BF"},{name:"Burundi",id:"BI"},{name:"Cambodia",id:"KH"},{name:"Cameroon",id:"CM"},{name:"Canada",id:"CA"},{name:"Cape Verde",id:"CV"},{name:"Cayman Islands",id:"KY"},{name:"Central African Republic",id:"CF"},{name:"Chad",id:"TD"},{name:"Chile",id:"CL"},{name:"China",id:"CN"},{name:"Christmas Island",id:"CX"},{name:"Cocos (Keeling) Islands",id:"CC"},{name:"Colombia",id:"CO"},{name:"Comoros",id:"KM"},{name:"Congo",id:"CG"},{name:"Congo, The Democratic Republic of the",id:"CD"},{name:"Cook Islands",id:"CK"},{name:"Costa Rica",id:"CR"},{name:"Cote D'Ivoire",id:"CI"},{name:"Croatia",id:"HR"},{name:"Cuba",id:"CU"},{name:"Cyprus",id:"CY"},{name:"Czech Republic",id:"CZ"},{name:"Denmark",id:"DK"},{name:"Djibouti",id:"DJ"},{name:"Dominica",id:"DM"},{name:"Dominican Republic",id:"DO"},{name:"Ecuador",id:"EC"},{name:"Egypt",id:"EG"},{name:"El Salvador",id:"SV"},{name:"Equatorial Guinea",id:"GQ"},{name:"Eritrea",id:"ER"},{name:"Estonia",id:"EE"},{name:"Ethiopia",id:"ET"},{name:"Falkland Islands (Malvinas)",id:"FK"},{name:"Faroe Islands",id:"FO"},{name:"Fiji",id:"FJ"},{name:"Finland",id:"FI"},{name:"France",id:"FR"},{name:"French Guiana",id:"GF"},{name:"French Polynesia",id:"PF"},{name:"French Southern Territories",id:"TF"},{name:"Gabon",id:"GA"},{name:"Gambia",id:"GM"},{name:"Georgia",id:"GE"},{name:"Germany",id:"DE"},{name:"Ghana",id:"GH"},{name:"Gibraltar",id:"GI"},{name:"Greece",id:"GR"},{name:"Greenland",id:"GL"},{name:"Grenada",id:"GD"},{name:"Guadeloupe",id:"GP"},{name:"Guam",id:"GU"},{name:"Guatemala",id:"GT"},{name:"Guernsey",id:"GG"},{name:"Guinea",id:"GN"},{name:"Guinea-Bissau",id:"GW"},{name:"Guyana",id:"GY"},{name:"Haiti",id:"HT"},{name:"Heard Island and Mcdonald Islands",id:"HM"},{name:"Holy See (Vatican City State)",id:"VA"},{name:"Honduras",id:"HN"},{name:"Hong Kong",id:"HK"},{name:"Hungary",id:"HU"},{name:"Iceland",id:"IS"},{name:"India",id:"IN"},{name:"Indonesia",id:"ID"},{name:"Iran, Islamic Republic Of",id:"IR"},{name:"Iraq",id:"IQ"},{name:"Ireland",id:"IE"},{name:"Isle of Man",id:"IM"},{name:"Israel",id:"IL"},{name:"Italy",id:"IT"},{name:"Jamaica",id:"JM"},{name:"Japan",id:"JP"},{name:"Jersey",id:"JE"},{name:"Jordan",id:"JO"},{name:"Kazakhstan",id:"KZ"},{name:"Kenya",id:"KE"},{name:"Kiribati",id:"KI"},{name:"Korea, Democratic People'S Republic of",id:"KP"},{name:"Korea, Republic of",id:"KR"},{name:"Kuwait",id:"KW"},{name:"Kyrgyzstan",id:"KG"},{name:"Lao People'S Democratic Republic",id:"LA"},{name:"Latvia",id:"LV"},{name:"Lebanon",id:"LB"},{name:"Lesotho",id:"LS"},{name:"Liberia",id:"LR"},{name:"Libyan Arab Jamahiriya",id:"LY"},{name:"Liechtenstein",id:"LI"},{name:"Lithuania",id:"LT"},{name:"Luxembourg",id:"LU"},{name:"Macao",id:"MO"},{name:"Macedonia, The Former Yugoslav Republic of",id:"MK"},{name:"Madagascar",id:"MG"},{name:"Malawi",id:"MW"},{name:"Malaysia",id:"MY"},{name:"Maldives",id:"MV"},{name:"Mali",id:"ML"},{name:"Malta",id:"MT"},{name:"Marshall Islands",id:"MH"},{name:"Martinique",id:"MQ"},{name:"Mauritania",id:"MR"},{name:"Mauritius",id:"MU"},{name:"Mayotte",id:"YT"},{name:"Mexico",id:"MX"},{name:"Micronesia, Federated States of",id:"FM"},{name:"Moldova, Republic of",id:"MD"},{name:"Monaco",id:"MC"},{name:"Mongolia",id:"MN"},{name:"Montserrat",id:"MS"},{name:"Morocco",id:"MA"},{name:"Mozambique",id:"MZ"},{name:"Myanmar",id:"MM"},{name:"Namibia",id:"NA"},{name:"Nauru",id:"NR"},{name:"Nepal",id:"NP"},{name:"Netherlands",id:"NL"},{name:"Netherlands Antilles",id:"AN"},{name:"New Caledonia",id:"NC"},{name:"New Zealand",id:"NZ"},{name:"Nicaragua",id:"NI"},{name:"Niger",id:"NE"},{name:"Nigeria",id:"NG"},{name:"Niue",id:"NU"},{name:"Norfolk Island",id:"NF"},{name:"Northern Mariana Islands",id:"MP"},{name:"Norway",id:"NO"},{name:"Oman",id:"OM"},{name:"Pakistan",id:"PK"},{name:"Palau",id:"PW"},{name:"Palestinian Territory, Occupied",id:"PS"},{name:"Panama",id:"PA"},{name:"Papua New Guinea",id:"PG"},{name:"Paraguay",id:"PY"},{name:"Peru",id:"PE"},{name:"Philippines",id:"PH"},{name:"Pitcairn",id:"PN"},{name:"Poland",id:"PL"},{name:"Portugal",id:"PT"},{name:"Puerto Rico",id:"PR"},{name:"Qatar",id:"QA"},{name:"Reunion",id:"RE"},{name:"Romania",id:"RO"},{name:"Russian Federation",id:"RU"},{name:"RWANDA",id:"RW"},{name:"Saint Helena",id:"SH"},{name:"Saint Kitts and Nevis",id:"KN"},{name:"Saint Lucia",id:"LC"},{name:"Saint Pierre and Miquelon",id:"PM"},{name:"Saint Vincent and the Grenadines",id:"VC"},{name:"Samoa",id:"WS"},{name:"San Marino",id:"SM"},{name:"Sao Tome and Principe",id:"ST"},{name:"Saudi Arabia",id:"SA"},{name:"Senegal",id:"SN"},{name:"Serbia and Montenegro",id:"CS"},{name:"Seychelles",id:"SC"},{name:"Sierra Leone",id:"SL"},{name:"Singapore",id:"SG"},{name:"Slovakia",id:"SK"},{name:"Slovenia",id:"SI"},{name:"Solomon Islands",id:"SB"},{name:"Somalia",id:"SO"},{name:"South Africa",id:"ZA"},{name:"South Georgia and the South Sandwich Islands",id:"GS"},{name:"Spain",id:"ES"},{name:"Sri Lanka",id:"LK"},{name:"Sudan",id:"SD"},{name:"Suriname",id:"SR"},{name:"Svalbard and Jan Mayen",id:"SJ"},{name:"Swaziland",id:"SZ"},{name:"Sweden",id:"SE"},{name:"Switzerland",id:"CH"},{name:"Syrian Arab Republic",id:"SY"},{name:"Taiwan, Province of China",id:"TW"},{name:"Tajikistan",id:"TJ"},{name:"Tanzania, United Republic of",id:"TZ"},{name:"Thailand",id:"TH"},{name:"Timor-Leste",id:"TL"},{name:"Togo",id:"TG"},{name:"Tokelau",id:"TK"},{name:"Tonga",id:"TO"},{name:"Trinidad and Tobago",id:"TT"},{name:"Tunisia",id:"TN"},{name:"Turkey",id:"TR"},{name:"Turkmenistan",id:"TM"},{name:"Turks and Caicos Islands",id:"TC"},{name:"Tuvalu",id:"TV"},{name:"Uganda",id:"UG"},{name:"Ukraine",id:"UA"},{name:"United Arab Emirates",id:"AE"},{name:"United Kingdom",id:"GB"},{name:"United States",id:"US"},{name:"United States Minor Outlying Islands",id:"UM"},{name:"Uruguay",id:"UY"},{name:"Uzbekistan",id:"UZ"},{name:"Vanuatu",id:"VU"},{name:"Venezuela",id:"VE"},{name:"Viet Nam",id:"VN"},{name:"Virgin Islands, British",id:"VG"},{name:"Virgin Islands, U.S.",id:"VI"},{name:"Wallis and Futuna",id:"WF"},{name:"Western Sahara",id:"EH"},{name:"Yemen",id:"YE"},{name:"Zambia",id:"ZM"},{name:"Zimbabwe",id:"ZW"}]}var n={getCountries:e};return n}angular.module("AnyDayBuddyAds").factory("UtilService",e)}(),function(){"use strict";function e(){var e={restrict:"EA",templateUrl:"assets/views/orders/orders.campaign.html",scope:{options:"=",form:"=",total:"="},controller:n,controllerAs:"vm",bindToController:!0};return e}function n(e,n){function a(){}a()}angular.module("AnyDayBuddyAds").directive("adbOrdersCampaign",e),n.$inject=["$http","$q"]}(),function(){"use strict";function e(){var e={restrict:"EA",templateUrl:"assets/views/orders/orders.checkout.html",scope:{options:"=",form:"=",total:"=",success:"="},controller:n,controllerAs:"vm",bindToController:!0};return e}function n(e,n,a,i,o,t,r){function s(){r.getClientToken().then(function(e){console.log(e),l(e.clientToken)}).catch(function(e){console.log(e)})}function l(e){n.setup(e,"custom",{paypal:{container:"paypal-container",singleUse:!0,amount:"0",currency:"USD",locale:"en_us",enableShippingAddress:!1},onPaymentMethodReceived:function(e){c(e.nonce)},onReady:function(e){d.checkout=e}})}function c(e){console.log(e),a.$apply(function(){d.form.nonce=e,d.authorization=!0})}var d=this;d.checkout={},d.loading=!1,d.authorization=!1,s(),d.launch=function(){d.loading=!0,d.form.amount=d.total,r.createCampaign(d.form).then(function(e){console.log(e),d.success=!0,i.fill=!0}).catch(function(e){console.log(e),d.success=!1}).finally(function(){d.loading=!1})},a.$watch("vm.form",function(e,n){e&&console.log(e)}),a.$watch("vm.checkout",function(e,n){e&&console.log(e)})}angular.module("AnyDayBuddyAds").directive("adbOrdersCheckout",e),n.$inject=["_","braintree","$scope","$rootScope","$http","$q","DataService"]}(),function(){"use strict";function e(){var e={restrict:"EA",templateUrl:"assets/views/orders/orders.customer.html",scope:{options:"=",form:"=",total:"=",control:"="},controller:n,controllerAs:"vm",bindToController:!0};return e}function n(e,n,a,i,o){function t(){r.control.tabs[3].valid=!0,r.control.selectedTab+=1}var r=this;r.nextTab=t,r.auth=function(){r.loading=!0,o.login(r.form.auth).then(function(e){console.log(e),t()}).catch(function(e){console.log(e)}).finally(function(){r.loading=!1})},r.signup=function(){i.show({fullscreen:!0,controllerAs:"vm",controller:"SignupController",templateUrl:"assets/views/modal/signup.html"}).then(function(){t()})}}angular.module("AnyDayBuddyAds").directive("adbOrdersCustomer",e),n.$inject=["$http","$q","$rootScope","$mdDialog","Auth"]}(),function(){"use strict";function e(e,n,a,i,o,t){function r(){t.getOptions().then(function(e){console.log(e),g.options.target=s(e),console.log(g.form)}).catch(function(e){console.log(e)})}function s(n){var a=function(n,i){return e.isObject(n)?e.merge({},n,i,a):n||i},i=e.flatten([{},n,a]);return e.merge.apply(e,i)}function l(e,n){i.show({fullscreen:!0,targetEvent:e,clickOutsideToClose:!0,templateUrl:"app/shared/layout/imageModal.html",locals:{image:n},controller:["$scope","image",function(e,n){e.image=n}]})}function c(){i.show({templateUrl:"app/components/ad/advertisementModal.html",clickOutsideToClose:!0,fullscreen:!0})}function d(){o.show(o.simple().textContent("Awesome, you can now go to next step!").position("bottom right").hideDelay(3e3))}function u(n){var a=!1;return a="both"===n?!!e.isEmpty(e.pickBy(g.form.banner,e.isNull)):!!(g.form.banner.description&&g.form.banner.url&&g.form.banner[n])}function m(){return!e.isEmpty(g.form.marker)}function p(){var e=g.form.media.display,n=g.form.options.display.display;switch(n){case"banner":return u(e);case"map":return m()}return!1}function f(){switch(g.control.selectedTab){case 0:g.form.media.hasOwnProperty("id")&&g.form.options.display.hasOwnProperty("id")&&p()?(g.control.tabs[1].valid=!0,d()):g.control.tabs[1].valid=!1;break;case 1:g.form.options.impressions.hasOwnProperty("id")?(g.control.tabs[2].valid=!0,a.user&&(g.control.tabs[3].valid=!0),d()):g.control.tabs[2].valid=!1;break;default:console.log(g.control.selectedTab)}}var g=this;g.openImage=l,g.add=c,g.total=0,g.success=!1,g.control={selectedTab:0,tabs:[{valid:!0,show:!0},{valid:!1,show:!0},{valid:!1,show:!0},{valid:!1,show:!0}]},g.options={target:{display:[],media:[],impressionsUnits:[],impressionsTime:[],distance:[],age:[],gender:[]}},g.form={media:{},banner:{description:null,url:null,website:null,app:null},marker:{},options:{display:{},impressions:{},distance:{},age:{},gender:{},interests:{}},customer:{},auth:{}},r(),n.$watch("vm.form",function(n,a){console.log(n),f(),g.total=n.media.hasOwnProperty("fee")?n.media.fee:0,e.map(n.options,function(e){e.hasOwnProperty("fee")&&(g.total+=g.total*e.fee),e.hasOwnProperty("discount")&&(g.total-=g.total*e.discount)})},!0)}angular.module("AnyDayBuddyAds").controller("OrdersController",e),e.$inject=["_","$scope","$rootScope","$mdDialog","$mdToast","DataService"]}(),function(){"use strict";function e(){function e(e,n,a,i){}var a={restrict:"EA",templateUrl:"assets/views/orders/orders.resume.html",scope:{options:"=",form:"=",total:"="},link:e,controller:n,controllerAs:"vm",bindToController:!0};return a}function n(e,n,a){function i(){}var o=this;i(),o.formatImpressions=function(){if(o.form.impressionType&&o.form.options.impressions.hasOwnProperty("id")){var n={impressionsUnits:e.join([o.form.options.impressions.quantity,o.form.options.impressions.type]," "),impressionsTime:e.join([o.form.options.impressions.time,o.form.options.impressions.period]," ")};return n[o.form.impressionType]}},o.formatTarget=function(){var n={distance:{value:o.form.options.distance,render:e.join(["Distance:",o.form.options.distance.distance||"","Km"]," ")},age:{value:o.form.options.age,render:e.join(["Age between:",e.join(o.form.options.age.range,"-")]," ")},gender:{value:o.form.options.gender,render:e.join(["Gender:",o.form.options.gender.gender]," ")},interests:{value:o.form.options.interests,render:e.join(["Interests:",o.form.options.interests.quantity]," ")}},a=e.pickBy(n,function(e){return e.value.hasOwnProperty("id")});return e.isEmpty(a)?"":e.join(["Target: ",e.map(Object.keys(a),function(e){return n[e].render})],"")},o.formatResume=function(){return resume}}angular.module("AnyDayBuddyAds").directive("adbOrdersResume",e),n.$inject=["_","$http","$q"]}(),function(){"use strict";function e(){var e={restrict:"EA",templateUrl:"assets/views/orders/orders.display.html",scope:{options:"=",form:"=",total:"="},controller:n,controllerAs:"vm",bindToController:!0};return e}function n(e,n,a,i,o,t){function r(){console.log("activate"),d()}function s(e,n,a,i){console.log(n),o(function(){e.panTo(new google.maps.LatLng(n.latitude,n.longitude)),a&&e.panBy(0,-200)},100)}function l(e,n,a){var o=a[0],t=o.latLng.lat(),r=o.latLng.lng();u.marker={id:Date.now(),location:{latitude:t,longitude:r},show:!1},i.$apply()}function c(){console.log("bounds changed"),console.log(u.placesReady),u.map.instance||d()}function d(){a.all([e,n.promise(1)]).then(function(e){var n=e[0],a=e[1][0].map;u.window={pixelOffset:new n.Size(0,(-40)),closeClick:function(){u.marker.show=!1}},g=new n.places.AutocompleteService,f=new n.DirectionsService,p=new n.DirectionsRenderer,u.map.instance=a,p.setMap(u.map.instance),m=new n.places.PlacesService(u.map.instance),u.placesReady=!0,console.log("ready")})}var u=this,m=null,p=null,f=null,g=null;u.markerConfirmed=!1,u.placesReady=!1,u.control={uploading:!1},u.map={center:{latitude:45.50174502816667,longitude:-73.5703881829977},zoom:14,options:{scrollwheel:!0},mapMarker:!0,disableDefaultUI:!0,control:{},events:{click:l,idle:c}},u.info={name:"",address:"",icon:""},u.marker={id:0,location:{latitude:45.50174502816667,longitude:-73.5703881829977},show:!1},u.desktopDropzone=t.create("desktop",function(e,n){i.$apply(function(){console.log(n.secure_url),u.form.banner.website=n.secure_url,u.control.uploading=!1})},function(){i.$apply(function(){u.control.uploading=!0})}),u.mobileDropzone=t.create("mobile",function(e,n){i.$apply(function(){console.log(n.secure_url),u.form.banner.app=n.secure_url,u.control.uploading=!1})},function(){i.$apply(function(){u.control.uploading=!0})}),r(),u.clickMarker=function(){console.log("click"),u.marker.show=!u.marker.show,i.$apply()},u.autocompleteAddress=function(e){u.markerConfirmed=!1;var n=a.defer();return g.getQueryPredictions({input:e},function(e){n.resolve(e?_.filter(e,"place_id"):[])}),n.promise},u.getPlace=function(){console.log(u.info.place),u.info.place&&m.getDetails({placeId:u.info.place.place_id},function(e,n){console.log(e,n),u.marker={id:Date.now(),name:e.name,address:e.formatted_address,location:{latitude:parseFloat(e.geometry.location.lat()),longitude:parseFloat(e.geometry.location.lng())},show:!0},s(u.map.instance,u.marker.location,null,!0),i.$apply()})},u.confirmMarker=function(){angular.copy(u.marker,u.form.marker),u.markerConfirmed=!0}}angular.module("AnyDayBuddyAds").directive("adbDisplayChooser",e),n.$inject=["uiGmapGoogleMapApi","uiGmapIsReady","$q","$scope","$timeout","DropzoneService"]}(),function(){"use strict";function e(e){function n(n,a,i){var o,t;o=n.dropzone,t=new e(a[0],o.options),n.reset&&t.on("complete",function(e){t.removeFile(e)}),angular.forEach(o.eventHandlers,function(e,n){t.on(n,e)})}var a={link:n,restrict:"EA",scope:{dropzone:"=dropzone",reset:"@reset"}};return a}angular.module("AnyDayBuddyAds").directive("dropzone",e),e.$inject=["Dropzone"]}(),function(){"use strict";function e(){var e={restrict:"EA",templateUrl:"assets/views/footer/footer.html",controller:n,controllerAs:"vm",bindToController:!0};return e}function n(){function e(){console.log("footer Activated")}e()}angular.module("AnyDayBuddyAds").directive("footerDirective",e),n.$inject=[]}(),function(){"use strict";function e(){var e={restrict:"EA",templateUrl:"assets/views/header/header.html",controller:n,controllerAs:"vm",bindToController:!0,scope:{}};return e}function n(e,n,a){var i=this;i.logout=function(){console.log("LOGOUT"),e.logout()},a.$on("login",function(e,n){a.user||angular.copy(n,a.user),console.log("login",a.user)})}angular.module("AnyDayBuddyAds").directive("headerDirective",e),n.$inject=["Auth","$scope","$rootScope"]}();
//# sourceMappingURL=data:application/json;base64,
