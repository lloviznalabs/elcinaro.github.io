!function(){"use strict";angular.module("AnyDayBuddyAds",["ui.router","ngMaterial","uiGmapgoogle-maps"])}(),function(){"use strict";angular.module("AnyDayBuddyAds").constant("_",window._).constant("jQuery",window.jQuery).constant("Dropzone",window.Dropzone).constant("braintree",window.braintree).constant("baseApi","https://api.anydaybuddy.com")}(),function(){"use strict";function e(e,o,t){e.state("home",{url:"/",views:{main:{controller:"HomeController",controllerAs:"vm",templateUrl:"assets/views/home.html"}},authenticate:!1}).state("orders",{url:"/orders",views:{main:{controller:"OrdersController",controllerAs:"vm",templateUrl:"assets/views/orders.html"}},authenticate:!1}),o.otherwise("/")}angular.module("AnyDayBuddyAds").config(e),e.$inject=["$stateProvider","$urlRouterProvider","$locationProvider"]}(),function(){"use strict";function e(e){e.configure({key:"AIzaSyAonFuCDb7HjXUz0uocKbEGUJz91IL9EVs",libraries:"places"})}function o(e,o){e.definePalette("primary",{50:"#9dceda",100:"#65b2c5",200:"#429ab0",300:"#2f6d7c",400:"#265966",500:"#1e4650",600:"#16323a",700:"#0d1f23",800:"#050c0d",900:"#000000",A100:"#9dceda",A200:"#65b2c5",A400:"#265966",A700:"#0d1f23",contrastDefaultColor:"light",contrastDarkColors:"50 100 200 A100 A200"}),e.definePalette("accent",{50:"#d0ebed",100:"#99d4d8",200:"#70c3c8",300:"#43a7ae",400:"#3a9298",500:"#327d82",600:"#29686c",700:"#215256",800:"#183d40",900:"#10282a",A100:"#d0ebed",A200:"#99d4d8",A400:"#3a9298",A700:"#215256",contrastDefaultColor:"light",contrastDarkColors:"50 100 200 300 A100 A200"}),e.definePalette("warn",{50:"#faeee6",100:"#ecc3a7",200:"#e2a379",300:"#d57b3e",400:"#c96b2b",500:"#b05e26",600:"#975121",700:"#7e431b",800:"#643616",900:"#4b2810",A100:"#faeee6",A200:"#ecc3a7",A400:"#c96b2b",A700:"#7e431b",contrastDefaultColor:"light",contrastDarkColors:"50 100 200 300 A100 A200"}),e.theme("default").primaryPalette("primary").accentPalette("accent").warnPalette("warn")}angular.module("AnyDayBuddyAds").config(o).config(e),e.$inject=["uiGmapGoogleMapApiProvider"],o.$inject=["$mdThemingProvider","$locationProvider"]}(),function(){"use strict";function e(){function e(e){return e}return e}angular.module("AnyDayBuddyAds").filter("filter",e)}(),function(){"use strict";function e(e,o){function t(){}function n(e){o("html, body").animate({scrollTop:o(e).offset().top},1e3)}var r=this;r.title="Home Controller",r.scrollTo=n,t()}angular.module("AnyDayBuddyAds").controller("HomeController",e),e.$inject=["$rootScope","jQuery"]}(),function(){"use strict";function e(){function e(e,o,t,n){}var t={restrict:"EA",templateUrl:"assets/views/orders/orders.campaign.html",scope:{options:"=",form:"=",total:"="},link:e,controller:o,controllerAs:"vm",bindToController:!0};return t}function o(e,o){function t(){}t()}angular.module("AnyDayBuddyAds").directive("adbOrdersCampaign",e),o.$inject=["$http","$q"]}(),function(){"use strict";function e(){function e(e,o,t,n){}var t={restrict:"EA",templateUrl:"assets/views/orders/orders.checkout.html",scope:{options:"=",form:"=",total:"="},link:e,controller:o,controllerAs:"vm",bindToController:!0};return t}function o(e,o,t,n,r,i){function a(){i.getClientToken().then(function(e){console.log(e),c(e.clientToken)}).catch(function(e){console.log(e)})}function c(e){o.setup(e,"custom",{paypal:{container:"paypal-container",singleUse:!0,amount:10,currency:"USD",locale:"en_us",enableShippingAddress:!0},onPaymentMethodReceived:function(e){l(e.nonce)},onReady:function(e){s.checkout=e}})}function l(e){console.log(e)}var s=this;s.checkout={},a(),t.$watch("vm.checkout",function(e,o){e&&console.log(e)})}angular.module("AnyDayBuddyAds").directive("adbOrdersCheckout",e),o.$inject=["_","braintree","$scope","$http","$q","DataService"]}(),function(){"use strict";function e(){function e(e,o,t,n){}var t={restrict:"EA",templateUrl:"assets/views/orders/orders.customer.html",scope:{options:"=",form:"=",total:"="},link:e,controller:o,controllerAs:"vm",bindToController:!0};return t}function o(e,o){function t(){}t()}angular.module("AnyDayBuddyAds").directive("adbOrdersCustomer",e),o.$inject=["$http","$q"]}(),function(){"use strict";function e(e,o,t,n){function r(){n.getOptions().then(function(e){console.log(e),l.options.target=i(e),console.log(l.form)}).catch(function(e){console.log(e)})}function i(o){var t=function(o,n){return e.isObject(o)?e.merge({},o,n,t):o||n},n=e.flatten([{},o,t]);return e.merge.apply(e,n)}function a(e,o){t.show({fullscreen:!0,targetEvent:e,clickOutsideToClose:!0,templateUrl:"app/shared/layout/imageModal.html",locals:{image:o},controller:["$scope","image",function(e,o){e.image=o}]})}function c(){t.show({templateUrl:"app/components/ad/advertisementModal.html",clickOutsideToClose:!0,fullscreen:!0})}var l=this;l.openImage=a,l.add=c,l.total=0,l.options={target:{display:[],media:[],impressionsUnits:[],impressionsTime:[],distance:[],age:[],gender:[]}},l.form={media:{},options:{display:{},impressions:{},distance:{},age:{},gender:{}}},r(),o.$watch("vm.form",function(o,t){console.log(o),l.total=o.media.hasOwnProperty("fee")?o.media.fee:0,e.map(o.options,function(e){e.hasOwnProperty("fee")&&(l.total+=l.total*e.fee),e.hasOwnProperty("discount")&&(l.total-=l.total*e.discount)})},!0)}angular.module("AnyDayBuddyAds").controller("OrdersController",e),e.$inject=["_","$scope","$mdDialog","DataService"]}(),function(){"use strict";function e(){function e(e,o,t,n){}var t={restrict:"EA",templateUrl:"assets/views/orders/orders.display.html",scope:{options:"=",form:"=",total:"="},link:e,controller:o,controllerAs:"vm",bindToController:!0};return t}function o(e,o,t,n,r,i){function a(){t.all([e,o.promise(1)]).then(function(e){var o=e[0],t=e[1][0].map;u.window={pixelOffset:new o.Size(0,(-40)),closeClick:function(){u.marker.show=!1}},m=new o.places.AutocompleteService,f=new o.DirectionsService,p=new o.DirectionsRenderer,u.map.instance=t,p.setMap(u.map.instance),d=new o.places.PlacesService(u.map.instance),u.placesReady=!0,console.log("ready")})}function c(e,o,t,n){console.log(o),r(function(){e.panTo(new google.maps.LatLng(o.latitude,o.longitude)),t&&e.panBy(0,-200)},100)}function l(e,o,t){var r=t[0],i=r.latLng.lat(),a=r.latLng.lng();u.marker={id:Date.now(),location:{latitude:i,longitude:a},show:!1},n.$apply()}function s(){console.log("bounds changed"),!u.map.instance}var u=this,d=null,p=null,f=null,m=null;u.control={uploading:!1},u.map={center:{latitude:45.50174502816667,longitude:-73.5703881829977},zoom:14,options:{scrollwheel:!0},mapMarker:!0,disableDefaultUI:!0,control:{},events:{click:l,idle:s}},u.info={name:"Venue name",address:"",icon:""},u.marker={id:0,location:{latitude:45.50174502816667,longitude:-73.5703881829977},show:!1},u.dropzone=i.create(function(e,o){n.$apply(function(){console.log(o.secure_url),u.control.uploading=!1})},function(){n.$apply(function(){u.control.uploading=!0})}),a(),u.clickMarker=function(){console.log("click"),u.marker.show=!u.marker.show,n.$apply()},u.autocompleteAddress=function(e){var o=t.defer();return m.getQueryPredictions({input:e},function(e){o.resolve(e?_.filter(e,"place_id"):[])}),o.promise},u.getPlace=function(){console.log(u.info.place),u.info.place&&d.getDetails({placeId:u.info.place.place_id},function(e,o){console.log(e,o),u.marker={id:Date.now(),name:e.name,location:{latitude:parseFloat(e.geometry.location.lat()),longitude:parseFloat(e.geometry.location.lng())},show:!0},c(u.map.instance,u.marker.location,null,!0),n.$apply()})}}angular.module("AnyDayBuddyAds").directive("adbDisplayChooser",e),o.$inject=["uiGmapGoogleMapApi","uiGmapIsReady","$q","$scope","$timeout","DropzoneService"]}(),function(){"use strict";function e(e,o,t){function n(){var n=o.defer();return e({method:"GET",url:t+"/campaign/options/"}).success(function(e,o,t,r){n.resolve(e)}).error(function(e){n.reject(e)}),n.promise}function r(){var n=o.defer();return e({method:"GET",url:t+"/commerce/clientToken/"}).success(function(e,o,t,r){n.resolve(e)}).error(function(e){n.reject(e)}),n.promise}var i={getOptions:n,getClientToken:r};return i}angular.module("AnyDayBuddyAds").service("DataService",e),e.$inject=["$http","$q","baseApi"]}(),function(){"use strict";function e(){function e(e,o,t){return{options:{url:"https://api.cloudinary.com/v1_1/cloud9/image/upload",uploadMultiple:!1,maxFiles:1,acceptedFiles:"image/*",dictDefaultMessage:"Drop file or click here to upload",addRemoveLinks:!0},eventHandlers:{sending:function(e,t,n){n.append("api_key",839988333153567),n.append("timestamp",Date.now()/1e3|0),n.append("upload_preset","sm2ev4nu"),o&&o()},success:e,removedfile:t}}}function o(e,o,t){return{options:{url:"https://api.cloudinary.com/v1_1/cloud9/image/upload",maxFiles:e,acceptedFiles:"image/*",dictDefaultMessage:"Drop files or click here to upload"},eventHandlers:{sending:function(e,o,n){n.append("api_key",839988333153567),n.append("timestamp",Date.now()/1e3|0),n.append("upload_preset","sm2ev4nu"),t&&t()},success:o}}}var t={create:e,createMultiple:o};return t}angular.module("AnyDayBuddyAds").service("DropzoneService",e)}(),function(){"use strict";function e(e,o,t){function n(){var e=$rootScope.currentUser;return!!e}function r(n){var r=t.defer();return o({method:"POST",url:e+"login",data:n}).success(function(e){$rootScope.currentUser=e.user,r.resolve(e)}).error(function(e){r.reject(e)}),r.promise}var i={isLoggedIn:n,login:r};return i}angular.module("AnyDayBuddyAds").factory("userService",e),e.$inject=["API_URL","$http","$q"]}(),function(){"use strict";function e(e){function o(o,t,n){var r,i;r=o.dropzone,i=new e(t[0],r.options),o.reset&&i.on("complete",function(e){i.removeFile(e)}),angular.forEach(r.eventHandlers,function(e,o){i.on(o,e)})}var t={link:o,restrict:"EA",scope:{dropzone:"=dropzone",reset:"@reset"}};return t}angular.module("AnyDayBuddyAds").directive("dropzone",e),e.$inject=["Dropzone"]}(),function(){"use strict";function e(){var e={restrict:"EA",templateUrl:"assets/views/footer/footer.html",controller:o,controllerAs:"vm",bindToController:!0};return e}function o(){function e(){console.log("footer Activated")}e()}angular.module("AnyDayBuddyAds").directive("footerDirective",e),o.$inject=[]}(),function(){"use strict";function e(){var e={restrict:"EA",templateUrl:"assets/views/header/header.html",controller:o,controllerAs:"vm",bindToController:!0};return e}function o(){function e(){console.log("header Activated")}e()}angular.module("AnyDayBuddyAds").directive("headerDirective",e),o.$inject=[]}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5tb2R1bGUuanMiLCJhcHAuY29uc3RhbnRzLmpzIiwiYXBwLnJvdXRlLmpzIiwiYXBwLmNvbmZpZy5qcyIsImZpbHRlcnMvZXhhbXBsZS5maWx0ZXIuanMiLCJtYWluL2hvbWUuY29udHJvbGxlci5qcyIsIm9yZGVycy9jYW1wYWlnbi5kaXJlY3RpdmUuanMiLCJvcmRlcnMvY2hlY2tvdXQuZGlyZWN0aXZlLmpzIiwib3JkZXJzL2N1c3RvbWVyLmRpcmVjdGl2ZS5qcyIsIm9yZGVycy9vcmRlcnMuY29udHJvbGxlci5qcyIsIm9yZGVycy91dGlscy5kaXNwbGF5LmRpcmVjdGl2ZS5qcyIsInNlcnZpY2VzL2RhdGEuc2VydmljZS5qcyIsInNlcnZpY2VzL2Ryb3B6b25lLnNlcnZpY2UuanMiLCJzZXJ2aWNlcy91c2VyLnNlcnZpY2UuanMiLCJzaGFyZWQvZHJvcHpvbmUuZGlyZWN0aXZlLmpzIiwiY29tcG9uZW50cy9mb290ZXIvZm9vdGVyLmRpcmVjdGl2ZS5qcyIsImNvbXBvbmVudHMvaGVhZGVyL2hlYWRlci5kaXJlY3RpdmUuanMiXSwibmFtZXMiOlsiYW5ndWxhciIsIm1vZHVsZSIsImNvbnN0YW50Iiwid2luZG93IiwiXyIsImpRdWVyeSIsIkRyb3B6b25lIiwiYnJhaW50cmVlIiwicm91dGVyUHJvdmlkZXIiLCIkc3RhdGVQcm92aWRlciIsIiR1cmxSb3V0ZXJQcm92aWRlciIsIiRsb2NhdGlvblByb3ZpZGVyIiwic3RhdGUiLCJ1cmwiLCJ2aWV3cyIsIm1haW4iLCJjb250cm9sbGVyIiwiY29udHJvbGxlckFzIiwidGVtcGxhdGVVcmwiLCJhdXRoZW50aWNhdGUiLCJvdGhlcndpc2UiLCJjb25maWciLCIkaW5qZWN0IiwibWFwc1Byb3ZpZGVyIiwidWlHbWFwR29vZ2xlTWFwQXBpUHJvdmlkZXIiLCJjb25maWd1cmUiLCJrZXkiLCJsaWJyYXJpZXMiLCIkbWRUaGVtaW5nUHJvdmlkZXIiLCJkZWZpbmVQYWxldHRlIiwiNTAiLCIxMDAiLCIyMDAiLCIzMDAiLCI0MDAiLCI1MDAiLCI2MDAiLCI3MDAiLCI4MDAiLCI5MDAiLCJBMTAwIiwiQTIwMCIsIkE0MDAiLCJBNzAwIiwiY29udHJhc3REZWZhdWx0Q29sb3IiLCJjb250cmFzdERhcmtDb2xvcnMiLCJ0aGVtZSIsInByaW1hcnlQYWxldHRlIiwiYWNjZW50UGFsZXR0ZSIsIndhcm5QYWxldHRlIiwiZXhhbXBsZSIsImV4YW1wbGVGaWx0ZXIiLCJwYXJhbXMiLCJmaWx0ZXIiLCJIb21lQ29udHJvbGxlciIsIiRyb290U2NvcGUiLCJhY3RpdmF0ZSIsInNjcm9sbFRvIiwiZWxlbWVudCIsImFuaW1hdGUiLCJzY3JvbGxUb3AiLCJvZmZzZXQiLCJ0b3AiLCJ2bSIsInRoaXMiLCJ0aXRsZSIsImRpcmVjdGl2ZSIsImxpbmtGdW5jIiwic2NvcGUiLCJlbCIsImF0dHIiLCJjdHJsIiwicmVzdHJpY3QiLCJvcHRpb25zIiwiZm9ybSIsInRvdGFsIiwibGluayIsIkNvbnRyb2xsZXIiLCJiaW5kVG9Db250cm9sbGVyIiwiJGh0dHAiLCIkcSIsIiRzY29wZSIsIkRhdGFTZXJ2aWNlIiwiZ2V0Q2xpZW50VG9rZW4iLCJ0aGVuIiwicmVzIiwiY29uc29sZSIsImxvZyIsInNldHVwR2F0ZXdheSIsImNsaWVudFRva2VuIiwiY2F0Y2giLCJlcnIiLCJ0b2tlbiIsInNldHVwIiwicGF5cGFsIiwiY29udGFpbmVyIiwic2luZ2xlVXNlIiwiYW1vdW50IiwiY3VycmVuY3kiLCJsb2NhbGUiLCJlbmFibGVTaGlwcGluZ0FkZHJlc3MiLCJvblBheW1lbnRNZXRob2RSZWNlaXZlZCIsIm9iaiIsImRvU29tZXRoaW5nV2l0aFRoZU5vbmNlIiwibm9uY2UiLCJvblJlYWR5IiwiaW50ZWdyYXRpb24iLCJjaGVja291dCIsIiR3YXRjaCIsImMiLCJvIiwiJG1kRGlhbG9nIiwiZ2V0T3B0aW9ucyIsInJlc3AiLCJ0YXJnZXQiLCJkb19tZXJnZSIsInJvbGVzIiwibWVyZ2VyIiwiYSIsImIiLCJpc09iamVjdCIsIm1lcmdlIiwiYXJncyIsImZsYXR0ZW4iLCJhcHBseSIsIm9wZW5JbWFnZSIsIiRldmVudCIsImltYWdlIiwic2hvdyIsImZ1bGxzY3JlZW4iLCJ0YXJnZXRFdmVudCIsImNsaWNrT3V0c2lkZVRvQ2xvc2UiLCJsb2NhbHMiLCJhZGQiLCJkaXNwbGF5IiwibWVkaWEiLCJpbXByZXNzaW9uc1VuaXRzIiwiaW1wcmVzc2lvbnNUaW1lIiwiZGlzdGFuY2UiLCJhZ2UiLCJnZW5kZXIiLCJpbXByZXNzaW9ucyIsImhhc093blByb3BlcnR5IiwiZmVlIiwibWFwIiwiaXRlbSIsImRpc2NvdW50IiwidWlHbWFwR29vZ2xlTWFwQXBpIiwidWlHbWFwSXNSZWFkeSIsIiR0aW1lb3V0IiwiRHJvcHpvbmVTZXJ2aWNlIiwiYWxsIiwicHJvbWlzZSIsInJlc3BvbnNlIiwiaW5zdGFuY2UiLCJwaXhlbE9mZnNldCIsIlNpemUiLCJjbG9zZUNsaWNrIiwibWFya2VyIiwiUGxhY2VzQXV0b2NvbXBsZXRlIiwicGxhY2VzIiwiQXV0b2NvbXBsZXRlU2VydmljZSIsIkRpcmVjdGlvbnNTZXJ2aWNlIiwiRGlyZWN0aW9uUmVuZGVyZXIiLCJEaXJlY3Rpb25zUmVuZGVyZXIiLCJzZXRNYXAiLCJQbGFjZXMiLCJQbGFjZXNTZXJ2aWNlIiwicGxhY2VzUmVhZHkiLCJjZW50ZXJNYXAiLCJsb2NhdGlvbiIsInNjcm9sbCIsInBhblRvIiwiZ29vZ2xlIiwibWFwcyIsIkxhdExuZyIsImxhdGl0dWRlIiwibG9uZ2l0dWRlIiwicGFuQnkiLCJjbGlja01hcCIsImV2ZW50TmFtZSIsIm9yaWdpbmFsRXZlbnRBcmdzIiwiZSIsImxhdCIsImxhdExuZyIsImxvbiIsImxuZyIsImlkIiwiRGF0ZSIsIm5vdyIsIiRhcHBseSIsImJvdW5kc0NoYW5nZWQiLCJjb250cm9sIiwidXBsb2FkaW5nIiwiY2VudGVyIiwiem9vbSIsInNjcm9sbHdoZWVsIiwibWFwTWFya2VyIiwiZGlzYWJsZURlZmF1bHRVSSIsImV2ZW50cyIsImNsaWNrIiwiaWRsZSIsImluZm8iLCJuYW1lIiwiYWRkcmVzcyIsImljb24iLCJkcm9wem9uZSIsImNyZWF0ZSIsImZpbGUiLCJzZWN1cmVfdXJsIiwiY2xpY2tNYXJrZXIiLCJhdXRvY29tcGxldGVBZGRyZXNzIiwiZGVmZXJyZWQiLCJkZWZlciIsImdldFF1ZXJ5UHJlZGljdGlvbnMiLCJpbnB1dCIsImRhdGEiLCJyZXNvbHZlIiwiZ2V0UGxhY2UiLCJwbGFjZSIsImdldERldGFpbHMiLCJwbGFjZUlkIiwicGxhY2VfaWQiLCJzdGF0dXMiLCJwYXJzZUZsb2F0IiwiZ2VvbWV0cnkiLCJkYXRhU2VydmljZSIsImJhc2VBcGkiLCJtZXRob2QiLCJzdWNjZXNzIiwiaGVhZGVycyIsImVycm9yIiwicmVqZWN0Iiwic2VydmljZSIsInNlbmRpbmciLCJyZW1vdmVkZmlsZSIsInVwbG9hZE11bHRpcGxlIiwibWF4RmlsZXMiLCJhY2NlcHRlZEZpbGVzIiwiZGljdERlZmF1bHRNZXNzYWdlIiwiYWRkUmVtb3ZlTGlua3MiLCJldmVudEhhbmRsZXJzIiwieGhyIiwiZm9ybURhdGEiLCJhcHBlbmQiLCJjcmVhdGVNdWx0aXBsZSIsInVzZXJTZXJ2aWNlIiwiQVBJX1VSTCIsImlzTG9nZ2VkSW4iLCJ1c2VyIiwiY3VycmVudFVzZXIiLCJsb2dpbiIsImZhY3RvcnkiLCJhdHRycyIsInpvbmUiLCJyZXNldCIsIm9uIiwicmVtb3ZlRmlsZSIsImZvckVhY2giLCJoYW5kbGVyIiwiZXZlbnQiLCJmb290ZXJEaXJlY3RpdmUiLCJmb290ZXJDb250cm9sbGVyIiwiaGVhZGVyRGlyZWN0aXZlIiwiaGVhZGVyQ29udHJvbGxlciJdLCJtYXBwaW5ncyI6IkNBU0EsV0FDQSxZQUVBQSxTQUNBQyxPQUFBLGtCQUNBLFlBQ0EsYUFDQSx5QkNoQkEsV0FDQSxZQUVBRCxTQUNBQyxPQUFBLGtCQUNBQyxTQUFBLElBQUFDLE9BQUFDLEdBQ0FGLFNBQUEsU0FBQUMsT0FBQUUsUUFDQUgsU0FBQSxXQUFBQyxPQUFBRyxVQUNBSixTQUFBLFlBQUFDLE9BQUFJLFdB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OEMsRUFBQUcsV0FBQWpELEtBSUFoTixRQUFBa1EsUUFBQTdPLEVBQUE0TixjQUFBLFNBQUFrQixFQUFBQyxHQUNBTixFQUFBRSxHQUFBSSxFQUFBRCxLQXZCQSxHQUFBak0sSUFDQVUsS0FBQUEsRUFDQUosU0FBQSxLQUNBSixPQUNBMEksU0FBQSxZQUNBaUQsTUFBQSxVQUdBLE9BQUE3TCxHQWZBbEUsUUFDQUMsT0FBQSxrQkFDQWlFLFVBQUEsV0FBQTRJLEdBRUFBLEVBQUF4TCxTQUFBLGVDUEEsV0FDQSxZQU9BLFNBQUErTyxLQUNBLEdBQUFuTSxJQUNBTSxTQUFBLEtBQ0F0RCxZQUFBLGtDQUNBRixXQUFBc1AsRUFDQXJQLGFBQUEsS0FDQTZELGtCQUFBLEVBR0EsT0FBQVosR0FNQSxRQUFBb00sS0FLQSxRQUFBOU0sS0FDQThCLFFBQUFDLElBQUEsb0JBSEEvQixJQXZCQXhELFFBQ0FDLE9BQUEsa0JBQ0FpRSxVQUFBLGtCQUFBbU0sR0FlQUMsRUFBQWhQLGNDcEJBLFdBQ0EsWUFPQSxTQUFBaVAsS0FDQSxHQUFBck0sSUFDQU0sU0FBQSxLQUNBdEQsWUFBQSxrQ0FDQUYsV0FBQXdQLEVBQ0F2UCxhQUFBLEtBQ0E2RCxrQkFBQSxFQUdBLE9BQUFaLEdBTUEsUUFBQXNNLEtBS0EsUUFBQWhOLEtBQ0E4QixRQUFBQyxJQUFBLG9CQUhBL0IsSUF2QkF4RCxRQUNBQyxPQUFBLGtCQUNBaUUsVUFBQSxrQkFBQXFNLEdBZUFDLEVBQUFsUCIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBuZ2RvYyBvdmVydmlld1xuICogQG5hbWUgQW55RGF5QnVkZHlBZHNcbiAqIEByZXF1aXJlcyB1aS5yb3V0ZXJcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIEFuZ3VsYXJKUyBiYXNpYyBhcHAgdGVtcGxhdGVcbiAqXG4gKi9cbihmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdBbnlEYXlCdWRkeUFkcycsIFtcbiAgICAgICd1aS5yb3V0ZXInLFxuICAgICAgJ25nTWF0ZXJpYWwnLFxuICAgICAgJ3VpR21hcGdvb2dsZS1tYXBzJyxcbiAgICBdKTtcblxufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdBbnlEYXlCdWRkeUFkcycpXG4gICAgLmNvbnN0YW50KCdfJywgd2luZG93Ll8pXG4gICAgLmNvbnN0YW50KCdqUXVlcnknLCB3aW5kb3cualF1ZXJ5KVxuICAgIC5jb25zdGFudCgnRHJvcHpvbmUnLCB3aW5kb3cuRHJvcHpvbmUpXG4gICAgLmNvbnN0YW50KCdicmFpbnRyZWUnLCB3aW5kb3cuYnJhaW50cmVlKVxuICAgIC5jb25zdGFudCgnYmFzZUFwaScsICdodHRwczovL2FwaS5hbnlkYXlidWRkeS5jb20nKTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnQW55RGF5QnVkZHlBZHMnKVxuICAgIC5jb25maWcocm91dGVyUHJvdmlkZXIpO1xuXG4gIHJvdXRlclByb3ZpZGVyLiRpbmplY3QgPSBbJyRzdGF0ZVByb3ZpZGVyJywgJyR1cmxSb3V0ZXJQcm92aWRlcicsICckbG9jYXRpb25Qcm92aWRlciddO1xuXG4gIGZ1bmN0aW9uIHJvdXRlclByb3ZpZGVyKCRzdGF0ZVByb3ZpZGVyLCAkdXJsUm91dGVyUHJvdmlkZXIsICRsb2NhdGlvblByb3ZpZGVyKSB7XG4gICAgLy8gJGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlKHtcbiAgICAvLyAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLy8gICByZXF1aXJlQmFzZTogZmFsc2VcbiAgICAvLyB9KTtcbiAgICAvL1xuICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAuc3RhdGUoJ2hvbWUnLCB7XG4gICAgICAgIHVybDogJy8nLFxuICAgICAgICB2aWV3czoge1xuICAgICAgICAgICdtYWluJzoge1xuICAgICAgICAgICAgY29udHJvbGxlcjogJ0hvbWVDb250cm9sbGVyJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXNzZXRzL3ZpZXdzL2hvbWUuaHRtbCdcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGF1dGhlbnRpY2F0ZTogZmFsc2VcbiAgICAgIH0pXG4gICAgICAuc3RhdGUoJ29yZGVycycsIHtcbiAgICAgICAgdXJsOiAnL29yZGVycycsXG4gICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgJ21haW4nOiB7XG4gICAgICAgICAgICBjb250cm9sbGVyOiAnT3JkZXJzQ29udHJvbGxlcicsXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2Fzc2V0cy92aWV3cy9vcmRlcnMuaHRtbCdcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGF1dGhlbnRpY2F0ZTogZmFsc2VcbiAgICAgIH0pO1xuXG4gICAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZSgnLycpO1xuICB9XG5cbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ0FueURheUJ1ZGR5QWRzJylcbiAgICAuY29uZmlnKGNvbmZpZylcbiAgICAuY29uZmlnKG1hcHNQcm92aWRlcik7XG5cbiAgICBtYXBzUHJvdmlkZXIuJGluamVjdCA9IFsndWlHbWFwR29vZ2xlTWFwQXBpUHJvdmlkZXInXTtcblxuICAgIGZ1bmN0aW9uIG1hcHNQcm92aWRlcih1aUdtYXBHb29nbGVNYXBBcGlQcm92aWRlcikge1xuICAgICAgdWlHbWFwR29vZ2xlTWFwQXBpUHJvdmlkZXIuY29uZmlndXJlKHtcbiAgICAgICAga2V5OiAnQUl6YVN5QW9uRnVDRGI3SGpYVXowdW9jS2JFR1VKejkxSUw5RVZzJywgLy9hZGItc2l0ZS0wIGtleVxuICAgICAgICAvLyBrZXk6ICdBSXphU3lBbFc2aHVuN1Z3cEZQdjBmeF9LT1VoNTJsMDhCUnBqWU0nLFxuICAgICAgICBsaWJyYXJpZXM6ICdwbGFjZXMnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgY29uZmlnLiRpbmplY3QgPSBbJyRtZFRoZW1pbmdQcm92aWRlcicsICckbG9jYXRpb25Qcm92aWRlciddO1xuXG4gIGZ1bmN0aW9uIGNvbmZpZygkbWRUaGVtaW5nUHJvdmlkZXIsICRsb2NhdGlvblByb3ZpZGVyKSB7XG5cbiAgICAkbWRUaGVtaW5nUHJvdmlkZXIuZGVmaW5lUGFsZXR0ZSgncHJpbWFyeScsIHtcbiAgICAgICc1MCc6ICcjOWRjZWRhJyxcbiAgICAgICcxMDAnOiAnIzY1YjJjNScsXG4gICAgICAnMjAwJzogJyM0MjlhYjAnLFxuICAgICAgJzMwMCc6ICcjMmY2ZDdjJyxcbiAgICAgICc0MDAnOiAnIzI2NTk2NicsXG4gICAgICAnNTAwJzogJyMxZTQ2NTAnLFxuICAgICAgJzYwMCc6ICcjMTYzMjNhJyxcbiAgICAgICc3MDAnOiAnIzBkMWYyMycsXG4gICAgICAnODAwJzogJyMwNTBjMGQnLFxuICAgICAgJzkwMCc6ICcjMDAwMDAwJyxcbiAgICAgICdBMTAwJzogJyM5ZGNlZGEnLFxuICAgICAgJ0EyMDAnOiAnIzY1YjJjNScsXG4gICAgICAnQTQwMCc6ICcjMjY1OTY2JyxcbiAgICAgICdBNzAwJzogJyMwZDFmMjMnLFxuICAgICAgJ2NvbnRyYXN0RGVmYXVsdENvbG9yJzogJ2xpZ2h0JyxcbiAgICAgICdjb250cmFzdERhcmtDb2xvcnMnOiAnNTAgMTAwIDIwMCBBMTAwIEEyMDAnXG4gICAgfSk7XG4gICAgJG1kVGhlbWluZ1Byb3ZpZGVyLmRlZmluZVBhbGV0dGUoJ2FjY2VudCcsIHtcbiAgICAgICc1MCc6ICcjZDBlYmVkJyxcbiAgICAgICcxMDAnOiAnIzk5ZDRkOCcsXG4gICAgICAnMjAwJzogJyM3MGMzYzgnLFxuICAgICAgJzMwMCc6ICcjNDNhN2FlJyxcbiAgICAgICc0MDAnOiAnIzNhOTI5OCcsXG4gICAgICAnNTAwJzogJyMzMjdkODInLFxuICAgICAgJzYwMCc6ICcjMjk2ODZjJyxcbiAgICAgICc3MDAnOiAnIzIxNTI1NicsXG4gICAgICAnODAwJzogJyMxODNkNDAnLFxuICAgICAgJzkwMCc6ICcjMTAyODJhJyxcbiAgICAgICdBMTAwJzogJyNkMGViZWQnLFxuICAgICAgJ0EyMDAnOiAnIzk5ZDRkOCcsXG4gICAgICAnQTQwMCc6ICcjM2E5Mjk4JyxcbiAgICAgICdBNzAwJzogJyMyMTUyNTYnLFxuICAgICAgJ2NvbnRyYXN0RGVmYXVsdENvbG9yJzogJ2xpZ2h0JyxcbiAgICAgICdjb250cmFzdERhcmtDb2xvcnMnOiAnNTAgMTAwIDIwMCAzMDAgQTEwMCBBMjAwJ1xuICAgIH0pO1xuICAgICRtZFRoZW1pbmdQcm92aWRlci5kZWZpbmVQYWxldHRlKCd3YXJuJywge1xuICAgICAgJzUwJzogJyNmYWVlZTYnLFxuICAgICAgJzEwMCc6ICcjZWNjM2E3JyxcbiAgICAgICcyMDAnOiAnI2UyYTM3OScsXG4gICAgICAnMzAwJzogJyNkNTdiM2UnLFxuICAgICAgJzQwMCc6ICcjYzk2YjJiJyxcbiAgICAgICc1MDAnOiAnI2IwNWUyNicsXG4gICAgICAnNjAwJzogJyM5NzUxMjEnLFxuICAgICAgJzcwMCc6ICcjN2U0MzFiJyxcbiAgICAgICc4MDAnOiAnIzY0MzYxNicsXG4gICAgICAnOTAwJzogJyM0YjI4MTAnLFxuICAgICAgJ0ExMDAnOiAnI2ZhZWVlNicsXG4gICAgICAnQTIwMCc6ICcjZWNjM2E3JyxcbiAgICAgICdBNDAwJzogJyNjOTZiMmInLFxuICAgICAgJ0E3MDAnOiAnIzdlNDMxYicsXG4gICAgICAnY29udHJhc3REZWZhdWx0Q29sb3InOiAnbGlnaHQnLFxuICAgICAgJ2NvbnRyYXN0RGFya0NvbG9ycyc6ICc1MCAxMDAgMjAwIDMwMCBBMTAwIEEyMDAnXG4gICAgfSk7XG4gICAgJG1kVGhlbWluZ1Byb3ZpZGVyLnRoZW1lKCdkZWZhdWx0JylcbiAgICAgIC5wcmltYXJ5UGFsZXR0ZSgncHJpbWFyeScpXG4gICAgICAuYWNjZW50UGFsZXR0ZSgnYWNjZW50JylcbiAgICAgIC53YXJuUGFsZXR0ZSgnd2FybicpO1xuICB9XG59KSgpO1xuIiwiLyoqXG4gKiBAbmdkb2MgZmlsdGVyXG4gKiBAbmFtZSBleGFtcGxlRmlsdGVyXG4gKiBAZGVzY3JpcHRpb24gXG4gKiBcbiAqIEZpbHRybyBkZSBlamVtcGxvXG4gKiBcbiAqL1xuKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgnQW55RGF5QnVkZHlBZHMnKVxuICAgICAgICAuZmlsdGVyKCdmaWx0ZXInLCBleGFtcGxlKTtcblxuICAgIGZ1bmN0aW9uIGV4YW1wbGUoKSB7XG4gICAgICAgIHJldHVybiBleGFtcGxlRmlsdGVyO1xuXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy9cblxuICAgICAgICBmdW5jdGlvbiBleGFtcGxlRmlsdGVyKHBhcmFtcykge1xuICAgICAgICAgICAgcmV0dXJuIHBhcmFtcztcbiAgICAgICAgfVxuICAgIH1cblxufSkoKTsiLCIvKipcbiAqIEBuZ2RvYyBjb250cm9sbGVyXG4gKiBAbmFtZSBIb21lQ29udHJvbGxlclxuICogQHJlcXVpcmVzICRyb290U2NvcGVcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIE1hbmVqYSBlbCBjb21wb3J0YW1pZW50byBkZSBsYSB2aXN0YSBwcmluY2lwYWxcbiAqXG4gKi9cblxuKGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ0FueURheUJ1ZGR5QWRzJylcbiAgICAuY29udHJvbGxlcignSG9tZUNvbnRyb2xsZXInLCBIb21lQ29udHJvbGxlcik7XG5cbiAgSG9tZUNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHJvb3RTY29wZScsICdqUXVlcnknXTtcblxuICAvKiBAbmdJbmplY3QgKi9cbiAgZnVuY3Rpb24gSG9tZUNvbnRyb2xsZXIoJHJvb3RTY29wZSwgalF1ZXJ5KSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2bS50aXRsZSA9ICdIb21lIENvbnRyb2xsZXInO1xuICAgIHZtLnNjcm9sbFRvID0gc2Nyb2xsVG87XG4gICAgYWN0aXZhdGUoKTtcblxuICAgIC8vLy8vLy8vLy8vLy8vLy9cblxuICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge31cblxuICAgIGZ1bmN0aW9uIHNjcm9sbFRvKGVsZW1lbnQpIHtcbiAgICAgIGpRdWVyeSgnaHRtbCwgYm9keScpLmFuaW1hdGUoe1xuICAgICAgICBzY3JvbGxUb3A6IGpRdWVyeShlbGVtZW50KS5vZmZzZXQoKS50b3BcbiAgICAgIH0sIDEwMDApO1xuICAgIH1cbiAgfVxufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdBbnlEYXlCdWRkeUFkcycpXG4gICAgLmRpcmVjdGl2ZSgnYWRiT3JkZXJzQ2FtcGFpZ24nLCBkaXJlY3RpdmUpO1xuXG4gIC8qIEBuZ0luamVjdCAqL1xuICBmdW5jdGlvbiBkaXJlY3RpdmUoKSB7XG4gICAgdmFyIGRpcmVjdGl2ZSA9IHtcbiAgICAgIHJlc3RyaWN0OiAnRUEnLFxuICAgICAgdGVtcGxhdGVVcmw6ICdhc3NldHMvdmlld3Mvb3JkZXJzL29yZGVycy5jYW1wYWlnbi5odG1sJyxcbiAgICAgIHNjb3BlOiB7XG4gICAgICAgIG9wdGlvbnM6ICc9JyxcbiAgICAgICAgZm9ybTogJz0nLFxuICAgICAgICB0b3RhbDogJz0nXG4gICAgICB9LFxuICAgICAgbGluazogbGlua0Z1bmMsXG4gICAgICBjb250cm9sbGVyOiBDb250cm9sbGVyLFxuICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuICAgIH07XG5cbiAgICByZXR1cm4gZGlyZWN0aXZlO1xuXG4gICAgZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG5cbiAgICB9XG4gIH1cblxuICBDb250cm9sbGVyLiRpbmplY3QgPSBbJyRodHRwJywgJyRxJ107XG5cbiAgLyogQG5nSW5qZWN0ICovXG4gIGZ1bmN0aW9uIENvbnRyb2xsZXIoJGh0dHAsICRxKSB7XG4gICAgdmFyIHZtID0gdGhpcztcblxuICAgIGFjdGl2YXRlKCk7XG5cbiAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcblxuICAgIH1cbiAgfVxufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdBbnlEYXlCdWRkeUFkcycpXG4gICAgLmRpcmVjdGl2ZSgnYWRiT3JkZXJzQ2hlY2tvdXQnLCBkaXJlY3RpdmUpO1xuXG4gIC8qIEBuZ0luamVjdCAqL1xuICBmdW5jdGlvbiBkaXJlY3RpdmUoKSB7XG4gICAgdmFyIGRpcmVjdGl2ZSA9IHtcbiAgICAgIHJlc3RyaWN0OiAnRUEnLFxuICAgICAgdGVtcGxhdGVVcmw6ICdhc3NldHMvdmlld3Mvb3JkZXJzL29yZGVycy5jaGVja291dC5odG1sJyxcbiAgICAgIHNjb3BlOiB7XG4gICAgICAgIG9wdGlvbnM6ICc9JyxcbiAgICAgICAgZm9ybTogJz0nLFxuICAgICAgICB0b3RhbDogJz0nXG4gICAgICB9LFxuICAgICAgbGluazogbGlua0Z1bmMsXG4gICAgICBjb250cm9sbGVyOiBDb250cm9sbGVyLFxuICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuICAgIH07XG5cbiAgICByZXR1cm4gZGlyZWN0aXZlO1xuXG4gICAgZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG5cbiAgICB9XG4gIH1cblxuICBDb250cm9sbGVyLiRpbmplY3QgPSBbJ18nLCAnYnJhaW50cmVlJywgJyRzY29wZScsJyRodHRwJywgJyRxJywgJ0RhdGFTZXJ2aWNlJ107XG5cbiAgLyogQG5nSW5qZWN0ICovXG4gIGZ1bmN0aW9uIENvbnRyb2xsZXIoXywgYnJhaW50cmVlLCAkc2NvcGUsICRodHRwLCAkcSwgRGF0YVNlcnZpY2UpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZtLmNoZWNrb3V0ID0ge307XG5cbiAgICBhY3RpdmF0ZSgpO1xuXG4gICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XG4gICAgICBEYXRhU2VydmljZS5nZXRDbGllbnRUb2tlbigpLnRoZW4oZnVuY3Rpb24ocmVzKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKHJlcyk7XG4gICAgICAgIHNldHVwR2F0ZXdheShyZXMuY2xpZW50VG9rZW4pO1xuICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICB9KVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldHVwR2F0ZXdheSh0b2tlbikge1xuICAgICAgYnJhaW50cmVlLnNldHVwKHRva2VuLCAnY3VzdG9tJywge1xuICAgICAgICBwYXlwYWw6IHtcbiAgICAgICAgICBjb250YWluZXI6ICdwYXlwYWwtY29udGFpbmVyJyxcbiAgICAgICAgICBzaW5nbGVVc2U6IHRydWUsXG4gICAgICAgICAgYW1vdW50OiAxMC4wMCxcbiAgICAgICAgICBjdXJyZW5jeTogJ1VTRCcsXG4gICAgICAgICAgbG9jYWxlOiAnZW5fdXMnLFxuICAgICAgICAgIGVuYWJsZVNoaXBwaW5nQWRkcmVzczogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBvblBheW1lbnRNZXRob2RSZWNlaXZlZDogZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgICAgZG9Tb21ldGhpbmdXaXRoVGhlTm9uY2Uob2JqLm5vbmNlKTtcbiAgICAgICAgfSxcbiAgICAgICAgb25SZWFkeTogZnVuY3Rpb24oaW50ZWdyYXRpb24pIHtcbiAgICAgICAgICB2bS5jaGVja291dCA9IGludGVncmF0aW9uO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkb1NvbWV0aGluZ1dpdGhUaGVOb25jZShyZXMpIHtcbiAgICAgIGNvbnNvbGUubG9nKHJlcyk7XG4gICAgfVxuXG4gICAgLy8gLy8gV2hlbiB5b3UgYXJlIHJlYWR5IHRvIHRlYXIgZG93biB5b3VyIGludGVncmF0aW9uXG4gICAgLy8gY2hlY2tvdXQudGVhcmRvd24oZnVuY3Rpb24oKSB7XG4gICAgLy8gICBjaGVja291dCA9IG51bGw7XG4gICAgLy8gICAvLyBicmFpbnRyZWUuc2V0dXAgY2FuIHNhZmVseSBiZSBydW4gYWdhaW4hXG4gICAgLy8gfSk7XG5cbiAgICAkc2NvcGUuJHdhdGNoKCd2bS5jaGVja291dCcsIGZ1bmN0aW9uKGMsIG8pIHtcbiAgICAgIGlmICghYykgcmV0dXJuO1xuXG4gICAgICBjb25zb2xlLmxvZyhjKTtcbiAgICB9KTtcbiAgfVxufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdBbnlEYXlCdWRkeUFkcycpXG4gICAgLmRpcmVjdGl2ZSgnYWRiT3JkZXJzQ3VzdG9tZXInLCBkaXJlY3RpdmUpO1xuXG4gIC8qIEBuZ0luamVjdCAqL1xuICBmdW5jdGlvbiBkaXJlY3RpdmUoKSB7XG4gICAgdmFyIGRpcmVjdGl2ZSA9IHtcbiAgICAgIHJlc3RyaWN0OiAnRUEnLFxuICAgICAgdGVtcGxhdGVVcmw6ICdhc3NldHMvdmlld3Mvb3JkZXJzL29yZGVycy5jdXN0b21lci5odG1sJyxcbiAgICAgIHNjb3BlOiB7XG4gICAgICAgIG9wdGlvbnM6ICc9JyxcbiAgICAgICAgZm9ybTogJz0nLFxuICAgICAgICB0b3RhbDogJz0nXG4gICAgICB9LFxuICAgICAgbGluazogbGlua0Z1bmMsXG4gICAgICBjb250cm9sbGVyOiBDb250cm9sbGVyLFxuICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuICAgIH07XG5cbiAgICByZXR1cm4gZGlyZWN0aXZlO1xuXG4gICAgZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG5cbiAgICB9XG4gIH1cblxuICBDb250cm9sbGVyLiRpbmplY3QgPSBbJyRodHRwJywgJyRxJ107XG5cbiAgLyogQG5nSW5qZWN0ICovXG4gIGZ1bmN0aW9uIENvbnRyb2xsZXIoJGh0dHAsICRxKSB7XG4gICAgdmFyIHZtID0gdGhpcztcblxuICAgIGFjdGl2YXRlKCk7XG5cbiAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcblxuICAgIH1cbiAgfVxufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdBbnlEYXlCdWRkeUFkcycpXG4gICAgLmNvbnRyb2xsZXIoJ09yZGVyc0NvbnRyb2xsZXInLCBDb250cm9sbGVyKTtcblxuICBDb250cm9sbGVyLiRpbmplY3QgPSBbJ18nLCAnJHNjb3BlJywgJyRtZERpYWxvZycsICdEYXRhU2VydmljZSddO1xuXG4gIGZ1bmN0aW9uIENvbnRyb2xsZXIoXywgJHNjb3BlLCAkbWREaWFsb2csIERhdGFTZXJ2aWNlKSB7XG4gICAgdmFyIHZtID0gdGhpcztcblxuICAgIHZtLm9wZW5JbWFnZSA9IG9wZW5JbWFnZTtcbiAgICB2bS5hZGQgPSBhZGQ7XG4gICAgdm0udG90YWwgPSAwO1xuXG4gICAgdm0ub3B0aW9ucyA9IHtcbiAgICAgIHRhcmdldDoge1xuICAgICAgICBkaXNwbGF5OiBbXSxcbiAgICAgICAgbWVkaWE6IFtdLFxuICAgICAgICBpbXByZXNzaW9uc1VuaXRzOiBbXSxcbiAgICAgICAgaW1wcmVzc2lvbnNUaW1lOiBbXSxcbiAgICAgICAgZGlzdGFuY2U6IFtdLFxuICAgICAgICBhZ2U6IFtdLFxuICAgICAgICBnZW5kZXI6IFtdXG4gICAgICB9XG4gICAgfTtcblxuICAgIHZtLmZvcm0gPSB7XG4gICAgICBtZWRpYToge30sXG4gICAgICBvcHRpb25zOiB7XG4gICAgICAgIGRpc3BsYXk6IHt9LFxuICAgICAgICBpbXByZXNzaW9uczoge30sXG4gICAgICAgIGRpc3RhbmNlOiB7fSxcbiAgICAgICAgYWdlOiB7fSxcbiAgICAgICAgZ2VuZGVyOiB7fVxuICAgICAgfVxuICAgIH1cblxuICAgIGFjdGl2YXRlKCk7XG5cbiAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcbiAgICAgIERhdGFTZXJ2aWNlLmdldE9wdGlvbnMoKS50aGVuKGZ1bmN0aW9uKHJlc3ApIHtcbiAgICAgICAgY29uc29sZS5sb2cocmVzcCk7XG4gICAgICAgIHZtLm9wdGlvbnMudGFyZ2V0ID0gZG9fbWVyZ2UocmVzcCk7XG4gICAgICAgIGNvbnNvbGUubG9nKHZtLmZvcm0pO1xuICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICB9KVxuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gZG9fbWVyZ2Uocm9sZXMpIHtcblxuICAgICAgLy8gQ3VzdG9tIG1lcmdlIGZ1bmN0aW9uIE9ScyB0b2dldGhlciBub24tb2JqZWN0IHZhbHVlcywgcmVjdXJzaXZlbHlcbiAgICAgIC8vIGNhbGxzIGl0c2VsZiBvbiBPYmplY3RzLlxuICAgICAgdmFyIG1lcmdlciA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgaWYgKF8uaXNPYmplY3QoYSkpIHtcbiAgICAgICAgICByZXR1cm4gXy5tZXJnZSh7fSwgYSwgYiwgbWVyZ2VyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gYSB8fCBiO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICAvLyBBbGxvdyByb2xlcyB0byBiZSBwYXNzZWQgdG8gXy5tZXJnZSBhcyBhbiBhcnJheSBvZiBhcmJpdHJhcnkgbGVuZ3RoXG4gICAgICB2YXIgYXJncyA9IF8uZmxhdHRlbihbe30sIHJvbGVzLCBtZXJnZXJdKTtcbiAgICAgIHJldHVybiBfLm1lcmdlLmFwcGx5KF8sIGFyZ3MpO1xuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gb3BlbkltYWdlKCRldmVudCwgaW1hZ2UpIHtcbiAgICAgICRtZERpYWxvZy5zaG93KHtcbiAgICAgICAgZnVsbHNjcmVlbjogdHJ1ZSxcbiAgICAgICAgdGFyZ2V0RXZlbnQ6ICRldmVudCxcbiAgICAgICAgY2xpY2tPdXRzaWRlVG9DbG9zZTogdHJ1ZSxcbiAgICAgICAgdGVtcGxhdGVVcmw6ICdhcHAvc2hhcmVkL2xheW91dC9pbWFnZU1vZGFsLmh0bWwnLFxuICAgICAgICBsb2NhbHM6IHtcbiAgICAgICAgICBpbWFnZTogaW1hZ2VcbiAgICAgICAgfSxcbiAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnaW1hZ2UnLCBmdW5jdGlvbihzY29wZSwgaW1hZ2UpIHtcbiAgICAgICAgICBzY29wZS5pbWFnZSA9IGltYWdlO1xuICAgICAgICB9XVxuICAgICAgfSk7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBhZGQoKSB7XG4gICAgICAkbWREaWFsb2cuc2hvdyh7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAnYXBwL2NvbXBvbmVudHMvYWQvYWR2ZXJ0aXNlbWVudE1vZGFsLmh0bWwnLFxuICAgICAgICBjbGlja091dHNpZGVUb0Nsb3NlOiB0cnVlLFxuICAgICAgICBmdWxsc2NyZWVuOiB0cnVlXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAkc2NvcGUuJHdhdGNoKCd2bS5mb3JtJywgZnVuY3Rpb24oYywgbykge1xuICAgICAgY29uc29sZS5sb2coYyk7XG5cbiAgICAgIHZtLnRvdGFsID0gYy5tZWRpYS5oYXNPd25Qcm9wZXJ0eSgnZmVlJyk/Yy5tZWRpYS5mZWU6MDtcblxuICAgICAgXy5tYXAoYy5vcHRpb25zLCBmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgIGlmIChpdGVtLmhhc093blByb3BlcnR5KCdmZWUnKSl7XG4gICAgICAgICAgICB2bS50b3RhbCArPSAgdm0udG90YWwgKiBpdGVtLmZlZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpdGVtLmhhc093blByb3BlcnR5KCdkaXNjb3VudCcpKXtcbiAgICAgICAgICAgIHZtLnRvdGFsIC09IHZtLnRvdGFsICogaXRlbS5kaXNjb3VudDtcbiAgICAgICAgfVxuXG4gICAgICB9KVxuICAgIH0sIHRydWUpXG5cbiAgfVxufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdBbnlEYXlCdWRkeUFkcycpXG4gICAgLmRpcmVjdGl2ZSgnYWRiRGlzcGxheUNob29zZXInLCBkaXJlY3RpdmUpO1xuXG4gIC8qIEBuZ0luamVjdCAqL1xuICBmdW5jdGlvbiBkaXJlY3RpdmUoKSB7XG4gICAgdmFyIGRpcmVjdGl2ZSA9IHtcbiAgICAgIHJlc3RyaWN0OiAnRUEnLFxuICAgICAgdGVtcGxhdGVVcmw6ICdhc3NldHMvdmlld3Mvb3JkZXJzL29yZGVycy5kaXNwbGF5Lmh0bWwnLFxuICAgICAgc2NvcGU6IHtcbiAgICAgICAgb3B0aW9uczogJz0nLFxuICAgICAgICBmb3JtOiAnPScsXG4gICAgICAgIHRvdGFsOiAnPSdcbiAgICAgIH0sXG4gICAgICBsaW5rOiBsaW5rRnVuYyxcbiAgICAgIGNvbnRyb2xsZXI6IENvbnRyb2xsZXIsXG4gICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICBiaW5kVG9Db250cm9sbGVyOiB0cnVlXG4gICAgfTtcblxuICAgIHJldHVybiBkaXJlY3RpdmU7XG5cbiAgICBmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcblxuICAgIH1cbiAgfVxuXG4gIENvbnRyb2xsZXIuJGluamVjdCA9IFsndWlHbWFwR29vZ2xlTWFwQXBpJywgJ3VpR21hcElzUmVhZHknLCAnJHEnLCAnJHNjb3BlJywgJyR0aW1lb3V0JywgJ0Ryb3B6b25lU2VydmljZSddO1xuXG4gIC8qIEBuZ0luamVjdCAqL1xuICBmdW5jdGlvbiBDb250cm9sbGVyKHVpR21hcEdvb2dsZU1hcEFwaSwgdWlHbWFwSXNSZWFkeSwgJHEsICRzY29wZSwgJHRpbWVvdXQsIERyb3B6b25lU2VydmljZSkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdmFyIFBsYWNlcyA9IG51bGw7XG4gICAgdmFyIERpcmVjdGlvblJlbmRlcmVyID0gbnVsbDtcbiAgICB2YXIgRGlyZWN0aW9uc1NlcnZpY2UgPSBudWxsO1xuICAgIHZhciBQbGFjZXNBdXRvY29tcGxldGUgPSBudWxsO1xuXG4gICAgdm0uY29udHJvbCA9IHtcbiAgICAgIHVwbG9hZGluZzogZmFsc2VcbiAgICB9XG4gICAgdm0ubWFwID0ge1xuICAgICAgY2VudGVyOiB7XG4gICAgICAgIGxhdGl0dWRlOiA0NS41MDE3NDUwMjgxNjY2NyxcbiAgICAgICAgbG9uZ2l0dWRlOiAtNzMuNTcwMzg4MTgyOTk3N1xuICAgICAgfSxcbiAgICAgIHpvb206IDE0LFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICBzY3JvbGx3aGVlbDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIG1hcE1hcmtlcjogdHJ1ZSxcbiAgICAgIGRpc2FibGVEZWZhdWx0VUk6IHRydWUsXG4gICAgICBjb250cm9sOiB7fSxcbiAgICAgIGV2ZW50czoge1xuICAgICAgICBjbGljazogY2xpY2tNYXAsXG4gICAgICAgIGlkbGU6IGJvdW5kc0NoYW5nZWRcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdm0uaW5mbyA9IHtcbiAgICAgIG5hbWU6ICdWZW51ZSBuYW1lJyxcbiAgICAgIGFkZHJlc3M6ICcnLFxuICAgICAgaWNvbjogJycsXG4gICAgfVxuXG4gICAgdm0ubWFya2VyID0ge1xuICAgICAgaWQ6IDAsXG4gICAgICBsb2NhdGlvbjoge1xuICAgICAgICBsYXRpdHVkZTogNDUuNTAxNzQ1MDI4MTY2NjcsXG4gICAgICAgIGxvbmdpdHVkZTogLTczLjU3MDM4ODE4Mjk5NzdcbiAgICAgIH0sXG4gICAgICBzaG93OiBmYWxzZSxcbiAgICB9XG5cbiAgICB2bS5kcm9wem9uZSA9IERyb3B6b25lU2VydmljZS5jcmVhdGUoZnVuY3Rpb24oZmlsZSwgcmVzcG9uc2UpIHtcbiAgICAgICRzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlLnNlY3VyZV91cmwpO1xuICAgICAgICB2bS5jb250cm9sLnVwbG9hZGluZyA9IGZhbHNlO1xuICAgICAgfSk7XG4gICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAkc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICB2bS5jb250cm9sLnVwbG9hZGluZyA9IHRydWU7XG4gICAgICB9KTtcbiAgICB9KVxuXG4gICAgYWN0aXZhdGUoKTtcblxuICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xuXG4gICAgICAkcS5hbGwoW3VpR21hcEdvb2dsZU1hcEFwaSwgdWlHbWFwSXNSZWFkeS5wcm9taXNlKDEpXSkudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICB2YXIgbWFwID0gcmVzcG9uc2VbMF07XG4gICAgICAgIHZhciBpbnN0YW5jZSA9IHJlc3BvbnNlWzFdWzBdLm1hcDtcblxuICAgICAgICB2bS53aW5kb3cgPSB7XG4gICAgICAgICAgcGl4ZWxPZmZzZXQ6IG5ldyBtYXAuU2l6ZSgwLCAtNDApLFxuICAgICAgICAgIGNsb3NlQ2xpY2s6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdm0ubWFya2VyLnNob3cgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgUGxhY2VzQXV0b2NvbXBsZXRlID0gbmV3IG1hcC5wbGFjZXMuQXV0b2NvbXBsZXRlU2VydmljZSgpO1xuICAgICAgICBEaXJlY3Rpb25zU2VydmljZSA9IG5ldyBtYXAuRGlyZWN0aW9uc1NlcnZpY2UoKTtcbiAgICAgICAgRGlyZWN0aW9uUmVuZGVyZXIgPSBuZXcgbWFwLkRpcmVjdGlvbnNSZW5kZXJlcigpO1xuICAgICAgICB2bS5tYXAuaW5zdGFuY2UgPSBpbnN0YW5jZTtcbiAgICAgICAgRGlyZWN0aW9uUmVuZGVyZXIuc2V0TWFwKHZtLm1hcC5pbnN0YW5jZSk7XG4gICAgICAgIFBsYWNlcyA9IG5ldyBtYXAucGxhY2VzLlBsYWNlc1NlcnZpY2Uodm0ubWFwLmluc3RhbmNlKTtcbiAgICAgICAgdm0ucGxhY2VzUmVhZHkgPSB0cnVlO1xuICAgICAgICBjb25zb2xlLmxvZygncmVhZHknKTtcbiAgICAgICAgLy9nZXRMb2NhdGlvbigpO1xuXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB2bS5jbGlja01hcmtlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgY29uc29sZS5sb2coJ2NsaWNrJyk7XG4gICAgICB2bS5tYXJrZXIuc2hvdyA9ICF2bS5tYXJrZXIuc2hvdztcbiAgICAgICRzY29wZS4kYXBwbHkoKTtcblxuICAgIH1cblxuICAgIHZtLmF1dG9jb21wbGV0ZUFkZHJlc3MgPSBmdW5jdGlvbihhZGRyZXNzKSB7XG4gICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuXG4gICAgICBQbGFjZXNBdXRvY29tcGxldGUuZ2V0UXVlcnlQcmVkaWN0aW9ucyh7XG4gICAgICAgIGlucHV0OiBhZGRyZXNzXG4gICAgICB9LCBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgIGRlZmVycmVkLnJlc29sdmUoZGF0YSA/IF8uZmlsdGVyKGRhdGEsICdwbGFjZV9pZCcpIDogW10pO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgIH07XG5cbiAgICB2bS5nZXRQbGFjZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgY29uc29sZS5sb2codm0uaW5mby5wbGFjZSk7XG5cbiAgICAgIGlmICghdm0uaW5mby5wbGFjZSkgcmV0dXJuO1xuXG4gICAgICBQbGFjZXMuZ2V0RGV0YWlscyh7XG4gICAgICAgIHBsYWNlSWQ6IHZtLmluZm8ucGxhY2UucGxhY2VfaWRcbiAgICAgIH0sIGZ1bmN0aW9uKHBsYWNlLCBzdGF0dXMpIHtcbiAgICAgICAgY29uc29sZS5sb2cocGxhY2UsIHN0YXR1cyk7XG5cbiAgICAgICAgdm0ubWFya2VyID0ge1xuICAgICAgICAgIGlkOiBEYXRlLm5vdygpLFxuICAgICAgICAgIG5hbWU6IHBsYWNlLm5hbWUsXG4gICAgICAgICAgbG9jYXRpb246IHtcbiAgICAgICAgICAgIGxhdGl0dWRlOiBwYXJzZUZsb2F0KHBsYWNlLmdlb21ldHJ5LmxvY2F0aW9uLmxhdCgpKSxcbiAgICAgICAgICAgIGxvbmdpdHVkZTogcGFyc2VGbG9hdChwbGFjZS5nZW9tZXRyeS5sb2NhdGlvbi5sbmcoKSksXG4gICAgICAgICAgfSxcbiAgICAgICAgICBzaG93OiB0cnVlXG4gICAgICAgIH07XG5cblxuICAgICAgICBjZW50ZXJNYXAodm0ubWFwLmluc3RhbmNlLCB2bS5tYXJrZXIubG9jYXRpb24sIG51bGwsIHRydWUpO1xuICAgICAgICAkc2NvcGUuJGFwcGx5KCk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gY2VudGVyTWFwKG1hcCwgbG9jYXRpb24sIG9mZnNldCwgc2Nyb2xsKSB7XG4gICAgICBjb25zb2xlLmxvZyhsb2NhdGlvbik7XG4gICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgbWFwLnBhblRvKG5ldyBnb29nbGUubWFwcy5MYXRMbmcobG9jYXRpb24ubGF0aXR1ZGUsIGxvY2F0aW9uLmxvbmdpdHVkZSkpO1xuICAgICAgICBpZiAob2Zmc2V0KSBtYXAucGFuQnkoMCwgLTIwMCk7XG4gICAgICB9LCAxMDApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsaWNrTWFwKG1hcCwgZXZlbnROYW1lLCBvcmlnaW5hbEV2ZW50QXJncykge1xuICAgICAgdmFyIGUgPSBvcmlnaW5hbEV2ZW50QXJnc1swXTtcbiAgICAgIHZhciBsYXQgPSBlLmxhdExuZy5sYXQoKSxcbiAgICAgICAgbG9uID0gZS5sYXRMbmcubG5nKCk7XG4gICAgICB2bS5tYXJrZXIgPSB7XG4gICAgICAgIGlkOiBEYXRlLm5vdygpLFxuICAgICAgICBsb2NhdGlvbjoge1xuICAgICAgICAgIGxhdGl0dWRlOiBsYXQsXG4gICAgICAgICAgbG9uZ2l0dWRlOiBsb25cbiAgICAgICAgfSxcbiAgICAgICAgc2hvdzogZmFsc2VcbiAgICAgIH07XG4gICAgICAkc2NvcGUuJGFwcGx5KCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYm91bmRzQ2hhbmdlZCgpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdib3VuZHMgY2hhbmdlZCcpO1xuICAgICAgaWYgKCF2bS5tYXAuaW5zdGFuY2UpIHJldHVybjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRMb2NhdGlvbigpIHtcbiAgICAgIGlmICh2bS5kYXRhLmxvY2F0aW9uKSB7XG4gICAgICAgIHZtLmxvY2F0aW9uID0ge1xuICAgICAgICAgIGxhdDogcGFyc2VGbG9hdCh2bS5kYXRhLmxvY2F0aW9uWzBdKSxcbiAgICAgICAgICBsbmc6IHBhcnNlRmxvYXQodm0uZGF0YS5sb2NhdGlvblsxXSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvL1xuICAgICAgLy8gVXRpbFNlcnZpY2UuZ2V0TG9jYXRpb24oKVxuICAgICAgLy8gICAudGhlbihmdW5jdGlvbihsb2NhdGlvbikge1xuICAgICAgLy8gICAgIHZtLmxvY2F0aW9uID0gbG9jYXRpb247XG4gICAgICAvLyAgICAgLy9jZW50ZXJNYXAodm0ubWFwLmluc3RhbmNlLCB2bS5sb2NhdGlvbik7XG4gICAgICAvLyAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikge1xuICAgICAgLy8gICAgIGlmICgkcm9vdFNjb3BlLnVzZXIuYWRkcmVzc1BsYWNlKVxuICAgICAgLy8gICAgICAgZ2V0UGxhY2UoJHJvb3RTY29wZS51c2VyLmFkZHJlc3NQbGFjZS5wbGFjZV9pZCk7XG4gICAgICAvL1xuICAgICAgLy8gICB9KS5maW5hbGx5KGZ1bmN0aW9uKCkge1xuICAgICAgLy8gICAgIC8vdm0ubWFwVmlzaWJsZSA9IHRydWU7XG4gICAgICAvLyAgICAgLy92bS5hY3Rpdml0aWVzLnB1c2gobG9jYXRpb25NYXJrZXIoKSk7XG4gICAgICAvLyAgICAgY29uc29sZS5sb2coJ2xvY2F0aW9uJyk7XG4gICAgICAvLyAgIH0pO1xuXG4gICAgfVxuICB9XG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ0FueURheUJ1ZGR5QWRzJylcbiAgICAuc2VydmljZSgnRGF0YVNlcnZpY2UnLCBkYXRhU2VydmljZSk7XG5cbiAgZGF0YVNlcnZpY2UuJGluamVjdCA9IFsnJGh0dHAnLCAnJHEnLCAnYmFzZUFwaSddO1xuXG4gIC8qIEBuZ0luamVjdCAqL1xuICBmdW5jdGlvbiBkYXRhU2VydmljZSgkaHR0cCwgJHEsIGJhc2VBcGkpIHtcbiAgICB2YXIgZGF0YVNlcnZpY2UgPSB7XG4gICAgICBnZXRPcHRpb25zOiBnZXRPcHRpb25zLFxuICAgICAgZ2V0Q2xpZW50VG9rZW4gOiBnZXRDbGllbnRUb2tlblxuICAgIH1cblxuICAgIHJldHVybiBkYXRhU2VydmljZTtcblxuICAgIGZ1bmN0aW9uIGdldE9wdGlvbnMoKSB7XG4gICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuXG4gICAgICAkaHR0cCh7XG4gICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgIHVybDogYmFzZUFwaSArICcvY2FtcGFpZ24vb3B0aW9ucy8nXG4gICAgICB9KS5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XG4gICAgICAgIGRlZmVycmVkLnJlc29sdmUoZGF0YSk7XG4gICAgICB9KS5lcnJvcihmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGRlZmVycmVkLnJlamVjdChlcnIpO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldENsaWVudFRva2VuKCkge1xuICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcblxuICAgICAgJGh0dHAoe1xuICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICB1cmw6IGJhc2VBcGkgKyAnL2NvbW1lcmNlL2NsaWVudFRva2VuLydcbiAgICAgIH0pLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcbiAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShkYXRhKTtcbiAgICAgIH0pLmVycm9yKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgZGVmZXJyZWQucmVqZWN0KGVycik7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgfVxuXG5cbiAgfVxufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdBbnlEYXlCdWRkeUFkcycpXG4gICAgLnNlcnZpY2UoJ0Ryb3B6b25lU2VydmljZScsIERyb3B6b25lU2VydmljZSk7XG5cblxuICBmdW5jdGlvbiBEcm9wem9uZVNlcnZpY2UoKSB7XG4gICAgdmFyIHNlcnZpY2UgPSB7XG4gICAgICBjcmVhdGU6IGNyZWF0ZSxcbiAgICAgIGNyZWF0ZU11bHRpcGxlOiBjcmVhdGVNdWx0aXBsZVxuICAgIH07XG5cbiAgICByZXR1cm4gc2VydmljZTtcblxuICAgIGZ1bmN0aW9uIGNyZWF0ZShzdWNjZXNzLCBzZW5kaW5nLCByZW1vdmVkZmlsZSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIHVybDogJ2h0dHBzOi8vYXBpLmNsb3VkaW5hcnkuY29tL3YxXzEvY2xvdWQ5L2ltYWdlL3VwbG9hZCcsXG4gICAgICAgICAgdXBsb2FkTXVsdGlwbGU6IGZhbHNlLFxuICAgICAgICAgIG1heEZpbGVzOiAxLFxuICAgICAgICAgIGFjY2VwdGVkRmlsZXM6ICdpbWFnZS8qJyxcbiAgICAgICAgICBkaWN0RGVmYXVsdE1lc3NhZ2U6ICdEcm9wIGZpbGUgb3IgY2xpY2sgaGVyZSB0byB1cGxvYWQnLFxuICAgICAgICAgIGFkZFJlbW92ZUxpbmtzOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIGV2ZW50SGFuZGxlcnM6IHtcbiAgICAgICAgICBzZW5kaW5nOiBmdW5jdGlvbihmaWxlLCB4aHIsIGZvcm1EYXRhKSB7XG4gICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ2FwaV9rZXknLCA4Mzk5ODgzMzMxNTM1NjcpO1xuICAgICAgICAgICAgZm9ybURhdGEuYXBwZW5kKCd0aW1lc3RhbXAnLCBEYXRlLm5vdygpIC8gMTAwMCB8IDApO1xuICAgICAgICAgICAgZm9ybURhdGEuYXBwZW5kKCd1cGxvYWRfcHJlc2V0JywgJ3NtMmV2NG51Jyk7XG4gICAgICAgICAgICBpZiAoc2VuZGluZykgc2VuZGluZygpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc3VjY2Vzczogc3VjY2VzcyxcbiAgICAgICAgICByZW1vdmVkZmlsZTogcmVtb3ZlZGZpbGVcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVNdWx0aXBsZShtYXhGaWxlcywgc3VjY2Vzcywgc2VuZGluZykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIHVybDogJ2h0dHBzOi8vYXBpLmNsb3VkaW5hcnkuY29tL3YxXzEvY2xvdWQ5L2ltYWdlL3VwbG9hZCcsXG4gICAgICAgICAgbWF4RmlsZXM6IG1heEZpbGVzLFxuICAgICAgICAgIGFjY2VwdGVkRmlsZXM6ICdpbWFnZS8qJyxcbiAgICAgICAgICBkaWN0RGVmYXVsdE1lc3NhZ2U6ICdEcm9wIGZpbGVzIG9yIGNsaWNrIGhlcmUgdG8gdXBsb2FkJ1xuICAgICAgICB9LFxuICAgICAgICBldmVudEhhbmRsZXJzOiB7XG4gICAgICAgICAgc2VuZGluZzogZnVuY3Rpb24oZmlsZSwgeGhyLCBmb3JtRGF0YSkge1xuICAgICAgICAgICAgZm9ybURhdGEuYXBwZW5kKCdhcGlfa2V5JywgODM5OTg4MzMzMTUzNTY3KTtcbiAgICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZCgndGltZXN0YW1wJywgRGF0ZS5ub3coKSAvIDEwMDAgfCAwKTtcbiAgICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZCgndXBsb2FkX3ByZXNldCcsICdzbTJldjRudScpO1xuICAgICAgICAgICAgaWYgKHNlbmRpbmcpIHNlbmRpbmcoKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHN1Y2Nlc3M6IHN1Y2Nlc3NcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH1cblxufSkoKTtcbiIsIi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lIHVzZXJzZXJ2aWNlXG4gKiBAcmVxdWlyZXMgJGh0dHAsICRxXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBFc3RlIHNlcnZpY2lvIGVzIHVzYWRvIHBhcmEgbWFuZWphciBsYXMgc2VzaW9uZXMgZGUgdXN1YXJpby5cbiAqXG4gKi9cblxuKGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ0FueURheUJ1ZGR5QWRzJylcbiAgICAuZmFjdG9yeSgndXNlclNlcnZpY2UnLCB1c2VyU2VydmljZSk7XG5cbiAgdXNlclNlcnZpY2UuJGluamVjdCA9IFsnQVBJX1VSTCcsICckaHR0cCcsICckcSddO1xuXG4gIC8qIEBuZ0luamVjdCAqL1xuICBmdW5jdGlvbiB1c2VyU2VydmljZShBUElfVVJMLCAkaHR0cCwgJHEpIHtcbiAgICB2YXIgc2VydmljZSA9IHtcbiAgICAgIGlzTG9nZ2VkSW46IGlzTG9nZ2VkSW4sXG4gICAgICBsb2dpbjogbG9naW5cbiAgICB9O1xuICAgIHJldHVybiBzZXJ2aWNlO1xuXG4gICAgLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgLyoqXG4gICAgICogVmVyaWZpY2Egc2kgZWwgdXN1YXJpbyBlc3TDoSBhdXRlbnRpY2Fkby5cbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSBUcnVlIEN1YW5kbyBoYXkgdW4gdXN1YXJpbyBhdXRlbnRpY2Fkby5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0xvZ2dlZEluKCkge1xuICAgICAgdmFyIHVzZXIgPSAkcm9vdFNjb3BlLmN1cnJlbnRVc2VyO1xuICAgICAgcmV0dXJuICEhdXNlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBWYWxpZGEgbGFzIGNyZWRlbmNpYWxlcyBkZWwgdXN1YXJpbyBjb24gZWwgc2Vydmlkb3IuXG4gICAgICogQHBhcmFtICB7T2JqZWN0fSAgcGFyYW1zIENyZWRlbmNpYWxlcy5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAgICAgICAgUHJvbWVzYSBkZSBsYSBzb2xpY2l0dWQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbG9naW4ocGFyYW1zKSB7XG4gICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuXG4gICAgICAkaHR0cCh7XG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICB1cmw6IEFQSV9VUkwgKyAnbG9naW4nLFxuICAgICAgICBkYXRhOiBwYXJhbXNcbiAgICAgIH0pLnN1Y2Nlc3MoZnVuY3Rpb24ocmVzcCkge1xuICAgICAgICAkcm9vdFNjb3BlLmN1cnJlbnRVc2VyID0gcmVzcC51c2VyO1xuICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHJlc3ApO1xuICAgICAgfSkuZXJyb3IoZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgIGRlZmVycmVkLnJlamVjdChlcnIpO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgIH1cblxuICB9XG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ0FueURheUJ1ZGR5QWRzJylcbiAgICAuZGlyZWN0aXZlKCdkcm9wem9uZScsIGRyb3B6b25lKTtcblxuICBkcm9wem9uZS4kaW5qZWN0ID0gWydEcm9wem9uZSddO1xuXG4gIGZ1bmN0aW9uIGRyb3B6b25lKERyb3B6b25lKSB7XG4gICAgdmFyIGRpcmVjdGl2ZSA9IHtcbiAgICAgIGxpbms6IGxpbmssXG4gICAgICByZXN0cmljdDogJ0VBJyxcbiAgICAgIHNjb3BlOiB7XG4gICAgICAgIGRyb3B6b25lOiAnPWRyb3B6b25lJyxcbiAgICAgICAgcmVzZXQ6ICdAcmVzZXQnXG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gZGlyZWN0aXZlO1xuXG4gICAgZnVuY3Rpb24gbGluayhzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgIHZhciBjb25maWcsIHpvbmU7XG5cbiAgICAgIGNvbmZpZyA9IHNjb3BlLmRyb3B6b25lO1xuICAgICAgem9uZSA9IG5ldyBEcm9wem9uZShlbGVtZW50WzBdLCBjb25maWcub3B0aW9ucyk7XG5cbiAgICAgIGlmIChzY29wZS5yZXNldCkge1xuICAgICAgICB6b25lLm9uKCdjb21wbGV0ZScsIGZ1bmN0aW9uKGZpbGUpIHtcbiAgICAgICAgICB6b25lLnJlbW92ZUZpbGUoZmlsZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBhbmd1bGFyLmZvckVhY2goY29uZmlnLmV2ZW50SGFuZGxlcnMsIGZ1bmN0aW9uKGhhbmRsZXIsIGV2ZW50KSB7XG4gICAgICAgIHpvbmUub24oZXZlbnQsIGhhbmRsZXIpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdBbnlEYXlCdWRkeUFkcycpXG4gICAgICAgIC5kaXJlY3RpdmUoJ2Zvb3RlckRpcmVjdGl2ZScsIGZvb3RlckRpcmVjdGl2ZSk7XG5cbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBmb290ZXJEaXJlY3RpdmUoKSB7XG4gICAgICAgIHZhciBkaXJlY3RpdmUgPSB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0VBJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXNzZXRzL3ZpZXdzL2Zvb3Rlci9mb290ZXIuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiBmb290ZXJDb250cm9sbGVyLFxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgICAgICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBkaXJlY3RpdmU7XG4gICAgfVxuXG4gICAgZm9vdGVyQ29udHJvbGxlci4kaW5qZWN0ID0gW107XG5cbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBmb290ZXJDb250cm9sbGVyKCkge1xuICAgICAgICB2YXIgdm0gPSB0aGlzO1xuXG4gICAgICAgIGFjdGl2YXRlKCk7XG5cbiAgICAgICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ2Zvb3RlciBBY3RpdmF0ZWQnKTtcbiAgICAgICAgfVxuICAgIH1cbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdBbnlEYXlCdWRkeUFkcycpXG4gICAgICAgIC5kaXJlY3RpdmUoJ2hlYWRlckRpcmVjdGl2ZScsIGhlYWRlckRpcmVjdGl2ZSk7XG5cbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBoZWFkZXJEaXJlY3RpdmUoKSB7XG4gICAgICAgIHZhciBkaXJlY3RpdmUgPSB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0VBJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXNzZXRzL3ZpZXdzL2hlYWRlci9oZWFkZXIuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiBoZWFkZXJDb250cm9sbGVyLFxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgICAgICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBkaXJlY3RpdmU7XG4gICAgfVxuXG4gICAgaGVhZGVyQ29udHJvbGxlci4kaW5qZWN0ID0gW107XG5cbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBoZWFkZXJDb250cm9sbGVyKCkge1xuICAgICAgICB2YXIgdm0gPSB0aGlzO1xuXG4gICAgICAgIGFjdGl2YXRlKCk7XG5cbiAgICAgICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ2hlYWRlciBBY3RpdmF0ZWQnKTtcbiAgICAgICAgfVxuICAgIH1cbn0pKCk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
