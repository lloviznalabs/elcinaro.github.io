!function(){"use strict";angular.module("AnyDayBuddyAds",["ui.router","ngMaterial","uiGmapgoogle-maps"])}(),function(){"use strict";angular.module("AnyDayBuddyAds").constant("_",window._).constant("jQuery",window.jQuery).constant("Dropzone",window.Dropzone).constant("braintree",window.braintree).constant("baseApi","https://api.anydaybuddy.com")}(),function(){"use strict";function e(e){e.configure({key:"AIzaSyAonFuCDb7HjXUz0uocKbEGUJz91IL9EVs",libraries:"places"})}function t(e,t){e.definePalette("primary",{50:"#9dceda",100:"#65b2c5",200:"#429ab0",300:"#2f6d7c",400:"#265966",500:"#1e4650",600:"#16323a",700:"#0d1f23",800:"#050c0d",900:"#000000",A100:"#9dceda",A200:"#65b2c5",A400:"#265966",A700:"#0d1f23",contrastDefaultColor:"light",contrastDarkColors:"50 100 200 A100 A200"}),e.definePalette("accent",{50:"#d0ebed",100:"#99d4d8",200:"#70c3c8",300:"#43a7ae",400:"#3a9298",500:"#327d82",600:"#29686c",700:"#215256",800:"#183d40",900:"#10282a",A100:"#d0ebed",A200:"#99d4d8",A400:"#3a9298",A700:"#215256",contrastDefaultColor:"light",contrastDarkColors:"50 100 200 300 A100 A200"}),e.definePalette("warn",{50:"#faeee6",100:"#ecc3a7",200:"#e2a379",300:"#d57b3e",400:"#c96b2b",500:"#b05e26",600:"#975121",700:"#7e431b",800:"#643616",900:"#4b2810",A100:"#faeee6",A200:"#ecc3a7",A400:"#c96b2b",A700:"#7e431b",contrastDefaultColor:"light",contrastDarkColors:"50 100 200 300 A100 A200"}),e.theme("default").primaryPalette("primary").accentPalette("accent").warnPalette("warn")}angular.module("AnyDayBuddyAds").config(t).config(e),e.$inject=["uiGmapGoogleMapApiProvider"],t.$inject=["$mdThemingProvider","$locationProvider"]}(),function(){"use strict";function e(e,t,o){e.$state=t,e.user=o.getUser(),e.$on("$stateChangeStart",function(n,r){e.fill=["login","dashboard","dashboard.campaigns"].indexOf(r.name)!==-1,r.authenticate&&!o.isAuthenticated()&&(n.preventDefault(),t.transitionTo("login"))})}angular.module("AnyDayBuddyAds").run(e),e.$inject=["$rootScope","$state","Auth"]}(),function(){"use strict";function e(e,t,o){e.state("home",{url:"/",views:{main:{controller:"HomeController",controllerAs:"vm",templateUrl:"assets/views/home.html"}},authenticate:!1}).state("dashboard",{url:"/dashboard",views:{main:{controller:"DashboardController",controllerAs:"vm",templateUrl:"assets/views/dashboard/index.html"}},authenticate:!0}).state("dashboard.campaigns",{url:"/campaigns",views:{dashboard:{controller:"DashboardController",controllerAs:"vm",templateUrl:"assets/views/dashboard/campaigns.html"}},authenticate:!0}).state("orders",{url:"/orders",views:{main:{controller:"OrdersController",controllerAs:"vm",templateUrl:"assets/views/orders.html"}},authenticate:!1}).state("login",{url:"/login",views:{main:{controller:"LoginController",controllerAs:"vm",templateUrl:"assets/views/login.html"}},authenticate:!1}),t.otherwise("/")}angular.module("AnyDayBuddyAds").config(e),e.$inject=["$stateProvider","$urlRouterProvider","$locationProvider"]}(),function(){"use strict";function e(e,t){}e.$inject=["$http","$q"],angular.module("AnyDayBuddyAds").controller("DashboardController",e)}(),function(){"use strict";function e(e,t){function o(){}function n(e){t("html, body").animate({scrollTop:t(e).offset().top},1e3)}var r=this;r.title="Home Controller",r.scrollTo=n,o()}angular.module("AnyDayBuddyAds").controller("HomeController",e),e.$inject=["$rootScope","jQuery"]}(),function(){"use strict";function e(e,t){var o=this;o.login=function(){t.login(o.user).then(function(t){console.log(t),e.go("dashboard.campaigns")})}}angular.module("AnyDayBuddyAds").controller("LoginController",e),e.$inject=["$state","Auth"]}(),function(){"use strict";function e(e,t,o,n,r,i,a){function s(){return a.getObject("user",null)}function c(t){var r=n.defer();return o.post(e+"/auth/validate/"+t).success(function(e){r.resolve(e)}).error(function(e){r.reject(e)}),r.promise}function l(t){var r=n.defer();return o.post(e+"/auth/login",t).success(function(e,t,o,n){r.resolve(e),e.hasOwnProperty("token")&&(angular.copy(e.user,i.user),a.set("access_token",e.token),a.setObject("user",e.user))}).error(function(e){r.reject(e)}),r.promise}function u(t){var r=n.defer();return o.post(e+"/auth/register",t).success(function(e,t,o,n){r.resolve(e)}).error(function(e){r.reject(e)}),r.promise}function d(t,r){var i=n.defer();return o.post(e+"/auth/resetpassword/"+t,r).success(function(e,t,o,n){i.resolve(e)}).error(function(e){i.reject(e)}),i.promise}function p(t){var r=n.defer();return o.post(e+"/auth/resetPasswordRequest",t).success(function(e,t,o,n){r.resolve(e)}).error(function(e){r.reject(e)}),r.promise}function f(){a.remove("user"),a.remove("access_token"),a.remove("original_user"),i.isAuthenticated=!1,i.user=null,i.view="auth",i.currentState="login",t.location.reload()}function m(e,t){e.hasOwnProperty("token")?(!t&&a.get("access_token")||a.set("access_token",e.token),i.user=e.user,a.setObject("user",e.user)):console.log("Bad Date",e)}function g(){return a.get("access_token")}var v={getUser:s,validate:c,isAuthenticated:g,login:l,logout:f,register:u,forgot:p,reset:d,setCredentials:m};return v}function t(e,t,o){function n(e){var o;return t.get("access_token")&&(o=t.get("access_token")),o&&(e.headers.Authorization="Bearer "+o),e}function r(n){return 401!==n.status&&403!==n.status||(t.remove("access_token"),o.get("$state").go("login")),e.reject(n)}var i={request:n,responseError:r};return i}t.$inject=["$q","$localstorage","$injector"],angular.module("AnyDayBuddyAds").factory("Auth",e).factory("AuthInterceptor",t).config(["$httpProvider",function(e){e.interceptors.push("AuthInterceptor"),e.defaults.withCredentials=!0}]),e.$inject=["baseApi","$window","$http","$q","$state","$rootScope","$localstorage"]}(),function(){"use strict";function e(e,t,o){function n(){var n=t.defer();return e({method:"GET",url:o+"/campaign/options/"}).success(function(e,t,o,r){n.resolve(e)}).error(function(e){n.reject(e)}),n.promise}function r(){var o=t.defer();return e({method:"GET",url:"http://localhost:1338/commerce/clientToken/"}).success(function(e,t,n,r){o.resolve(e)}).error(function(e){o.reject(e)}),o.promise}function i(o){var n=t.defer();return e.post("http://localhost:1338/campaign/create/",o).success(function(e){n.resolve(e)}).error(function(e){n.reject(e)}),n.promise}var a={getOptions:n,getClientToken:r,createCampaign:i};return a}angular.module("AnyDayBuddyAds").service("DataService",e),e.$inject=["$http","$q","baseApi"]}(),function(){"use strict";function e(){function e(e,t,o){return{options:{url:"https://api.cloudinary.com/v1_1/cloud9/image/upload",uploadMultiple:!1,maxFiles:1,acceptedFiles:"image/*",dictDefaultMessage:"Drop file or click here to upload",addRemoveLinks:!0},eventHandlers:{sending:function(e,o,n){n.append("api_key",839988333153567),n.append("timestamp",Date.now()/1e3|0),n.append("upload_preset","sm2ev4nu"),t&&t()},success:e,removedfile:o}}}function t(e,t,o){return{options:{url:"https://api.cloudinary.com/v1_1/cloud9/image/upload",maxFiles:e,acceptedFiles:"image/*",dictDefaultMessage:"Drop files or click here to upload"},eventHandlers:{sending:function(e,t,n){n.append("api_key",839988333153567),n.append("timestamp",Date.now()/1e3|0),n.append("upload_preset","sm2ev4nu"),o&&o()},success:t}}}var o={create:e,createMultiple:t};return o}angular.module("AnyDayBuddyAds").service("DropzoneService",e)}(),function(){"use strict";function e(e){function t(t,o){e.localStorage[t]=o}function o(t,o){return e.localStorage[t]||o}function n(t,o){e.localStorage[t]=JSON.stringify(o)}function r(t,o){return JSON.parse(e.localStorage[t]||(void 0!==o?o:"{}"))}function i(t){return e.localStorage.removeItem(t)}var a={set:t,get:o,setObject:n,getObject:r,remove:i};return a}angular.module("AnyDayBuddyAds").factory("$localstorage",e),e.$inject=["$window"]}(),function(){"use strict";function e(){function e(e,t,o,n){}var o={restrict:"EA",templateUrl:"assets/views/orders/orders.campaign.html",scope:{options:"=",form:"=",total:"="},link:e,controller:t,controllerAs:"vm",bindToController:!0};return o}function t(e,t){function o(){}o()}angular.module("AnyDayBuddyAds").directive("adbOrdersCampaign",e),t.$inject=["$http","$q"]}(),function(){"use strict";function e(){function e(e,t,o,n){}var o={restrict:"EA",templateUrl:"assets/views/orders/orders.checkout.html",scope:{options:"=",form:"=",total:"="},link:e,controller:t,controllerAs:"vm",bindToController:!0};return o}function t(e,t,o,n,r,i){function a(){i.getClientToken().then(function(e){console.log(e),s(e.clientToken)}).catch(function(e){console.log(e)})}function s(e){t.setup(e,"custom",{paypal:{container:"paypal-container",singleUse:!0,amount:"0",currency:"USD",locale:"en_us",enableShippingAddress:!1},onPaymentMethodReceived:function(e){c(e.nonce)},onReady:function(e){l.checkout=e}})}function c(e){console.log(e)}var l=this;l.checkout={},a(),l.launch=function(){console.log(l.checkout,l.form)},o.$watch("vm.checkout",function(e,t){e&&console.log(e)})}angular.module("AnyDayBuddyAds").directive("adbOrdersCheckout",e),t.$inject=["_","braintree","$scope","$http","$q","DataService"]}(),function(){"use strict";function e(){function e(e,t,o,n){}var o={restrict:"EA",templateUrl:"assets/views/orders/orders.customer.html",scope:{options:"=",form:"=",total:"=",control:"="},link:e,controller:t,controllerAs:"vm",bindToController:!0};return o}function t(e,t){function o(){}var n=this;o(),n.nextTab=function(){n.control.selectedTab+=1}}angular.module("AnyDayBuddyAds").directive("adbOrdersCustomer",e),t.$inject=["$http","$q"]}(),function(){"use strict";function e(e,t,o,n){function r(){n.getOptions().then(function(e){console.log(e),c.options.target=i(e),console.log(c.form)}).catch(function(e){console.log(e)})}function i(t){var o=function(t,n){return e.isObject(t)?e.merge({},t,n,o):t||n},n=e.flatten([{},t,o]);return e.merge.apply(e,n)}function a(e,t){o.show({fullscreen:!0,targetEvent:e,clickOutsideToClose:!0,templateUrl:"app/shared/layout/imageModal.html",locals:{image:t},controller:["$scope","image",function(e,t){e.image=t}]})}function s(){o.show({templateUrl:"app/components/ad/advertisementModal.html",clickOutsideToClose:!0,fullscreen:!0})}var c=this;c.openImage=a,c.add=s,c.total=0,c.control={selectedTab:0},c.options={target:{display:[],media:[],impressionsUnits:[],impressionsTime:[],distance:[],age:[],gender:[]}},c.form={media:{},options:{display:{},impressions:{},distance:{},age:{},gender:{},interests:{}},customer:{},auth:{}},r(),t.$watch("vm.form",function(t,o){console.log(t),c.total=t.media.hasOwnProperty("fee")?t.media.fee:0,e.map(t.options,function(e){e.hasOwnProperty("fee")&&(c.total+=c.total*e.fee),e.hasOwnProperty("discount")&&(c.total-=c.total*e.discount)})},!0)}angular.module("AnyDayBuddyAds").controller("OrdersController",e),e.$inject=["_","$scope","$mdDialog","DataService"]}(),function(){"use strict";function e(){function e(e,t,o,n){}var o={restrict:"EA",templateUrl:"assets/views/orders/orders.resume.html",scope:{options:"=",form:"=",total:"="},link:e,controller:t,controllerAs:"vm",bindToController:!0};return o}function t(e,t,o){function n(){}var r=this;n(),r.formatImpressions=function(){if(r.form.impressionType&&r.form.options.impressions.hasOwnProperty("id")){var t={impressionsUnits:e.join([r.form.options.impressions.quantity,r.form.options.impressions.type]," "),impressionsTime:e.join([r.form.options.impressions.time,r.form.options.impressions.period]," ")};return t[r.form.impressionType]}},r.formatTarget=function(){var t={distance:{value:r.form.options.distance,render:e.join(["Distance:",r.form.options.distance.distance||"","Km"]," ")},age:{value:r.form.options.age,render:e.join(["Age between:",e.join(r.form.options.age.range,"-")]," ")},gender:{value:r.form.options.gender,render:e.join(["Gender:",r.form.options.gender.gender]," ")},interests:{value:r.form.options.interests,render:e.join(["Interests:",r.form.options.interests.quantity]," ")}},o=e.pickBy(t,function(e){return e.value.hasOwnProperty("id")});return e.isEmpty(o)?"":e.join(["Target: ",e.map(Object.keys(o),function(e){return t[e].render})],"")},r.formatResume=function(){return resume}}angular.module("AnyDayBuddyAds").directive("adbOrdersResume",e),t.$inject=["_","$http","$q"]}(),function(){"use strict";function e(){function e(e,t,o,n){}var o={restrict:"EA",templateUrl:"assets/views/orders/orders.display.html",scope:{options:"=",form:"=",total:"="},link:e,controller:t,controllerAs:"vm",bindToController:!0};return o}function t(e,t,o,n,r,i){function a(){o.all([e,t.promise(1)]).then(function(e){var t=e[0],o=e[1][0].map;u.window={pixelOffset:new t.Size(0,(-40)),closeClick:function(){u.marker.show=!1}},m=new t.places.AutocompleteService,f=new t.DirectionsService,p=new t.DirectionsRenderer,u.map.instance=o,p.setMap(u.map.instance),d=new t.places.PlacesService(u.map.instance),u.placesReady=!0,console.log("ready")})}function s(e,t,o,n){console.log(t),r(function(){e.panTo(new google.maps.LatLng(t.latitude,t.longitude)),o&&e.panBy(0,-200)},100)}function c(e,t,o){var r=o[0],i=r.latLng.lat(),a=r.latLng.lng();u.marker={id:Date.now(),location:{latitude:i,longitude:a},show:!1},n.$apply()}function l(){console.log("bounds changed"),!u.map.instance}var u=this,d=null,p=null,f=null,m=null;u.control={uploading:!1},u.map={center:{latitude:45.50174502816667,longitude:-73.5703881829977},zoom:14,options:{scrollwheel:!0},mapMarker:!0,disableDefaultUI:!0,control:{},events:{click:c,idle:l}},u.info={name:"Venue name",address:"",icon:""},u.marker={id:0,location:{latitude:45.50174502816667,longitude:-73.5703881829977},show:!1},u.dropzone=i.create(function(e,t){n.$apply(function(){console.log(t.secure_url),u.control.uploading=!1})},function(){n.$apply(function(){u.control.uploading=!0})}),a(),u.clickMarker=function(){console.log("click"),u.marker.show=!u.marker.show,n.$apply()},u.autocompleteAddress=function(e){var t=o.defer();return m.getQueryPredictions({input:e},function(e){t.resolve(e?_.filter(e,"place_id"):[])}),t.promise},u.getPlace=function(){console.log(u.info.place),u.info.place&&d.getDetails({placeId:u.info.place.place_id},function(e,t){console.log(e,t),u.marker={id:Date.now(),name:e.name,location:{latitude:parseFloat(e.geometry.location.lat()),longitude:parseFloat(e.geometry.location.lng())},show:!0},s(u.map.instance,u.marker.location,null,!0),n.$apply()})}}angular.module("AnyDayBuddyAds").directive("adbDisplayChooser",e),t.$inject=["uiGmapGoogleMapApi","uiGmapIsReady","$q","$scope","$timeout","DropzoneService"]}(),function(){"use strict";function e(e){function t(t,o,n){var r,i;r=t.dropzone,i=new e(o[0],r.options),t.reset&&i.on("complete",function(e){i.removeFile(e)}),angular.forEach(r.eventHandlers,function(e,t){i.on(t,e)})}var o={link:t,restrict:"EA",scope:{dropzone:"=dropzone",reset:"@reset"}};return o}angular.module("AnyDayBuddyAds").directive("dropzone",e),e.$inject=["Dropzone"]}(),function(){"use strict";function e(){var e={restrict:"EA",templateUrl:"assets/views/header/header.html",controller:t,controllerAs:"vm",bindToController:!0,scope:{}};return e}function t(e){console.log("PRUEBA");var t=this;t.logout=function(){console.log("LOGOUT"),e.logout()}}angular.module("AnyDayBuddyAds").directive("headerDirective",e),t.$inject=["Auth"]}(),function(){"use strict";function e(){var e={restrict:"EA",templateUrl:"assets/views/footer/footer.html",controller:t,controllerAs:"vm",bindToController:!0};return e}function t(){function e(){console.log("footer Activated")}e()}angular.module("AnyDayBuddyAds").directive("footerDirective",e),t.$inject=[]}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5tb2R1bGUuanMiLCJhcHAuY29uc3RhbnRzLmpzIiwiYXBwLmNvbmZpZy5qcyIsImFwcC5ydW4uanMiLCJhcHAucm91dGUuanMiLCJkYXNoYm9hcmQvZGFzaGJvYXJkLmNvbnRyb2xsZXIuanMiLCJtYWluL2hvbWUuY29udHJvbGxlci5qcyIsIm1haW4vbG9naW4uY29udHJvbGxlci5qcyIsInNlcnZpY2VzL2F1dGguc2VydmljZS5qcyIsInNlcnZpY2VzL2RhdGEuc2VydmljZS5qcyIsInNlcnZpY2VzL2Ryb3B6b25lLnNlcnZpY2UuanMiLCJzZXJ2aWNlcy9sb2NhbHN0b3JhZ2Uuc2VydmljZS5qcyIsIm9yZGVycy9jYW1wYWlnbi5kaXJlY3RpdmUuanMiLCJvcmRlcnMvY2hlY2tvdXQuZGlyZWN0aXZlLmpzIiwib3JkZXJzL2N1c3RvbWVyLmRpcmVjdGl2ZS5qcyIsIm9yZGVycy9vcmRlcnMuY29udHJvbGxlci5qcyIsIm9yZGVycy9yZXN1bWUuZGlyZWN0aXZlLmpzIiwib3JkZXJzL3V0aWxzLmRpc3BsYXkuZGlyZWN0aXZlLmpzIiwic2hhcmVkL2Ryb3B6b25lLmRpcmVjdGl2ZS5qcyIsImNvbXBvbmVudHMvaGVhZGVyL2hlYWRlci5kaXJlY3RpdmUuanMiLCJjb21wb25lbnRzL2Zvb3Rlci9mb290ZXIuZGlyZWN0aXZlLmpzIl0sIm5hbWVzIjpbImFuZ3VsYXIiLCJtb2R1bGUiLCJjb25zdGFudCIsIndpbmRvdyIsIl8iLCJqUXVlcnkiLCJEcm9wem9uZSIsImJyYWludHJlZSIsIm1hcHNQcm92aWRlciIsInVpR21hcEdvb2dsZU1hcEFwaVByb3ZpZGVyIiwiY29uZmlndXJlIiwia2V5IiwibGlicmFyaWVzIiwiY29uZmlnIiwiJG1kVGhlbWluZ1Byb3ZpZGVyIiwiJGxvY2F0aW9uUHJvdmlkZXIiLCJkZWZpbmVQYWxldHRlIiwiNTAiLCIxMDAiLCIyMDAiLCIzMDAiLCI0MDAiLCI1MDAiLCI2MDAiLCI3MDAiLCI4MDAiLCI5MDAiLCJBMTAwIiwiQTIwMCIsIkE0MDAiLCJBNzAwIiwiY29udHJhc3REZWZhdWx0Q29sb3IiLCJjb250cmFzdERhcmtDb2xvcnMiLCJ0aGVtZSIsInByaW1hcnlQYWxldHRlIiwiYWNjZW50UGFsZXR0ZSIsIndhcm5QYWxldHRlIiwiJGluamVjdCIsInJ1blByb3ZpZGVyIiwiJHJvb3RTY29wZSIsIiRzdGF0ZSIsIkF1dGgiLCJ1c2VyIiwiZ2V0VXNlciIsIiRvbiIsImV2ZW50IiwidG9TdGF0ZSIsImZpbGwiLCJpbmRleE9mIiwibmFtZSIsImF1dGhlbnRpY2F0ZSIsImlzQXV0aGVudGljYXRlZCIsInByZXZlbnREZWZhdWx0IiwidHJhbnNpdGlvblRvIiwicnVuIiwicm91dGVyUHJvdmlkZXIiLCIkc3RhdGVQcm92aWRlciIsIiR1cmxSb3V0ZXJQcm92aWRlciIsInN0YXRlIiwidXJsIiwidmlld3MiLCJtYWluIiwiY29udHJvbGxlciIsImNvbnRyb2xsZXJBcyIsInRlbXBsYXRlVXJsIiwiZGFzaGJvYXJkIiwib3RoZXJ3aXNlIiwiQ29udHJvbGxlciIsIiRodHRwIiwiJHEiLCJIb21lQ29udHJvbGxlciIsImFjdGl2YXRlIiwic2Nyb2xsVG8iLCJlbGVtZW50IiwiYW5pbWF0ZSIsInNjcm9sbFRvcCIsIm9mZnNldCIsInRvcCIsInZtIiwidGhpcyIsInRpdGxlIiwiTG9naW5Db250cm9sbGVyIiwibG9naW4iLCJ0aGVuIiwicmVzIiwiY29uc29sZSIsImxvZyIsImdvIiwiYmFzZUFwaSIsIiR3aW5kb3ciLCIkbG9jYWxzdG9yYWdlIiwiZ2V0T2JqZWN0IiwidmFsaWRhdGUiLCJ0b2tlbiIsImRlZmVycmVkIiwiZGVmZXIiLCJwb3N0Iiwic3VjY2VzcyIsInJlc3AiLCJyZXNvbHZlIiwiZXJyb3IiLCJlcnIiLCJyZWplY3QiLCJwcm9taXNlIiwiY3JlZGVudGlhbHMiLCJkYXRhIiwic3RhdHVzIiwiaGVhZGVycyIsImhhc093blByb3BlcnR5IiwiY29weSIsInNldCIsInNldE9iamVjdCIsInJlZ2lzdGVyIiwicGF5bG9hZCIsInJlc2V0IiwicGFyYW1zIiwiZm9yZ290IiwibG9nb3V0IiwicmVtb3ZlIiwidmlldyIsImN1cnJlbnRTdGF0ZSIsImxvY2F0aW9uIiwicmVsb2FkIiwic2V0Q3JlZGVudGlhbHMiLCJmb3JjZSIsImdldCIsIkF1dGhJbnRlcmNlcHRvciIsIiRpbmplY3RvciIsInJlcXVlc3QiLCJBdXRob3JpemF0aW9uIiwicmVzcG9uc2VFcnJvciIsInJlc3BvbnNlIiwiZmFjdG9yeSIsIiRodHRwUHJvdmlkZXIiLCJpbnRlcmNlcHRvcnMiLCJwdXNoIiwiZGVmYXVsdHMiLCJ3aXRoQ3JlZGVudGlhbHMiLCJkYXRhU2VydmljZSIsImdldE9wdGlvbnMiLCJtZXRob2QiLCJnZXRDbGllbnRUb2tlbiIsImNyZWF0ZUNhbXBhaWduIiwic2VydmljZSIsIkRyb3B6b25lU2VydmljZSIsImNyZWF0ZSIsInNlbmRpbmciLCJyZW1vdmVkZmlsZSIsIm9wdGlvbnMiLCJ1cGxvYWRNdWx0aXBsZSIsIm1heEZpbGVzIiwiYWNjZXB0ZWRGaWxlcyIsImRpY3REZWZhdWx0TWVzc2FnZSIsImFkZFJlbW92ZUxpbmtzIiwiZXZlbnRIYW5kbGVycyIsImZpbGUiLCJ4aHIiLCJmb3JtRGF0YSIsImFwcGVuZCIsIkRhdGUiLCJub3ciLCJjcmVhdGVNdWx0aXBsZSIsInZhbHVlIiwibG9jYWxTdG9yYWdlIiwiZGVmYXVsdFZhbHVlIiwiSlNPTiIsInN0cmluZ2lmeSIsInBhcnNlIiwidW5kZWZpbmVkIiwicmVtb3ZlSXRlbSIsImRpcmVjdGl2ZSIsImxpbmtGdW5jIiwic2NvcGUiLCJlbCIsImF0dHIiLCJjdHJsIiwicmVzdHJpY3QiLCJmb3JtIiwidG90YWwiLCJsaW5rIiwiYmluZFRvQ29udHJvbGxlciIsIiRzY29wZSIsIkRhdGFTZXJ2aWNlIiwic2V0dXBHYXRld2F5IiwiY2xpZW50VG9rZW4iLCJjYXRjaCIsInNldHVwIiwicGF5cGFsIiwiY29udGFpbmVyIiwic2luZ2xlVXNlIiwiYW1vdW50IiwiY3VycmVuY3kiLCJsb2NhbGUiLCJlbmFibGVTaGlwcGluZ0FkZHJlc3MiLCJvblBheW1lbnRNZXRob2RSZWNlaXZlZCIsIm9iaiIsImRvU29tZXRoaW5nV2l0aFRoZU5vbmNlIiwibm9uY2UiLCJvblJlYWR5IiwiaW50ZWdyYXRpb24iLCJjaGVja291dCIsImxhdW5jaCIsIiR3YXRjaCIsImMiLCJvIiwiY29udHJvbCIsIm5leHRUYWIiLCJzZWxlY3RlZFRhYiIsIiRtZERpYWxvZyIsInRhcmdldCIsImRvX21lcmdlIiwicm9sZXMiLCJtZXJnZXIiLCJhIiwiYiIsImlzT2JqZWN0IiwibWVyZ2UiLCJhcmdzIiwiZmxhdHRlbiIsImFwcGx5Iiwib3BlbkltYWdlIiwiJGV2ZW50IiwiaW1hZ2UiLCJzaG93IiwiZnVsbHNjcmVlbiIsInRhcmdldEV2ZW50IiwiY2xpY2tPdXRzaWRlVG9DbG9zZSIsImxvY2FscyIsImFkZCIsImRpc3BsYXkiLCJtZWRpYSIsImltcHJlc3Npb25zVW5pdHMiLCJpbXByZXNzaW9uc1RpbWUiLCJkaXN0YW5jZSIsImFnZSIsImdlbmRlciIsImltcHJlc3Npb25zIiwiaW50ZXJlc3RzIiwiY3VzdG9tZXIiLCJhdXRoIiwiZmVlIiwibWFwIiwiaXRlbSIsImRpc2NvdW50IiwiZm9ybWF0SW1wcmVzc2lvbnMiLCJpbXByZXNzaW9uVHlwZSIsInR5cGVzIiwiam9pbiIsInF1YW50aXR5IiwidHlwZSIsInRpbWUiLCJwZXJpb2QiLCJmb3JtYXRUYXJnZXQiLCJyZW5kZXIiLCJyYW5nZSIsInNlbGVjdGVkIiwicGlja0J5IiwiaSIsImlzRW1wdHkiLCJPYmplY3QiLCJrZXlzIiwiZm9ybWF0UmVzdW1lIiwicmVzdW1lIiwidWlHbWFwR29vZ2xlTWFwQXBpIiwidWlHbWFwSXNSZWFkeSIsIiR0aW1lb3V0IiwiYWxsIiwiaW5zdGFuY2UiLCJwaXhlbE9mZnNldCIsIlNpemUiLCJjbG9zZUNsaWNrIiwibWFya2VyIiwiUGxhY2VzQXV0b2NvbXBsZXRlIiwicGxhY2VzIiwiQXV0b2NvbXBsZXRlU2VydmljZSIsIkRpcmVjdGlvbnNTZXJ2aWNlIiwiRGlyZWN0aW9uUmVuZGVyZXIiLCJEaXJlY3Rpb25zUmVuZGVyZXIiLCJzZXRNYXAiLCJQbGFjZXMiLCJQbGFjZXNTZXJ2aWNlIiwicGxhY2VzUmVhZHkiLCJjZW50ZXJNYXAiLCJzY3JvbGwiLCJwYW5UbyIsImdvb2dsZSIsIm1hcHMiLCJMYXRMbmciLCJsYXRpdHVkZSIsImxvbmdpdHVkZSIsInBhbkJ5IiwiY2xpY2tNYXAiLCJldmVudE5hbWUiLCJvcmlnaW5hbEV2ZW50QXJncyIsImUiLCJsYXQiLCJsYXRMbmciLCJsb24iLCJsbmciLCJpZCIsIiRhcHBseSIsImJvdW5kc0NoYW5nZWQiLCJ1cGxvYWRpbmciLCJjZW50ZXIiLCJ6b29tIiwic2Nyb2xsd2hlZWwiLCJtYXBNYXJrZXIiLCJkaXNhYmxlRGVmYXVsdFVJIiwiZXZlbnRzIiwiY2xpY2siLCJpZGxlIiwiaW5mbyIsImFkZHJlc3MiLCJpY29uIiwiZHJvcHpvbmUiLCJzZWN1cmVfdXJsIiwiY2xpY2tNYXJrZXIiLCJhdXRvY29tcGxldGVBZGRyZXNzIiwiZ2V0UXVlcnlQcmVkaWN0aW9ucyIsImlucHV0IiwiZmlsdGVyIiwiZ2V0UGxhY2UiLCJwbGFjZSIsImdldERldGFpbHMiLCJwbGFjZUlkIiwicGxhY2VfaWQiLCJwYXJzZUZsb2F0IiwiZ2VvbWV0cnkiLCJhdHRycyIsInpvbmUiLCJvbiIsInJlbW92ZUZpbGUiLCJmb3JFYWNoIiwiaGFuZGxlciIsImhlYWRlckRpcmVjdGl2ZSIsImhlYWRlckNvbnRyb2xsZXIiLCJmb290ZXJEaXJlY3RpdmUiLCJmb290ZXJDb250cm9sbGVyIl0sIm1hcHBpbmdzIjoiQ0FTQSxXQUNBLFlBRUFBLFNBQ0FDLE9BQUEsa0JBQ0EsWUFDQSxhQUNBLHlCQ2hCQSxXQUNBLFlBRUFELFNBQ0FDLE9BQUEsa0JBQ0FDLFNBQUEsSUFBQUMsT0FBQUMsR0FDQUYsU0FBQSxTQUFBQyxPQUFBRSxRQUNBSCxTQUFBLFdBQUFDLE9BQUFHLFVBQ0FKLFNBQUEsWUFBQUMsT0FBQUksV0FDQUwsU0FBQSxVQUFBLGtDQ1RBLFdBQ0EsWUFRQSxTQUFBTSxHQUFBQyxHQUNBQSxFQUFBQyxXQUNBQyxJQUFBLDBDQUVBQyxVQUFBLFdBTUEsUUFBQUMsR0FBQUMsRUFBQUMsR0FFQUQsRUFBQUUsY0FBQSxXQUNBQyxHQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLEtBQUEsVUFDQUMsS0FBQSxVQUNBQyxLQUFBLFVBQ0FDLEtBQUEsVUFDQUMscUJBQUEsUUFDQUMsbUJBQUEseUJBRUFsQixFQUFBRSxjQUFBLFVBQ0FDLEdBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsS0FBQSxVQUNBQyxLQUFBLFVBQ0FDLEtBQUEsVUFDQUMsS0FBQSxVQUNBQyxxQkFBQSxRQUNBQyxtQkFBQSw2QkFFQWxCLEVBQUFFLGNBQUEsUUFDQUMsR0FBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxLQUFBLFVBQ0FDLEtBQUEsVUFDQUMsS0FBQSxVQUNBQyxLQUFBLFVBQ0FDLHFCQUFBLFFBQ0FDLG1CQUFBLDZCQUVBbEIsRUFBQW1CLE1BQUEsV0FDQUMsZUFBQSxXQUNBQyxjQUFBLFVBQ0FDLFlBQUEsUUE1RUFwQyxRQUNBQyxPQUFBLGtCQUNBWSxPQUFBQSxHQUNBQSxPQUFBTCxHQUVBQSxFQUFBNkIsU0FBQSw4QkFVQXhCLEVBQUF3QixTQUFBLHFCQUFBLHdCQ2pCQSxXQUNBLFlBUUEsU0FBQUMsR0FBQUMsRUFBQUMsRUFBQUMsR0FDQUYsRUFBQUMsT0FBQUEsRUFDQUQsRUFBQUcsS0FBQUQsRUFBQUUsVUFFQUosRUFBQUssSUFBQSxvQkFBQSxTQUFBQyxFQUFBQyxHQUNBUCxFQUFBUSxNQUFBLFFBQUEsWUFBQSx1QkFBQUMsUUFBQUYsRUFBQUcsU0FBQSxFQU1BSCxFQUFBSSxlQUFBVCxFQUFBVSxvQkFDQU4sRUFBQU8saUJBQ0FaLEVBQUFhLGFBQUEsWUFuQkFyRCxRQUNBQyxPQUFBLGtCQUNBcUQsSUFBQWhCLEdBRUFBLEVBQUFELFNBQUEsYUFBQSxTQUFBLFdDUEEsV0FDQSxZQVFBLFNBQUFrQixHQUFBQyxFQUFBQyxFQUFBMUMsR0FNQXlDLEVBQ0FFLE1BQUEsUUFDQUMsSUFBQSxJQUNBQyxPQUNBQyxNQUNBQyxXQUFBLGlCQUNBQyxhQUFBLEtBQ0FDLFlBQUEsMkJBR0FkLGNBQUEsSUFFQVEsTUFBQSxhQUNBQyxJQUFBLGFBQ0FDLE9BQ0FDLE1BQ0FDLFdBQUEsc0JBQ0FDLGFBQUEsS0FDQUMsWUFBQSxzQ0FHQWQsY0FBQSxJQUVBUSxNQUFBLHVCQUNBQyxJQUFBLGFBQ0FDLE9BQ0FLLFdBQ0FILFdBQUEsc0JBQ0FDLGFBQUEsS0FDQUMsWUFBQSwwQ0FHQWQsY0FBQSxJQUVBUSxNQUFBLFVBQ0FDLElBQUEsVUFDQUMsT0FDQUMsTUFDQUMsV0FBQSxtQkFDQUMsYUFBQSxLQUNBQyxZQUFBLDZCQUdBZCxjQUFBLElBRUFRLE1BQUEsU0FDQUMsSUFBQSxTQUNBQyxPQUNBQyxNQUNBQyxXQUFBLGtCQUNBQyxhQUFBLEtBQ0FDLFlBQUEsNEJBR0FkLGNBQUEsSUFHQU8sRUFBQVMsVUFBQSxLQXJFQWxFLFFBQ0FDLE9BQUEsa0JBQ0FZLE9BQUEwQyxHQUVBQSxFQUFBbEIsU0FBQSxpQkFBQSxxQkFBQSx3QkNQQSxXQUNBLFlBTUEsU0FBQThCLEdBQUFDLEVBQUFDLDZCQUpBckUsUUFDQUMsT0FBQSxrQkFDQTZELFdBQUEsc0JBQUFLLE1DS0EsV0FDQSxZQVNBLFNBQUFHLEdBQUEvQixFQUFBbEMsR0FRQSxRQUFBa0UsTUFFQSxRQUFBQyxHQUFBQyxHQUNBcEUsRUFBQSxjQUFBcUUsU0FDQUMsVUFBQXRFLEVBQUFvRSxHQUFBRyxTQUFBQyxLQUNBLEtBWkEsR0FBQUMsR0FBQUMsSUFDQUQsR0FBQUUsTUFBQSxrQkFDQUYsRUFBQU4sU0FBQUEsRUFDQUQsSUFYQXZFLFFBQ0FDLE9BQUEsa0JBQ0E2RCxXQUFBLGlCQUFBUSxHQUVBQSxFQUFBakMsU0FBQSxhQUFBLGFDakJBLFdBQ0EsWUFRQSxTQUFBNEMsR0FBQXpDLEVBQUFDLEdBQ0EsR0FBQXFDLEdBQUFDLElBSUFELEdBQUFJLE1BQUEsV0FDQXpDLEVBQUF5QyxNQUFBSixFQUFBcEMsTUFBQXlDLEtBQUEsU0FBQUMsR0FDQUMsUUFBQUMsSUFBQUYsR0FDQTVDLEVBQUErQyxHQUFBLDBCQWRBdkYsUUFDQUMsT0FBQSxrQkFDQTZELFdBQUEsa0JBQUFtQixHQUVBQSxFQUFBNUMsU0FBQSxTQUFBLFdDUEEsV0FDQSxZQXFCQSxTQUFBSSxHQUFBK0MsRUFBQUMsRUFBQXJCLEVBQUFDLEVBQUE3QixFQUFBRCxFQUFBbUQsR0FrQkEsUUFBQS9DLEtBQ0EsTUFBQStDLEdBQUFDLFVBQUEsT0FBQSxNQUdBLFFBQUFDLEdBQUFDLEdBQ0EsR0FBQUMsR0FBQXpCLEVBQUEwQixPQVFBLE9BUEEzQixHQUFBNEIsS0FBQVIsRUFBQSxrQkFBQUssR0FDQUksUUFBQSxTQUFBQyxHQUNBSixFQUFBSyxRQUFBRCxLQUVBRSxNQUFBLFNBQUFDLEdBQ0FQLEVBQUFRLE9BQUFELEtBRUFQLEVBQUFTLFFBUUEsUUFBQXJCLEdBQUFzQixHQUNBLEdBQUFWLEdBQUF6QixFQUFBMEIsT0FnQkEsT0FkQTNCLEdBQUE0QixLQUFBUixFQUFBLGNBQUFnQixHQUNBUCxRQUFBLFNBQUFRLEVBQUFDLEVBQUFDLEVBQUE5RixHQUNBaUYsRUFBQUssUUFBQU0sR0FFQUEsRUFBQUcsZUFBQSxXQUNBNUcsUUFBQTZHLEtBQUFKLEVBQUEvRCxLQUFBSCxFQUFBRyxNQUNBZ0QsRUFBQW9CLElBQUEsZUFBQUwsRUFBQVosT0FDQUgsRUFBQXFCLFVBQUEsT0FBQU4sRUFBQS9ELFNBR0EwRCxNQUFBLFNBQUFDLEdBQ0FQLEVBQUFRLE9BQUFELEtBR0FQLEVBQUFTLFFBUUEsUUFBQVMsR0FBQUMsR0FFQSxHQUFBbkIsR0FBQXpCLEVBQUEwQixPQVNBLE9BUEEzQixHQUFBNEIsS0FBQVIsRUFBQSxpQkFBQXlCLEdBQ0FoQixRQUFBLFNBQUFRLEVBQUFDLEVBQUFDLEVBQUE5RixHQUNBaUYsRUFBQUssUUFBQU0sS0FFQUwsTUFBQSxTQUFBQyxHQUNBUCxFQUFBUSxPQUFBRCxLQUVBUCxFQUFBUyxRQVNBLFFBQUFXLEdBQUFyQixFQUFBc0IsR0FDQSxHQUFBckIsR0FBQXpCLEVBQUEwQixPQVVBLE9BUkEzQixHQUFBNEIsS0FBQVIsRUFBQSx1QkFBQUssRUFBQXNCLEdBQ0FsQixRQUFBLFNBQUFRLEVBQUFDLEVBQUFDLEVBQUE5RixHQUNBaUYsRUFBQUssUUFBQU0sS0FFQUwsTUFBQSxTQUFBQyxHQUNBUCxFQUFBUSxPQUFBRCxLQUdBUCxFQUFBUyxRQVFBLFFBQUFhLEdBQUFILEdBQ0EsR0FBQW5CLEdBQUF6QixFQUFBMEIsT0FVQSxPQVJBM0IsR0FBQTRCLEtBQUFSLEVBQUEsNkJBQUF5QixHQUNBaEIsUUFBQSxTQUFBUSxFQUFBQyxFQUFBQyxFQUFBOUYsR0FDQWlGLEVBQUFLLFFBQUFNLEtBRUFMLE1BQUEsU0FBQUMsR0FDQVAsRUFBQVEsT0FBQUQsS0FHQVAsRUFBQVMsUUFRQSxRQUFBYyxLQUNBM0IsRUFBQTRCLE9BQUEsUUFDQTVCLEVBQUE0QixPQUFBLGdCQUNBNUIsRUFBQTRCLE9BQUEsaUJBRUEvRSxFQUFBWSxpQkFBQSxFQUNBWixFQUFBRyxLQUFBLEtBQ0FILEVBQUFnRixLQUFBLE9BQ0FoRixFQUFBaUYsYUFBQSxRQUNBL0IsRUFBQWdDLFNBQUFDLFNBU0EsUUFBQUMsR0FBQWxCLEVBQUFtQixHQUNBbkIsRUFBQUcsZUFBQSxXQUNBZ0IsR0FBQWxDLEVBQUFtQyxJQUFBLGlCQUNBbkMsRUFBQW9CLElBQUEsZUFBQUwsRUFBQVosT0FFQXRELEVBQUFHLEtBQUErRCxFQUFBL0QsS0FDQWdELEVBQUFxQixVQUFBLE9BQUFOLEVBQUEvRCxPQUVBMkMsUUFBQUMsSUFBQSxXQUFBbUIsR0FVQSxRQUFBdEQsS0FDQSxNQUFBdUMsR0FBQW1DLElBQUEsZ0JBN0pBLEdBQUFwRixJQUNBRSxRQUFBQSxFQUNBaUQsU0FBQUEsRUFDQXpDLGdCQUFBQSxFQUNBK0IsTUFBQUEsRUFDQW1DLE9BQUFBLEVBQ0FMLFNBQUFBLEVBQ0FJLE9BQUFBLEVBQ0FGLE1BQUFBLEVBQ0FTLGVBQUFBLEVBR0EsT0FBQWxGLEdBeUpBLFFBQUFxRixHQUFBekQsRUFBQXFCLEVBQUFxQyxHQVNBLFFBQUFDLEdBQUFuSCxHQUVBLEdBQUFnRixFQU9BLE9BTkFILEdBQUFtQyxJQUFBLGtCQUNBaEMsRUFBQUgsRUFBQW1DLElBQUEsaUJBRUFoQyxJQUNBaEYsRUFBQThGLFFBQUFzQixjQUFBLFVBQUFwQyxHQUVBaEYsRUFHQSxRQUFBcUgsR0FBQUMsR0FLQSxNQUpBLE9BQUFBLEVBQUF6QixRQUFBLE1BQUF5QixFQUFBekIsU0FDQWhCLEVBQUE0QixPQUFBLGdCQUNBUyxFQUFBRixJQUFBLFVBQUF0QyxHQUFBLFVBRUFsQixFQUFBaUMsT0FBQTZCLEdBeEJBLEdBQUFMLElBQ0FFLFFBQUFBLEVBQ0FFLGNBQUFBLEVBR0EsT0FBQUosZ0RBak1BOUgsUUFDQUMsT0FBQSxrQkFDQW1JLFFBQUEsT0FBQTNGLEdBQ0EyRixRQUFBLGtCQUFBTixHQUNBakgsUUFBQSxnQkFBQSxTQUFBd0gsR0FDQUEsRUFBQUMsYUFBQUMsS0FBQSxtQkFDQUYsRUFBQUcsU0FBQUMsaUJBQUEsS0FHQWhHLEVBQUFKLFNBQ0EsVUFDQSxVQUNBLFFBQ0EsS0FDQSxTQUNBLGFBQ0Esb0JDbkJBLFdBQ0EsWUFTQSxTQUFBcUcsR0FBQXRFLEVBQUFDLEVBQUFtQixHQVNBLFFBQUFtRCxLQUNBLEdBQUE3QyxHQUFBekIsRUFBQTBCLE9BV0EsT0FUQTNCLElBQ0F3RSxPQUFBLE1BQ0FqRixJQUFBNkIsRUFBQSx1QkFDQVMsUUFBQSxTQUFBUSxFQUFBQyxFQUFBQyxFQUFBOUYsR0FDQWlGLEVBQUFLLFFBQUFNLEtBQ0FMLE1BQUEsU0FBQUMsR0FDQVAsRUFBQVEsT0FBQUQsS0FHQVAsRUFBQVMsUUFHQSxRQUFBc0MsS0FDQSxHQUFBL0MsR0FBQXpCLEVBQUEwQixPQVdBLE9BVEEzQixJQUNBd0UsT0FBQSxNQUNBakYsSUFBQSxnREFDQXNDLFFBQUEsU0FBQVEsRUFBQUMsRUFBQUMsRUFBQTlGLEdBQ0FpRixFQUFBSyxRQUFBTSxLQUNBTCxNQUFBLFNBQUFDLEdBQ0FQLEVBQUFRLE9BQUFELEtBR0FQLEVBQUFTLFFBSUEsUUFBQXVDLEdBQUE3QixHQUNBLEdBQUFuQixHQUFBekIsRUFBQTBCLE9BUUEsT0FQQTNCLEdBQUE0QixLQUFBLHlDQUFBaUIsR0FDQWhCLFFBQUEsU0FBQVEsR0FDQVgsRUFBQUssUUFBQU0sS0FFQUwsTUFBQSxTQUFBQyxHQUNBUCxFQUFBUSxPQUFBRCxLQUVBUCxFQUFBUyxRQWhEQSxHQUFBbUMsSUFDQUMsV0FBQUEsRUFDQUUsZUFBQUEsRUFDQUMsZUFBQUEsRUFHQSxPQUFBSixHQWRBMUksUUFDQUMsT0FBQSxrQkFDQThJLFFBQUEsY0FBQUwsR0FFQUEsRUFBQXJHLFNBQUEsUUFBQSxLQUFBLGNDUEEsV0FDQSxZQU9BLFNBQUEyRyxLQVFBLFFBQUFDLEdBQUFoRCxFQUFBaUQsRUFBQUMsR0FDQSxPQUNBQyxTQUNBekYsSUFBQSxzREFDQTBGLGdCQUFBLEVBQ0FDLFNBQUEsRUFDQUMsY0FBQSxVQUNBQyxtQkFBQSxvQ0FDQUMsZ0JBQUEsR0FFQUMsZUFDQVIsUUFBQSxTQUFBUyxFQUFBQyxFQUFBQyxHQUNBQSxFQUFBQyxPQUFBLFVBQUEsaUJBQ0FELEVBQUFDLE9BQUEsWUFBQUMsS0FBQUMsTUFBQSxJQUFBLEdBQ0FILEVBQUFDLE9BQUEsZ0JBQUEsWUFDQVosR0FBQUEsS0FFQWpELFFBQUFBLEVBQ0FrRCxZQUFBQSxJQUtBLFFBQUFjLEdBQUFYLEVBQUFyRCxFQUFBaUQsR0FDQSxPQUNBRSxTQUNBekYsSUFBQSxzREFDQTJGLFNBQUFBLEVBQ0FDLGNBQUEsVUFDQUMsbUJBQUEsc0NBRUFFLGVBQ0FSLFFBQUEsU0FBQVMsRUFBQUMsRUFBQUMsR0FDQUEsRUFBQUMsT0FBQSxVQUFBLGlCQUNBRCxFQUFBQyxPQUFBLFlBQUFDLEtBQUFDLE1BQUEsSUFBQSxHQUNBSCxFQUFBQyxPQUFBLGdCQUFBLFlBQ0FaLEdBQUFBLEtBRUFqRCxRQUFBQSxJQTdDQSxHQUFBOEMsSUFDQUUsT0FBQUEsRUFDQWdCLGVBQUFBLEVBR0EsT0FBQWxCLEdBWEEvSSxRQUNBQyxPQUFBLGtCQUNBOEksUUFBQSxrQkFBQUMsTUNMQSxXQUNBLFlBUUEsU0FBQXRELEdBQUFELEdBYUEsUUFBQXFCLEdBQUFuRyxFQUFBdUosR0FDQXpFLEVBQUEwRSxhQUFBeEosR0FBQXVKLEVBR0EsUUFBQXJDLEdBQUFsSCxFQUFBeUosR0FDQSxNQUFBM0UsR0FBQTBFLGFBQUF4SixJQUFBeUosRUFHQSxRQUFBckQsR0FBQXBHLEVBQUF1SixHQUNBekUsRUFBQTBFLGFBQUF4SixHQUFBMEosS0FBQUMsVUFBQUosR0FHQSxRQUFBdkUsR0FBQWhGLEVBQUF5SixHQUNBLE1BQUFDLE1BQUFFLE1BQUE5RSxFQUFBMEUsYUFBQXhKLEtBQUE2SixTQUFBSixFQUFBQSxFQUFBLE9BR0EsUUFBQTlDLEdBQUEzRyxHQUNBLE1BQUE4RSxHQUFBMEUsYUFBQU0sV0FBQTlKLEdBN0JBLEdBQUFvSSxJQUNBakMsSUFBQUEsRUFDQWUsSUFBQUEsRUFDQWQsVUFBQUEsRUFDQXBCLFVBQUFBLEVBQ0EyQixPQUFBQSxFQUdBLE9BQUF5QixHQWZBL0ksUUFDQUMsT0FBQSxrQkFDQW1JLFFBQUEsZ0JBQUExQyxHQUVBQSxFQUFBckQsU0FBQSxjQ1BBLFdBQ0EsWUFPQSxTQUFBcUksS0FpQkEsUUFBQUMsR0FBQUMsRUFBQUMsRUFBQUMsRUFBQUMsSUFoQkEsR0FBQUwsSUFDQU0sU0FBQSxLQUNBaEgsWUFBQSwyQ0FDQTRHLE9BQ0F4QixRQUFBLElBQ0E2QixLQUFBLElBQ0FDLE1BQUEsS0FFQUMsS0FBQVIsRUFDQTdHLFdBQUFLLEVBQ0FKLGFBQUEsS0FDQXFILGtCQUFBLEVBR0EsT0FBQVYsR0FVQSxRQUFBdkcsR0FBQUMsRUFBQUMsR0FLQSxRQUFBRSxNQUZBQSxJQWpDQXZFLFFBQ0FDLE9BQUEsa0JBQ0F5SyxVQUFBLG9CQUFBQSxHQXlCQXZHLEVBQUE5QixTQUFBLFFBQUEsU0M5QkEsV0FDQSxZQU9BLFNBQUFxSSxLQWlCQSxRQUFBQyxHQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxJQWhCQSxHQUFBTCxJQUNBTSxTQUFBLEtBQ0FoSCxZQUFBLDJDQUNBNEcsT0FDQXhCLFFBQUEsSUFDQTZCLEtBQUEsSUFDQUMsTUFBQSxLQUVBQyxLQUFBUixFQUNBN0csV0FBQUssRUFDQUosYUFBQSxLQUNBcUgsa0JBQUEsRUFHQSxPQUFBVixHQVVBLFFBQUF2RyxHQUFBL0QsRUFBQUcsRUFBQThLLEVBQUFqSCxFQUFBQyxFQUFBaUgsR0FNQSxRQUFBL0csS0FDQStHLEVBQUF6QyxpQkFBQTFELEtBQUEsU0FBQUMsR0FDQUMsUUFBQUMsSUFBQUYsR0FDQW1HLEVBQUFuRyxFQUFBb0csZUFDQUMsTUFBQSxTQUFBcEYsR0FDQWhCLFFBQUFDLElBQUFlLEtBSUEsUUFBQWtGLEdBQUExRixHQUNBdEYsRUFBQW1MLE1BQUE3RixFQUFBLFVBQ0E4RixRQUNBQyxVQUFBLG1CQUNBQyxXQUFBLEVBQ0FDLE9BQUEsSUFDQUMsU0FBQSxNQUNBQyxPQUFBLFFBQ0FDLHVCQUFBLEdBRUFDLHdCQUFBLFNBQUFDLEdBQ0FDLEVBQUFELEVBQUFFLFFBRUFDLFFBQUEsU0FBQUMsR0FDQXpILEVBQUEwSCxTQUFBRCxLQVNBLFFBQUFILEdBQUFoSCxHQUNBQyxRQUFBQyxJQUFBRixHQXRDQSxHQUFBTixHQUFBQyxJQUNBRCxHQUFBMEgsWUFFQWpJLElBOEJBTyxFQUFBMkgsT0FBQSxXQUNBcEgsUUFBQUMsSUFBQVIsRUFBQTBILFNBQUExSCxFQUFBbUcsT0FlQUksRUFBQXFCLE9BQUEsY0FBQSxTQUFBQyxFQUFBQyxHQUNBRCxHQUVBdEgsUUFBQUMsSUFBQXFILEtBbkZBM00sUUFDQUMsT0FBQSxrQkFDQXlLLFVBQUEsb0JBQUFBLEdBeUJBdkcsRUFBQTlCLFNBQUEsSUFBQSxZQUFBLFNBQUEsUUFBQSxLQUFBLGtCQzlCQSxXQUNBLFlBT0EsU0FBQXFJLEtBa0JBLFFBQUFDLEdBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLElBakJBLEdBQUFMLElBQ0FNLFNBQUEsS0FDQWhILFlBQUEsMkNBQ0E0RyxPQUNBeEIsUUFBQSxJQUNBNkIsS0FBQSxJQUNBQyxNQUFBLElBQ0EyQixRQUFBLEtBRUExQixLQUFBUixFQUNBN0csV0FBQUssRUFDQUosYUFBQSxLQUNBcUgsa0JBQUEsRUFHQSxPQUFBVixHQVVBLFFBQUF2RyxHQUFBQyxFQUFBQyxHQUtBLFFBQUFFLE1BSkEsR0FBQU8sR0FBQUMsSUFFQVIsS0FNQU8sRUFBQWdJLFFBQUEsV0FDQWhJLEVBQUErSCxRQUFBRSxhQUFBLEdBekNBL00sUUFDQUMsT0FBQSxrQkFDQXlLLFVBQUEsb0JBQUFBLEdBMEJBdkcsRUFBQTlCLFNBQUEsUUFBQSxTQy9CQSxXQUNBLFlBUUEsU0FBQThCLEdBQUEvRCxFQUFBaUwsRUFBQTJCLEVBQUExQixHQXVDQSxRQUFBL0csS0FDQStHLEVBQUEzQyxhQUFBeEQsS0FBQSxTQUFBZSxHQUNBYixRQUFBQyxJQUFBWSxHQUNBcEIsRUFBQXNFLFFBQUE2RCxPQUFBQyxFQUFBaEgsR0FDQWIsUUFBQUMsSUFBQVIsRUFBQW1HLFFBQ0FRLE1BQUEsU0FBQXBGLEdBQ0FoQixRQUFBQyxJQUFBZSxLQUtBLFFBQUE2RyxHQUFBQyxHQUlBLEdBQUFDLEdBQUEsU0FBQUMsRUFBQUMsR0FDQSxNQUFBbE4sR0FBQW1OLFNBQUFGLEdBQ0FqTixFQUFBb04sU0FBQUgsRUFBQUMsRUFBQUYsR0FFQUMsR0FBQUMsR0FLQUcsRUFBQXJOLEVBQUFzTixZQUFBUCxFQUFBQyxHQUNBLE9BQUFoTixHQUFBb04sTUFBQUcsTUFBQXZOLEVBQUFxTixHQUlBLFFBQUFHLEdBQUFDLEVBQUFDLEdBQ0FkLEVBQUFlLE1BQ0FDLFlBQUEsRUFDQUMsWUFBQUosRUFDQUsscUJBQUEsRUFDQWxLLFlBQUEsb0NBQ0FtSyxRQUNBTCxNQUFBQSxHQUVBaEssWUFBQSxTQUFBLFFBQUEsU0FBQThHLEVBQUFrRCxHQUNBbEQsRUFBQWtELE1BQUFBLE1BTUEsUUFBQU0sS0FDQXBCLEVBQUFlLE1BQ0EvSixZQUFBLDRDQUNBa0sscUJBQUEsRUFDQUYsWUFBQSxJQXZGQSxHQUFBbEosR0FBQUMsSUFFQUQsR0FBQThJLFVBQUFBLEVBQ0E5SSxFQUFBc0osSUFBQUEsRUFDQXRKLEVBQUFvRyxNQUFBLEVBRUFwRyxFQUFBK0gsU0FDQUUsWUFBQSxHQUdBakksRUFBQXNFLFNBQ0E2RCxRQUNBb0IsV0FDQUMsU0FDQUMsb0JBQ0FDLG1CQUNBQyxZQUNBQyxPQUNBQyxZQUlBN0osRUFBQW1HLE1BQ0FxRCxTQUNBbEYsU0FDQWlGLFdBQ0FPLGVBQ0FILFlBQ0FDLE9BQ0FDLFVBQ0FFLGNBRUFDLFlBQ0FDLFNBR0F4SyxJQXVEQThHLEVBQUFxQixPQUFBLFVBQUEsU0FBQUMsRUFBQUMsR0FDQXZILFFBQUFDLElBQUFxSCxHQUVBN0gsRUFBQW9HLE1BQUF5QixFQUFBMkIsTUFBQTFILGVBQUEsT0FBQStGLEVBQUEyQixNQUFBVSxJQUFBLEVBRUE1TyxFQUFBNk8sSUFBQXRDLEVBQUF2RCxRQUFBLFNBQUE4RixHQUNBQSxFQUFBdEksZUFBQSxTQUNBOUIsRUFBQW9HLE9BQUFwRyxFQUFBb0csTUFBQWdFLEVBQUFGLEtBR0FFLEVBQUF0SSxlQUFBLGNBQ0E5QixFQUFBb0csT0FBQXBHLEVBQUFvRyxNQUFBZ0UsRUFBQUMsY0FJQSxHQWpIQW5QLFFBQ0FDLE9BQUEsa0JBQ0E2RCxXQUFBLG1CQUFBSyxHQUVBQSxFQUFBOUIsU0FBQSxJQUFBLFNBQUEsWUFBQSxrQkNQQSxXQUNBLFlBT0EsU0FBQXFJLEtBaUJBLFFBQUFDLEdBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLElBaEJBLEdBQUFMLElBQ0FNLFNBQUEsS0FDQWhILFlBQUEseUNBQ0E0RyxPQUNBeEIsUUFBQSxJQUNBNkIsS0FBQSxJQUNBQyxNQUFBLEtBRUFDLEtBQUFSLEVBQ0E3RyxXQUFBSyxFQUNBSixhQUFBLEtBQ0FxSCxrQkFBQSxFQUdBLE9BQUFWLEdBVUEsUUFBQXZHLEdBQUEvRCxFQUFBZ0UsRUFBQUMsR0FLQSxRQUFBRSxNQUpBLEdBQUFPLEdBQUFDLElBRUFSLEtBTUFPLEVBQUFzSyxrQkFBQSxXQUVBLEdBQUF0SyxFQUFBbUcsS0FBQW9FLGdCQUFBdkssRUFBQW1HLEtBQUE3QixRQUFBd0YsWUFBQWhJLGVBQUEsTUFBQSxDQUVBLEdBQUEwSSxJQUNBZixpQkFBQW5PLEVBQUFtUCxNQUFBekssRUFBQW1HLEtBQUE3QixRQUFBd0YsWUFBQVksU0FBQTFLLEVBQUFtRyxLQUFBN0IsUUFBQXdGLFlBQUFhLE1BQUEsS0FDQWpCLGdCQUFBcE8sRUFBQW1QLE1BQUF6SyxFQUFBbUcsS0FBQTdCLFFBQUF3RixZQUFBYyxLQUFBNUssRUFBQW1HLEtBQUE3QixRQUFBd0YsWUFBQWUsUUFBQSxLQUdBLE9BQUFMLEdBQUF4SyxFQUFBbUcsS0FBQW9FLGtCQUdBdkssRUFBQThLLGFBQUEsV0FDQSxHQUFBM0MsSUFDQXdCLFVBQ0F2RSxNQUFBcEYsRUFBQW1HLEtBQUE3QixRQUFBcUYsU0FDQW9CLE9BQUF6UCxFQUFBbVAsTUFBQSxZQUFBekssRUFBQW1HLEtBQUE3QixRQUFBcUYsU0FBQUEsVUFBQSxHQUFBLE1BQUEsTUFFQUMsS0FDQXhFLE1BQUFwRixFQUFBbUcsS0FBQTdCLFFBQUFzRixJQUNBbUIsT0FBQXpQLEVBQUFtUCxNQUFBLGVBQUFuUCxFQUFBbVAsS0FBQXpLLEVBQUFtRyxLQUFBN0IsUUFBQXNGLElBQUFvQixNQUFBLE1BQUEsTUFFQW5CLFFBQ0F6RSxNQUFBcEYsRUFBQW1HLEtBQUE3QixRQUFBdUYsT0FDQWtCLE9BQUF6UCxFQUFBbVAsTUFBQSxVQUFBekssRUFBQW1HLEtBQUE3QixRQUFBdUYsT0FBQUEsUUFBQSxNQUVBRSxXQUNBM0UsTUFBQXBGLEVBQUFtRyxLQUFBN0IsUUFBQXlGLFVBQ0FnQixPQUFBelAsRUFBQW1QLE1BQUEsYUFBQXpLLEVBQUFtRyxLQUFBN0IsUUFBQXlGLFVBQUFXLFVBQUEsT0FJQU8sRUFBQTNQLEVBQUE0UCxPQUFBL0MsRUFBQSxTQUFBZ0QsR0FDQSxNQUFBQSxHQUFBL0YsTUFBQXRELGVBQUEsT0FHQSxPQUFBeEcsR0FBQThQLFFBQUFILEdBQUEsR0FFQTNQLEVBQUFtUCxNQUFBLFdBQUFuUCxFQUFBNk8sSUFBQWtCLE9BQUFDLEtBQUFMLEdBQUEsU0FBQXBQLEdBQ0EsTUFBQXNNLEdBQUF0TSxHQUFBa1AsVUFDQSxLQUtBL0ssRUFBQXVMLGFBQUEsV0FDQSxNQUFBQyxTQXJGQXRRLFFBQ0FDLE9BQUEsa0JBQ0F5SyxVQUFBLGtCQUFBQSxHQXlCQXZHLEVBQUE5QixTQUFBLElBQUEsUUFBQSxTQzlCQSxXQUNBLFlBT0EsU0FBQXFJLEtBaUJBLFFBQUFDLEdBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLElBaEJBLEdBQUFMLElBQ0FNLFNBQUEsS0FDQWhILFlBQUEsMENBQ0E0RyxPQUNBeEIsUUFBQSxJQUNBNkIsS0FBQSxJQUNBQyxNQUFBLEtBRUFDLEtBQUFSLEVBQ0E3RyxXQUFBSyxFQUNBSixhQUFBLEtBQ0FxSCxrQkFBQSxFQUdBLE9BQUFWLEdBVUEsUUFBQXZHLEdBQUFvTSxFQUFBQyxFQUFBbk0sRUFBQWdILEVBQUFvRixFQUFBekgsR0F3REEsUUFBQXpFLEtBRUFGLEVBQUFxTSxLQUFBSCxFQUFBQyxFQUFBakssUUFBQSxLQUFBcEIsS0FBQSxTQUFBZ0QsR0FDQSxHQUFBOEcsR0FBQTlHLEVBQUEsR0FDQXdJLEVBQUF4SSxFQUFBLEdBQUEsR0FBQThHLEdBRUFuSyxHQUFBM0UsUUFDQXlRLFlBQUEsR0FBQTNCLEdBQUE0QixLQUFBLElBQUEsS0FDQUMsV0FBQSxXQUNBaE0sRUFBQWlNLE9BQUFoRCxNQUFBLElBSUFpRCxFQUFBLEdBQUEvQixHQUFBZ0MsT0FBQUMsb0JBQ0FDLEVBQUEsR0FBQWxDLEdBQUFrQyxrQkFDQUMsRUFBQSxHQUFBbkMsR0FBQW9DLG1CQUNBdk0sRUFBQW1LLElBQUEwQixTQUFBQSxFQUNBUyxFQUFBRSxPQUFBeE0sRUFBQW1LLElBQUEwQixVQUNBWSxFQUFBLEdBQUF0QyxHQUFBZ0MsT0FBQU8sY0FBQTFNLEVBQUFtSyxJQUFBMEIsVUFDQTdMLEVBQUEyTSxhQUFBLEVBQ0FwTSxRQUFBQyxJQUFBLFdBbURBLFFBQUFvTSxHQUFBekMsRUFBQXhILEVBQUE3QyxFQUFBK00sR0FDQXRNLFFBQUFDLElBQUFtQyxHQUNBZ0osRUFBQSxXQUNBeEIsRUFBQTJDLE1BQUEsR0FBQUMsUUFBQUMsS0FBQUMsT0FBQXRLLEVBQUF1SyxTQUFBdkssRUFBQXdLLFlBQ0FyTixHQUFBcUssRUFBQWlELE1BQUEsR0FBQSxNQUNBLEtBR0EsUUFBQUMsR0FBQWxELEVBQUFtRCxFQUFBQyxHQUNBLEdBQUFDLEdBQUFELEVBQUEsR0FDQUUsRUFBQUQsRUFBQUUsT0FBQUQsTUFDQUUsRUFBQUgsRUFBQUUsT0FBQUUsS0FDQTVOLEdBQUFpTSxRQUNBNEIsR0FBQTVJLEtBQUFDLE1BQ0F2QyxVQUNBdUssU0FBQU8sRUFDQU4sVUFBQVEsR0FFQTFFLE1BQUEsR0FFQTFDLEVBQUF1SCxTQUdBLFFBQUFDLEtBQ0F4TixRQUFBQyxJQUFBLG1CQUNBUixFQUFBbUssSUFBQTBCLFNBdkpBLEdBQUE3TCxHQUFBQyxLQUNBd00sRUFBQSxLQUNBSCxFQUFBLEtBQ0FELEVBQUEsS0FDQUgsRUFBQSxJQUVBbE0sR0FBQStILFNBQ0FpRyxXQUFBLEdBRUFoTyxFQUFBbUssS0FDQThELFFBQ0FmLFNBQUEsa0JBQ0FDLFdBQUEsa0JBRUFlLEtBQUEsR0FDQTVKLFNBQ0E2SixhQUFBLEdBRUFDLFdBQUEsRUFDQUMsa0JBQUEsRUFDQXRHLFdBQ0F1RyxRQUNBQyxNQUFBbEIsRUFDQW1CLEtBQUFULElBSUEvTixFQUFBeU8sTUFDQXRRLEtBQUEsYUFDQXVRLFFBQUEsR0FDQUMsS0FBQSxJQUdBM08sRUFBQWlNLFFBQ0E0QixHQUFBLEVBQ0FsTCxVQUNBdUssU0FBQSxrQkFDQUMsV0FBQSxrQkFFQWxFLE1BQUEsR0FHQWpKLEVBQUE0TyxTQUFBMUssRUFBQUMsT0FBQSxTQUFBVSxFQUFBeEIsR0FDQWtELEVBQUF1SCxPQUFBLFdBQ0F2TixRQUFBQyxJQUFBNkMsRUFBQXdMLFlBQ0E3TyxFQUFBK0gsUUFBQWlHLFdBQUEsS0FFQSxXQUNBekgsRUFBQXVILE9BQUEsV0FDQTlOLEVBQUErSCxRQUFBaUcsV0FBQSxNQUlBdk8sSUE0QkFPLEVBQUE4TyxZQUFBLFdBQ0F2TyxRQUFBQyxJQUFBLFNBQ0FSLEVBQUFpTSxPQUFBaEQsTUFBQWpKLEVBQUFpTSxPQUFBaEQsS0FDQTFDLEVBQUF1SCxVQUlBOU4sRUFBQStPLG9CQUFBLFNBQUFMLEdBQ0EsR0FBQTFOLEdBQUF6QixFQUFBMEIsT0FRQSxPQU5BaUwsR0FBQThDLHFCQUNBQyxNQUFBUCxHQUNBLFNBQUEvTSxHQUNBWCxFQUFBSyxRQUFBTSxFQUFBckcsRUFBQTRULE9BQUF2TixFQUFBLGtCQUdBWCxFQUFBUyxTQUdBekIsRUFBQW1QLFNBQUEsV0FDQTVPLFFBQUFDLElBQUFSLEVBQUF5TyxLQUFBVyxPQUVBcFAsRUFBQXlPLEtBQUFXLE9BRUEzQyxFQUFBNEMsWUFDQUMsUUFBQXRQLEVBQUF5TyxLQUFBVyxNQUFBRyxVQUNBLFNBQUFILEVBQUF4TixHQUNBckIsUUFBQUMsSUFBQTRPLEVBQUF4TixHQUVBNUIsRUFBQWlNLFFBQ0E0QixHQUFBNUksS0FBQUMsTUFDQS9HLEtBQUFpUixFQUFBalIsS0FDQXdFLFVBQ0F1SyxTQUFBc0MsV0FBQUosRUFBQUssU0FBQTlNLFNBQUE4SyxPQUNBTixVQUFBcUMsV0FBQUosRUFBQUssU0FBQTlNLFNBQUFpTCxRQUVBM0UsTUFBQSxHQUlBMkQsRUFBQTVNLEVBQUFtSyxJQUFBMEIsU0FBQTdMLEVBQUFpTSxPQUFBdEosU0FBQSxNQUFBLEdBQ0E0RCxFQUFBdUgsWUF6SkE1UyxRQUNBQyxPQUFBLGtCQUNBeUssVUFBQSxvQkFBQUEsR0F5QkF2RyxFQUFBOUIsU0FBQSxxQkFBQSxnQkFBQSxLQUFBLFNBQUEsV0FBQSxzQkM5QkEsV0FDQSxZQVFBLFNBQUFxUixHQUFBcFQsR0FXQSxRQUFBNkssR0FBQVAsRUFBQW5HLEVBQUErUCxHQUNBLEdBQUEzVCxHQUFBNFQsQ0FFQTVULEdBQUErSixFQUFBOEksU0FDQWUsRUFBQSxHQUFBblUsR0FBQW1FLEVBQUEsR0FBQTVELEVBQUF1SSxTQUVBd0IsRUFBQTFELE9BQ0F1TixFQUFBQyxHQUFBLFdBQUEsU0FBQS9LLEdBQ0E4SyxFQUFBRSxXQUFBaEwsS0FJQTNKLFFBQUE0VSxRQUFBL1QsRUFBQTZJLGNBQUEsU0FBQW1MLEVBQUFoUyxHQUNBNFIsRUFBQUMsR0FBQTdSLEVBQUFnUyxLQXZCQSxHQUFBbkssSUFDQVMsS0FBQUEsRUFDQUgsU0FBQSxLQUNBSixPQUNBOEksU0FBQSxZQUNBeE0sTUFBQSxVQUdBLE9BQUF3RCxHQWZBMUssUUFDQUMsT0FBQSxrQkFDQXlLLFVBQUEsV0FBQWdKLEdBRUFBLEVBQUFyUixTQUFBLGVDUEEsV0FDQSxZQU9BLFNBQUF5UyxLQUNBLEdBQUFwSyxJQUNBTSxTQUFBLEtBQ0FoSCxZQUFBLGtDQUNBRixXQUFBaVIsRUFDQWhSLGFBQUEsS0FDQXFILGtCQUFBLEVBQ0FSLFNBR0EsT0FBQUYsR0FNQSxRQUFBcUssR0FBQXRTLEdBQ0E0QyxRQUFBQyxJQUFBLFNBQ0EsSUFBQVIsR0FBQUMsSUFJQUQsR0FBQXVDLE9BQUEsV0FDQWhDLFFBQUFDLElBQUEsVUFDQTdDLEVBQUE0RSxVQTdCQXJILFFBQ0FDLE9BQUEsa0JBQ0F5SyxVQUFBLGtCQUFBb0ssR0FnQkFDLEVBQUExUyxTQUFBLFdDckJBLFdBQ0EsWUFPQSxTQUFBMlMsS0FDQSxHQUFBdEssSUFDQU0sU0FBQSxLQUNBaEgsWUFBQSxrQ0FDQUYsV0FBQW1SLEVBQ0FsUixhQUFBLEtBQ0FxSCxrQkFBQSxFQUdBLE9BQUFWLEdBTUEsUUFBQXVLLEtBS0EsUUFBQTFRLEtBQ0FjLFFBQUFDLElBQUEsb0JBSEFmLElBdkJBdkUsUUFDQUMsT0FBQSxrQkFDQXlLLFVBQUEsa0JBQUFzSyxHQWVBQyxFQUFBNVMiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbmdkb2Mgb3ZlcnZpZXdcbiAqIEBuYW1lIEFueURheUJ1ZGR5QWRzXG4gKiBAcmVxdWlyZXMgdWkucm91dGVyXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBBbmd1bGFySlMgYmFzaWMgYXBwIHRlbXBsYXRlXG4gKlxuICovXG4oZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnQW55RGF5QnVkZHlBZHMnLCBbXG4gICAgICAndWkucm91dGVyJyxcbiAgICAgICduZ01hdGVyaWFsJyxcbiAgICAgICd1aUdtYXBnb29nbGUtbWFwcycsXG4gICAgXSk7XG5cbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnQW55RGF5QnVkZHlBZHMnKVxuICAgIC5jb25zdGFudCgnXycsIHdpbmRvdy5fKVxuICAgIC5jb25zdGFudCgnalF1ZXJ5Jywgd2luZG93LmpRdWVyeSlcbiAgICAuY29uc3RhbnQoJ0Ryb3B6b25lJywgd2luZG93LkRyb3B6b25lKVxuICAgIC5jb25zdGFudCgnYnJhaW50cmVlJywgd2luZG93LmJyYWludHJlZSlcbiAgICAuY29uc3RhbnQoJ2Jhc2VBcGknLCAnaHR0cHM6Ly9hcGkuYW55ZGF5YnVkZHkuY29tJyk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdBbnlEYXlCdWRkeUFkcycpXG4gICAgLmNvbmZpZyhjb25maWcpXG4gICAgLmNvbmZpZyhtYXBzUHJvdmlkZXIpO1xuXG4gIG1hcHNQcm92aWRlci4kaW5qZWN0ID0gWyd1aUdtYXBHb29nbGVNYXBBcGlQcm92aWRlciddO1xuXG4gIGZ1bmN0aW9uIG1hcHNQcm92aWRlcih1aUdtYXBHb29nbGVNYXBBcGlQcm92aWRlcikge1xuICAgIHVpR21hcEdvb2dsZU1hcEFwaVByb3ZpZGVyLmNvbmZpZ3VyZSh7XG4gICAgICBrZXk6ICdBSXphU3lBb25GdUNEYjdIalhVejB1b2NLYkVHVUp6OTFJTDlFVnMnLCAvL2FkYi1zaXRlLTAga2V5XG4gICAgICAvLyBrZXk6ICdBSXphU3lBbFc2aHVuN1Z3cEZQdjBmeF9LT1VoNTJsMDhCUnBqWU0nLFxuICAgICAgbGlicmFyaWVzOiAncGxhY2VzJ1xuICAgIH0pO1xuICB9XG5cbiAgY29uZmlnLiRpbmplY3QgPSBbJyRtZFRoZW1pbmdQcm92aWRlcicsICckbG9jYXRpb25Qcm92aWRlciddO1xuXG4gIGZ1bmN0aW9uIGNvbmZpZygkbWRUaGVtaW5nUHJvdmlkZXIsICRsb2NhdGlvblByb3ZpZGVyKSB7XG5cbiAgICAkbWRUaGVtaW5nUHJvdmlkZXIuZGVmaW5lUGFsZXR0ZSgncHJpbWFyeScsIHtcbiAgICAgICc1MCc6ICcjOWRjZWRhJyxcbiAgICAgICcxMDAnOiAnIzY1YjJjNScsXG4gICAgICAnMjAwJzogJyM0MjlhYjAnLFxuICAgICAgJzMwMCc6ICcjMmY2ZDdjJyxcbiAgICAgICc0MDAnOiAnIzI2NTk2NicsXG4gICAgICAnNTAwJzogJyMxZTQ2NTAnLFxuICAgICAgJzYwMCc6ICcjMTYzMjNhJyxcbiAgICAgICc3MDAnOiAnIzBkMWYyMycsXG4gICAgICAnODAwJzogJyMwNTBjMGQnLFxuICAgICAgJzkwMCc6ICcjMDAwMDAwJyxcbiAgICAgICdBMTAwJzogJyM5ZGNlZGEnLFxuICAgICAgJ0EyMDAnOiAnIzY1YjJjNScsXG4gICAgICAnQTQwMCc6ICcjMjY1OTY2JyxcbiAgICAgICdBNzAwJzogJyMwZDFmMjMnLFxuICAgICAgJ2NvbnRyYXN0RGVmYXVsdENvbG9yJzogJ2xpZ2h0JyxcbiAgICAgICdjb250cmFzdERhcmtDb2xvcnMnOiAnNTAgMTAwIDIwMCBBMTAwIEEyMDAnXG4gICAgfSk7XG4gICAgJG1kVGhlbWluZ1Byb3ZpZGVyLmRlZmluZVBhbGV0dGUoJ2FjY2VudCcsIHtcbiAgICAgICc1MCc6ICcjZDBlYmVkJyxcbiAgICAgICcxMDAnOiAnIzk5ZDRkOCcsXG4gICAgICAnMjAwJzogJyM3MGMzYzgnLFxuICAgICAgJzMwMCc6ICcjNDNhN2FlJyxcbiAgICAgICc0MDAnOiAnIzNhOTI5OCcsXG4gICAgICAnNTAwJzogJyMzMjdkODInLFxuICAgICAgJzYwMCc6ICcjMjk2ODZjJyxcbiAgICAgICc3MDAnOiAnIzIxNTI1NicsXG4gICAgICAnODAwJzogJyMxODNkNDAnLFxuICAgICAgJzkwMCc6ICcjMTAyODJhJyxcbiAgICAgICdBMTAwJzogJyNkMGViZWQnLFxuICAgICAgJ0EyMDAnOiAnIzk5ZDRkOCcsXG4gICAgICAnQTQwMCc6ICcjM2E5Mjk4JyxcbiAgICAgICdBNzAwJzogJyMyMTUyNTYnLFxuICAgICAgJ2NvbnRyYXN0RGVmYXVsdENvbG9yJzogJ2xpZ2h0JyxcbiAgICAgICdjb250cmFzdERhcmtDb2xvcnMnOiAnNTAgMTAwIDIwMCAzMDAgQTEwMCBBMjAwJ1xuICAgIH0pO1xuICAgICRtZFRoZW1pbmdQcm92aWRlci5kZWZpbmVQYWxldHRlKCd3YXJuJywge1xuICAgICAgJzUwJzogJyNmYWVlZTYnLFxuICAgICAgJzEwMCc6ICcjZWNjM2E3JyxcbiAgICAgICcyMDAnOiAnI2UyYTM3OScsXG4gICAgICAnMzAwJzogJyNkNTdiM2UnLFxuICAgICAgJzQwMCc6ICcjYzk2YjJiJyxcbiAgICAgICc1MDAnOiAnI2IwNWUyNicsXG4gICAgICAnNjAwJzogJyM5NzUxMjEnLFxuICAgICAgJzcwMCc6ICcjN2U0MzFiJyxcbiAgICAgICc4MDAnOiAnIzY0MzYxNicsXG4gICAgICAnOTAwJzogJyM0YjI4MTAnLFxuICAgICAgJ0ExMDAnOiAnI2ZhZWVlNicsXG4gICAgICAnQTIwMCc6ICcjZWNjM2E3JyxcbiAgICAgICdBNDAwJzogJyNjOTZiMmInLFxuICAgICAgJ0E3MDAnOiAnIzdlNDMxYicsXG4gICAgICAnY29udHJhc3REZWZhdWx0Q29sb3InOiAnbGlnaHQnLFxuICAgICAgJ2NvbnRyYXN0RGFya0NvbG9ycyc6ICc1MCAxMDAgMjAwIDMwMCBBMTAwIEEyMDAnXG4gICAgfSk7XG4gICAgJG1kVGhlbWluZ1Byb3ZpZGVyLnRoZW1lKCdkZWZhdWx0JylcbiAgICAgIC5wcmltYXJ5UGFsZXR0ZSgncHJpbWFyeScpXG4gICAgICAuYWNjZW50UGFsZXR0ZSgnYWNjZW50JylcbiAgICAgIC53YXJuUGFsZXR0ZSgnd2FybicpO1xuICB9XG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ0FueURheUJ1ZGR5QWRzJylcbiAgICAucnVuKHJ1blByb3ZpZGVyKTtcblxuICBydW5Qcm92aWRlci4kaW5qZWN0ID0gWyckcm9vdFNjb3BlJywgJyRzdGF0ZScsICdBdXRoJ107XG5cbiAgZnVuY3Rpb24gcnVuUHJvdmlkZXIoJHJvb3RTY29wZSwgJHN0YXRlLCBBdXRoKSB7XG4gICAgJHJvb3RTY29wZS4kc3RhdGUgPSAkc3RhdGU7XG4gICAgJHJvb3RTY29wZS51c2VyID0gQXV0aC5nZXRVc2VyKCk7XG5cbiAgICAkcm9vdFNjb3BlLiRvbignJHN0YXRlQ2hhbmdlU3RhcnQnLCBmdW5jdGlvbihldmVudCwgdG9TdGF0ZSkge1xuICAgICAgJHJvb3RTY29wZS5maWxsID0gWydsb2dpbicsICdkYXNoYm9hcmQnLCAnZGFzaGJvYXJkLmNhbXBhaWducyddLmluZGV4T2YodG9TdGF0ZS5uYW1lKSAhPT0gLTE7XG5cbiAgICAgIC8qKlxuICAgICAgICogaWYgdGhlIHN0YXRlIHJlcXVpcmVzIGF1dGhlbnRpY2F0aW9uIGFuZCB0aGVcbiAgICAgICAqIHVzZXIgaXMgbm90IGxvZ2dlZCBpbiwgcmVkaXJlY3QgdG8gdGhlIGxvZ2luIHBhZ2UuXG4gICAgICAgKi9cbiAgICAgIGlmICh0b1N0YXRlLmF1dGhlbnRpY2F0ZSAmJiAhQXV0aC5pc0F1dGhlbnRpY2F0ZWQoKSkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAkc3RhdGUudHJhbnNpdGlvblRvKCdsb2dpbicpO1xuICAgICAgfVxuXG4gICAgfSk7XG4gIH1cbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnQW55RGF5QnVkZHlBZHMnKVxuICAgIC5jb25maWcocm91dGVyUHJvdmlkZXIpO1xuXG4gIHJvdXRlclByb3ZpZGVyLiRpbmplY3QgPSBbJyRzdGF0ZVByb3ZpZGVyJywgJyR1cmxSb3V0ZXJQcm92aWRlcicsICckbG9jYXRpb25Qcm92aWRlciddO1xuXG4gIGZ1bmN0aW9uIHJvdXRlclByb3ZpZGVyKCRzdGF0ZVByb3ZpZGVyLCAkdXJsUm91dGVyUHJvdmlkZXIsICRsb2NhdGlvblByb3ZpZGVyKSB7XG4gICAgLy8gJGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlKHtcbiAgICAvLyAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLy8gICByZXF1aXJlQmFzZTogZmFsc2VcbiAgICAvLyB9KTtcbiAgICAvL1xuICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAuc3RhdGUoJ2hvbWUnLCB7XG4gICAgICAgIHVybDogJy8nLFxuICAgICAgICB2aWV3czoge1xuICAgICAgICAgICdtYWluJzoge1xuICAgICAgICAgICAgY29udHJvbGxlcjogJ0hvbWVDb250cm9sbGVyJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXNzZXRzL3ZpZXdzL2hvbWUuaHRtbCdcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGF1dGhlbnRpY2F0ZTogZmFsc2VcbiAgICAgIH0pXG4gICAgICAuc3RhdGUoJ2Rhc2hib2FyZCcsIHtcbiAgICAgICAgdXJsOiAnL2Rhc2hib2FyZCcsXG4gICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgJ21haW4nOiB7XG4gICAgICAgICAgICBjb250cm9sbGVyOiAnRGFzaGJvYXJkQ29udHJvbGxlcicsXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2Fzc2V0cy92aWV3cy9kYXNoYm9hcmQvaW5kZXguaHRtbCdcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGF1dGhlbnRpY2F0ZTogdHJ1ZVxuICAgICAgfSlcbiAgICAgIC5zdGF0ZSgnZGFzaGJvYXJkLmNhbXBhaWducycsIHtcbiAgICAgICAgdXJsOiAnL2NhbXBhaWducycsXG4gICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgJ2Rhc2hib2FyZCc6IHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdEYXNoYm9hcmRDb250cm9sbGVyJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXNzZXRzL3ZpZXdzL2Rhc2hib2FyZC9jYW1wYWlnbnMuaHRtbCdcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGF1dGhlbnRpY2F0ZTogdHJ1ZVxuICAgICAgfSlcbiAgICAgIC5zdGF0ZSgnb3JkZXJzJywge1xuICAgICAgICB1cmw6ICcvb3JkZXJzJyxcbiAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAnbWFpbic6IHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdPcmRlcnNDb250cm9sbGVyJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXNzZXRzL3ZpZXdzL29yZGVycy5odG1sJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgYXV0aGVudGljYXRlOiBmYWxzZVxuICAgICAgfSlcbiAgICAgIC5zdGF0ZSgnbG9naW4nLCB7XG4gICAgICAgIHVybDogJy9sb2dpbicsXG4gICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgJ21haW4nOiB7XG4gICAgICAgICAgICBjb250cm9sbGVyOiAnTG9naW5Db250cm9sbGVyJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXNzZXRzL3ZpZXdzL2xvZ2luLmh0bWwnXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBhdXRoZW50aWNhdGU6IGZhbHNlXG4gICAgICB9KTtcblxuICAgICR1cmxSb3V0ZXJQcm92aWRlci5vdGhlcndpc2UoJy8nKTtcbiAgfVxuXG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ0FueURheUJ1ZGR5QWRzJylcbiAgICAuY29udHJvbGxlcignRGFzaGJvYXJkQ29udHJvbGxlcicsIENvbnRyb2xsZXIpO1xuXG4gIGZ1bmN0aW9uIENvbnRyb2xsZXIoJGh0dHAsICRxKSB7XG4gICAgdmFyIHZtID0gdGhpcztcblxuICAgIC8vLy8vLy8vLy8vLy8vLy9cblxuICB9XG4gIFxufSkoKTtcbiIsIi8qKlxuICogQG5nZG9jIGNvbnRyb2xsZXJcbiAqIEBuYW1lIEhvbWVDb250cm9sbGVyXG4gKiBAcmVxdWlyZXMgJHJvb3RTY29wZVxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogTWFuZWphIGVsIGNvbXBvcnRhbWllbnRvIGRlIGxhIHZpc3RhIHByaW5jaXBhbFxuICpcbiAqL1xuXG4oZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnQW55RGF5QnVkZHlBZHMnKVxuICAgIC5jb250cm9sbGVyKCdIb21lQ29udHJvbGxlcicsIEhvbWVDb250cm9sbGVyKTtcblxuICBIb21lQ29udHJvbGxlci4kaW5qZWN0ID0gWyckcm9vdFNjb3BlJywgJ2pRdWVyeSddO1xuXG4gIC8qIEBuZ0luamVjdCAqL1xuICBmdW5jdGlvbiBIb21lQ29udHJvbGxlcigkcm9vdFNjb3BlLCBqUXVlcnkpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZtLnRpdGxlID0gJ0hvbWUgQ29udHJvbGxlcic7XG4gICAgdm0uc2Nyb2xsVG8gPSBzY3JvbGxUbztcbiAgICBhY3RpdmF0ZSgpO1xuXG4gICAgLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7fVxuXG4gICAgZnVuY3Rpb24gc2Nyb2xsVG8oZWxlbWVudCkge1xuICAgICAgalF1ZXJ5KCdodG1sLCBib2R5JykuYW5pbWF0ZSh7XG4gICAgICAgIHNjcm9sbFRvcDogalF1ZXJ5KGVsZW1lbnQpLm9mZnNldCgpLnRvcFxuICAgICAgfSwgMTAwMCk7XG4gICAgfVxuICB9XG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ0FueURheUJ1ZGR5QWRzJylcbiAgICAuY29udHJvbGxlcignTG9naW5Db250cm9sbGVyJywgTG9naW5Db250cm9sbGVyKTtcblxuICBMb2dpbkNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHN0YXRlJywgJ0F1dGgnXTtcblxuICBmdW5jdGlvbiBMb2dpbkNvbnRyb2xsZXIoJHN0YXRlLCBBdXRoKSB7XG4gICAgdmFyIHZtID0gdGhpcztcblxuICAgIC8vLy8vLy8vLy8vLy8vLy9cblxuICAgIHZtLmxvZ2luID0gZnVuY3Rpb24oKSB7XG4gICAgICBBdXRoLmxvZ2luKHZtLnVzZXIpLnRoZW4oZnVuY3Rpb24ocmVzKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKHJlcyk7XG4gICAgICAgICRzdGF0ZS5nbygnZGFzaGJvYXJkLmNhbXBhaWducycpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICB9XG5cbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnQW55RGF5QnVkZHlBZHMnKVxuICAgIC5mYWN0b3J5KCdBdXRoJywgQXV0aClcbiAgICAuZmFjdG9yeSgnQXV0aEludGVyY2VwdG9yJywgQXV0aEludGVyY2VwdG9yKVxuICAgIC5jb25maWcoZnVuY3Rpb24oJGh0dHBQcm92aWRlcikge1xuICAgICAgJGh0dHBQcm92aWRlci5pbnRlcmNlcHRvcnMucHVzaCgnQXV0aEludGVyY2VwdG9yJyk7XG4gICAgICAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLndpdGhDcmVkZW50aWFscyA9IHRydWU7XG4gICAgfSk7XG5cbiAgQXV0aC4kaW5qZWN0ID0gW1xuICAgICdiYXNlQXBpJyxcbiAgICAnJHdpbmRvdycsXG4gICAgJyRodHRwJyxcbiAgICAnJHEnLFxuICAgICckc3RhdGUnLFxuICAgICckcm9vdFNjb3BlJyxcbiAgICAnJGxvY2Fsc3RvcmFnZSdcbiAgXTtcblxuICBmdW5jdGlvbiBBdXRoKGJhc2VBcGksICR3aW5kb3csICRodHRwLCAkcSwgJHN0YXRlLCAkcm9vdFNjb3BlLCAkbG9jYWxzdG9yYWdlKSB7XG5cbiAgICB2YXIgQXV0aCA9IHtcbiAgICAgIGdldFVzZXI6IGdldFVzZXIsXG4gICAgICB2YWxpZGF0ZTogdmFsaWRhdGUsXG4gICAgICBpc0F1dGhlbnRpY2F0ZWQ6IGlzQXV0aGVudGljYXRlZCxcbiAgICAgIGxvZ2luOiBsb2dpbixcbiAgICAgIGxvZ291dDogbG9nb3V0LFxuICAgICAgcmVnaXN0ZXI6IHJlZ2lzdGVyLFxuICAgICAgZm9yZ290OiBmb3Jnb3QsXG4gICAgICByZXNldDogcmVzZXQsXG4gICAgICBzZXRDcmVkZW50aWFsczogc2V0Q3JlZGVudGlhbHMsXG4gICAgfTtcblxuICAgIHJldHVybiBBdXRoO1xuXG4gICAgLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgZnVuY3Rpb24gZ2V0VXNlcigpIHtcbiAgICAgIHJldHVybiAkbG9jYWxzdG9yYWdlLmdldE9iamVjdCgndXNlcicsIG51bGwpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHRva2VuKSB7XG4gICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuICAgICAgJGh0dHAucG9zdChiYXNlQXBpICsgJy9hdXRoL3ZhbGlkYXRlLycgKyB0b2tlbilcbiAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24ocmVzcCkge1xuICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUocmVzcCk7XG4gICAgICAgIH0pXG4gICAgICAgIC5lcnJvcihmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoZXJyKTtcbiAgICAgICAgfSk7XG4gICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBbbG9naW4gZGVzY3JpcHRpb25dXG4gICAgICogQG1ldGhvZCBsb2dpblxuICAgICAqIEByZXR1cm4ge1t0eXBlXX0gW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxvZ2luKGNyZWRlbnRpYWxzKSB7XG4gICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuXG4gICAgICAkaHR0cC5wb3N0KGJhc2VBcGkgKyAnL2F1dGgvbG9naW4nLCBjcmVkZW50aWFscylcbiAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcbiAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKGRhdGEpO1xuXG4gICAgICAgICAgaWYgKGRhdGEuaGFzT3duUHJvcGVydHkoJ3Rva2VuJykpIHtcbiAgICAgICAgICAgIGFuZ3VsYXIuY29weShkYXRhLnVzZXIsICRyb290U2NvcGUudXNlcik7XG4gICAgICAgICAgICAkbG9jYWxzdG9yYWdlLnNldCgnYWNjZXNzX3Rva2VuJywgZGF0YS50b2tlbik7XG4gICAgICAgICAgICAkbG9jYWxzdG9yYWdlLnNldE9iamVjdCgndXNlcicsIGRhdGEudXNlcik7XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAuZXJyb3IoZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgZGVmZXJyZWQucmVqZWN0KGVycik7XG4gICAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBbcmVnaXN0ZXIgZGVzY3JpcHRpb25dXG4gICAgICogQG1ldGhvZCByZWdpc3RlclxuICAgICAqIEByZXR1cm4ge1t0eXBlXX0gW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlZ2lzdGVyKHBheWxvYWQpIHtcblxuICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcblxuICAgICAgJGh0dHAucG9zdChiYXNlQXBpICsgJy9hdXRoL3JlZ2lzdGVyJywgcGF5bG9hZClcbiAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcbiAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKGRhdGEpO1xuICAgICAgICB9KVxuICAgICAgICAuZXJyb3IoZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgZGVmZXJyZWQucmVqZWN0KGVycik7XG4gICAgICAgIH0pO1xuICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBbcmVnaXN0ZXIgZGVzY3JpcHRpb25dXG4gICAgICogQG1ldGhvZCByZXNldFxuICAgICAqIEByZXR1cm4ge1t0eXBlXX0gW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlc2V0KHRva2VuLCBwYXJhbXMpIHtcbiAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAgICRodHRwLnBvc3QoYmFzZUFwaSArICcvYXV0aC9yZXNldHBhc3N3b3JkLycgKyB0b2tlbiwgcGFyYW1zKVxuICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xuICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoZGF0YSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5lcnJvcihmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoZXJyKTtcbiAgICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFtyZWdpc3RlciBkZXNjcmlwdGlvbl1cbiAgICAgKiBAbWV0aG9kIGZvcmdvdFxuICAgICAqIEByZXR1cm4ge1t0eXBlXX0gW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvcmdvdChwYXlsb2FkKSB7XG4gICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuXG4gICAgICAkaHR0cC5wb3N0KGJhc2VBcGkgKyAnL2F1dGgvcmVzZXRQYXNzd29yZFJlcXVlc3QnLCBwYXlsb2FkKVxuICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xuICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoZGF0YSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5lcnJvcihmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoZXJyKTtcbiAgICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFtsb2dvdXQgZGVzY3JpcHRpb25dXG4gICAgICogQG1ldGhvZCBsb2dvdXRcbiAgICAgKiBAcmV0dXJuIHtbdHlwZV19IFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsb2dvdXQoKSB7XG4gICAgICAkbG9jYWxzdG9yYWdlLnJlbW92ZSgndXNlcicpO1xuICAgICAgJGxvY2Fsc3RvcmFnZS5yZW1vdmUoJ2FjY2Vzc190b2tlbicpO1xuICAgICAgJGxvY2Fsc3RvcmFnZS5yZW1vdmUoJ29yaWdpbmFsX3VzZXInKTtcblxuICAgICAgJHJvb3RTY29wZS5pc0F1dGhlbnRpY2F0ZWQgPSBmYWxzZTtcbiAgICAgICRyb290U2NvcGUudXNlciA9IG51bGw7XG4gICAgICAkcm9vdFNjb3BlLnZpZXcgPSAnYXV0aCc7XG4gICAgICAkcm9vdFNjb3BlLmN1cnJlbnRTdGF0ZSA9ICdsb2dpbic7XG4gICAgICAkd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFtzZXRDcmVkZW50aWFscyBkZXNjcmlwdGlvbl1cbiAgICAgKiBAbWV0aG9kIGF1dGhlbnRpY2F0ZVxuICAgICAqIEBwYXJhbSAge1t0eXBlXX0gICAgIHVzZXIgW2Rlc2NyaXB0aW9uXVxuICAgICAqIEByZXR1cm4ge1t0eXBlXX0gICAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldENyZWRlbnRpYWxzKGRhdGEsIGZvcmNlKSB7XG4gICAgICBpZiAoZGF0YS5oYXNPd25Qcm9wZXJ0eSgndG9rZW4nKSkge1xuICAgICAgICBpZiAoZm9yY2UgfHwgISRsb2NhbHN0b3JhZ2UuZ2V0KCdhY2Nlc3NfdG9rZW4nKSkge1xuICAgICAgICAgICRsb2NhbHN0b3JhZ2Uuc2V0KCdhY2Nlc3NfdG9rZW4nLCBkYXRhLnRva2VuKTtcbiAgICAgICAgfVxuICAgICAgICAkcm9vdFNjb3BlLnVzZXIgPSBkYXRhLnVzZXI7XG4gICAgICAgICRsb2NhbHN0b3JhZ2Uuc2V0T2JqZWN0KCd1c2VyJywgZGF0YS51c2VyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdCYWQgRGF0ZScsIGRhdGEpO1xuICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogW2lzQXV0aGVudGljYXRlZCBkZXNjcmlwdGlvbl1cbiAgICAgKiBAbWV0aG9kIGlzQXV0aGVudGljYXRlZFxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59ICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0F1dGhlbnRpY2F0ZWQoKSB7XG4gICAgICByZXR1cm4gJGxvY2Fsc3RvcmFnZS5nZXQoJ2FjY2Vzc190b2tlbicpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBbQXV0aEludGVyY2VwdG9yIGRlc2NyaXB0aW9uXVxuICAgKiBAbWV0aG9kIEF1dGhJbnRlcmNlcHRvclxuICAgKi9cbiAgZnVuY3Rpb24gQXV0aEludGVyY2VwdG9yKCRxLCAkbG9jYWxzdG9yYWdlLCAkaW5qZWN0b3IpIHtcblxuICAgIHZhciBBdXRoSW50ZXJjZXB0b3IgPSB7XG4gICAgICByZXF1ZXN0OiByZXF1ZXN0LFxuICAgICAgcmVzcG9uc2VFcnJvcjogcmVzcG9uc2VFcnJvclxuICAgIH07XG5cbiAgICByZXR1cm4gQXV0aEludGVyY2VwdG9yO1xuXG4gICAgZnVuY3Rpb24gcmVxdWVzdChjb25maWcpIHtcblxuICAgICAgdmFyIHRva2VuO1xuICAgICAgaWYgKCRsb2NhbHN0b3JhZ2UuZ2V0KCdhY2Nlc3NfdG9rZW4nKSkge1xuICAgICAgICB0b2tlbiA9ICRsb2NhbHN0b3JhZ2UuZ2V0KCdhY2Nlc3NfdG9rZW4nKTtcbiAgICAgIH1cbiAgICAgIGlmICh0b2tlbikge1xuICAgICAgICBjb25maWcuaGVhZGVycy5BdXRob3JpemF0aW9uID0gJ0JlYXJlciAnICsgdG9rZW47XG4gICAgICB9XG4gICAgICByZXR1cm4gY29uZmlnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlc3BvbnNlRXJyb3IocmVzcG9uc2UpIHtcbiAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDQwMSB8fCByZXNwb25zZS5zdGF0dXMgPT09IDQwMykge1xuICAgICAgICAkbG9jYWxzdG9yYWdlLnJlbW92ZSgnYWNjZXNzX3Rva2VuJyk7XG4gICAgICAgICRpbmplY3Rvci5nZXQoJyRzdGF0ZScpLmdvKCdsb2dpbicpO1xuICAgICAgfVxuICAgICAgcmV0dXJuICRxLnJlamVjdChyZXNwb25zZSk7XG4gICAgfVxuXG4gIH1cbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnQW55RGF5QnVkZHlBZHMnKVxuICAgIC5zZXJ2aWNlKCdEYXRhU2VydmljZScsIGRhdGFTZXJ2aWNlKTtcblxuICBkYXRhU2VydmljZS4kaW5qZWN0ID0gWyckaHR0cCcsICckcScsICdiYXNlQXBpJ107XG5cbiAgLyogQG5nSW5qZWN0ICovXG4gIGZ1bmN0aW9uIGRhdGFTZXJ2aWNlKCRodHRwLCAkcSwgYmFzZUFwaSkge1xuICAgIHZhciBkYXRhU2VydmljZSA9IHtcbiAgICAgIGdldE9wdGlvbnM6IGdldE9wdGlvbnMsXG4gICAgICBnZXRDbGllbnRUb2tlbiA6IGdldENsaWVudFRva2VuLFxuICAgICAgY3JlYXRlQ2FtcGFpZ246IGNyZWF0ZUNhbXBhaWduXG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGFTZXJ2aWNlO1xuXG4gICAgZnVuY3Rpb24gZ2V0T3B0aW9ucygpIHtcbiAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAgICRodHRwKHtcbiAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgdXJsOiBiYXNlQXBpICsgJy9jYW1wYWlnbi9vcHRpb25zLydcbiAgICAgIH0pLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcbiAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShkYXRhKTtcbiAgICAgIH0pLmVycm9yKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgZGVmZXJyZWQucmVqZWN0KGVycik7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Q2xpZW50VG9rZW4oKSB7XG4gICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuXG4gICAgICAkaHR0cCh7XG4gICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgIHVybDogJ2h0dHA6Ly9sb2NhbGhvc3Q6MTMzOC9jb21tZXJjZS9jbGllbnRUb2tlbi8nXG4gICAgICB9KS5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XG4gICAgICAgIGRlZmVycmVkLnJlc29sdmUoZGF0YSk7XG4gICAgICB9KS5lcnJvcihmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGRlZmVycmVkLnJlamVjdChlcnIpO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gY3JlYXRlQ2FtcGFpZ24ocGF5bG9hZCkge1xuICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcbiAgICAgICRodHRwLnBvc3QoJ2h0dHA6Ly9sb2NhbGhvc3Q6MTMzOC9jYW1wYWlnbi9jcmVhdGUvJywgcGF5bG9hZClcbiAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoZGF0YSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5lcnJvcihmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoZXJyKTtcbiAgICAgICAgfSk7XG4gICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICB9XG5cblxuXG5cblxuICB9XG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ0FueURheUJ1ZGR5QWRzJylcbiAgICAuc2VydmljZSgnRHJvcHpvbmVTZXJ2aWNlJywgRHJvcHpvbmVTZXJ2aWNlKTtcblxuXG4gIGZ1bmN0aW9uIERyb3B6b25lU2VydmljZSgpIHtcbiAgICB2YXIgc2VydmljZSA9IHtcbiAgICAgIGNyZWF0ZTogY3JlYXRlLFxuICAgICAgY3JlYXRlTXVsdGlwbGU6IGNyZWF0ZU11bHRpcGxlXG4gICAgfTtcblxuICAgIHJldHVybiBzZXJ2aWNlO1xuXG4gICAgZnVuY3Rpb24gY3JlYXRlKHN1Y2Nlc3MsIHNlbmRpbmcsIHJlbW92ZWRmaWxlKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgdXJsOiAnaHR0cHM6Ly9hcGkuY2xvdWRpbmFyeS5jb20vdjFfMS9jbG91ZDkvaW1hZ2UvdXBsb2FkJyxcbiAgICAgICAgICB1cGxvYWRNdWx0aXBsZTogZmFsc2UsXG4gICAgICAgICAgbWF4RmlsZXM6IDEsXG4gICAgICAgICAgYWNjZXB0ZWRGaWxlczogJ2ltYWdlLyonLFxuICAgICAgICAgIGRpY3REZWZhdWx0TWVzc2FnZTogJ0Ryb3AgZmlsZSBvciBjbGljayBoZXJlIHRvIHVwbG9hZCcsXG4gICAgICAgICAgYWRkUmVtb3ZlTGlua3M6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgZXZlbnRIYW5kbGVyczoge1xuICAgICAgICAgIHNlbmRpbmc6IGZ1bmN0aW9uKGZpbGUsIHhociwgZm9ybURhdGEpIHtcbiAgICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZCgnYXBpX2tleScsIDgzOTk4ODMzMzE1MzU2Nyk7XG4gICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ3RpbWVzdGFtcCcsIERhdGUubm93KCkgLyAxMDAwIHwgMCk7XG4gICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ3VwbG9hZF9wcmVzZXQnLCAnc20yZXY0bnUnKTtcbiAgICAgICAgICAgIGlmIChzZW5kaW5nKSBzZW5kaW5nKCk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzdWNjZXNzOiBzdWNjZXNzLFxuICAgICAgICAgIHJlbW92ZWRmaWxlOiByZW1vdmVkZmlsZVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZU11bHRpcGxlKG1heEZpbGVzLCBzdWNjZXNzLCBzZW5kaW5nKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgdXJsOiAnaHR0cHM6Ly9hcGkuY2xvdWRpbmFyeS5jb20vdjFfMS9jbG91ZDkvaW1hZ2UvdXBsb2FkJyxcbiAgICAgICAgICBtYXhGaWxlczogbWF4RmlsZXMsXG4gICAgICAgICAgYWNjZXB0ZWRGaWxlczogJ2ltYWdlLyonLFxuICAgICAgICAgIGRpY3REZWZhdWx0TWVzc2FnZTogJ0Ryb3AgZmlsZXMgb3IgY2xpY2sgaGVyZSB0byB1cGxvYWQnXG4gICAgICAgIH0sXG4gICAgICAgIGV2ZW50SGFuZGxlcnM6IHtcbiAgICAgICAgICBzZW5kaW5nOiBmdW5jdGlvbihmaWxlLCB4aHIsIGZvcm1EYXRhKSB7XG4gICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ2FwaV9rZXknLCA4Mzk5ODgzMzMxNTM1NjcpO1xuICAgICAgICAgICAgZm9ybURhdGEuYXBwZW5kKCd0aW1lc3RhbXAnLCBEYXRlLm5vdygpIC8gMTAwMCB8IDApO1xuICAgICAgICAgICAgZm9ybURhdGEuYXBwZW5kKCd1cGxvYWRfcHJlc2V0JywgJ3NtMmV2NG51Jyk7XG4gICAgICAgICAgICBpZiAoc2VuZGluZykgc2VuZGluZygpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc3VjY2Vzczogc3VjY2Vzc1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ0FueURheUJ1ZGR5QWRzJylcbiAgICAuZmFjdG9yeSgnJGxvY2Fsc3RvcmFnZScsICRsb2NhbHN0b3JhZ2UpO1xuXG4gICRsb2NhbHN0b3JhZ2UuJGluamVjdCA9IFsnJHdpbmRvdyddO1xuXG4gIGZ1bmN0aW9uICRsb2NhbHN0b3JhZ2UoJHdpbmRvdykge1xuICAgIHZhciBzZXJ2aWNlID0ge1xuICAgICAgc2V0OiBzZXQsXG4gICAgICBnZXQ6IGdldCxcbiAgICAgIHNldE9iamVjdDogc2V0T2JqZWN0LFxuICAgICAgZ2V0T2JqZWN0OiBnZXRPYmplY3QsXG4gICAgICByZW1vdmU6IHJlbW92ZVxuICAgIH07XG5cbiAgICByZXR1cm4gc2VydmljZTtcblxuICAgIC8vLy8vLy8vLy9cblxuICAgIGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgICAkd2luZG93LmxvY2FsU3RvcmFnZVtrZXldID0gdmFsdWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0KGtleSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICByZXR1cm4gJHdpbmRvdy5sb2NhbFN0b3JhZ2Vba2V5XSB8fCBkZWZhdWx0VmFsdWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0T2JqZWN0KGtleSwgdmFsdWUpIHtcbiAgICAgICR3aW5kb3cubG9jYWxTdG9yYWdlW2tleV0gPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0T2JqZWN0KGtleSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICByZXR1cm4gSlNPTi5wYXJzZSgkd2luZG93LmxvY2FsU3RvcmFnZVtrZXldIHx8IChkZWZhdWx0VmFsdWUgIT09IHVuZGVmaW5lZCA/IGRlZmF1bHRWYWx1ZSA6ICd7fScpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW1vdmUoa2V5KSB7XG4gICAgICByZXR1cm4gJHdpbmRvdy5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpO1xuICAgIH1cbiAgfVxufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdBbnlEYXlCdWRkeUFkcycpXG4gICAgLmRpcmVjdGl2ZSgnYWRiT3JkZXJzQ2FtcGFpZ24nLCBkaXJlY3RpdmUpO1xuXG4gIC8qIEBuZ0luamVjdCAqL1xuICBmdW5jdGlvbiBkaXJlY3RpdmUoKSB7XG4gICAgdmFyIGRpcmVjdGl2ZSA9IHtcbiAgICAgIHJlc3RyaWN0OiAnRUEnLFxuICAgICAgdGVtcGxhdGVVcmw6ICdhc3NldHMvdmlld3Mvb3JkZXJzL29yZGVycy5jYW1wYWlnbi5odG1sJyxcbiAgICAgIHNjb3BlOiB7XG4gICAgICAgIG9wdGlvbnM6ICc9JyxcbiAgICAgICAgZm9ybTogJz0nLFxuICAgICAgICB0b3RhbDogJz0nXG4gICAgICB9LFxuICAgICAgbGluazogbGlua0Z1bmMsXG4gICAgICBjb250cm9sbGVyOiBDb250cm9sbGVyLFxuICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuICAgIH07XG5cbiAgICByZXR1cm4gZGlyZWN0aXZlO1xuXG4gICAgZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG5cbiAgICB9XG4gIH1cblxuICBDb250cm9sbGVyLiRpbmplY3QgPSBbJyRodHRwJywgJyRxJ107XG5cbiAgLyogQG5nSW5qZWN0ICovXG4gIGZ1bmN0aW9uIENvbnRyb2xsZXIoJGh0dHAsICRxKSB7XG4gICAgdmFyIHZtID0gdGhpcztcblxuICAgIGFjdGl2YXRlKCk7XG5cbiAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcblxuICAgIH1cbiAgICBcbiAgfVxufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdBbnlEYXlCdWRkeUFkcycpXG4gICAgLmRpcmVjdGl2ZSgnYWRiT3JkZXJzQ2hlY2tvdXQnLCBkaXJlY3RpdmUpO1xuXG4gIC8qIEBuZ0luamVjdCAqL1xuICBmdW5jdGlvbiBkaXJlY3RpdmUoKSB7XG4gICAgdmFyIGRpcmVjdGl2ZSA9IHtcbiAgICAgIHJlc3RyaWN0OiAnRUEnLFxuICAgICAgdGVtcGxhdGVVcmw6ICdhc3NldHMvdmlld3Mvb3JkZXJzL29yZGVycy5jaGVja291dC5odG1sJyxcbiAgICAgIHNjb3BlOiB7XG4gICAgICAgIG9wdGlvbnM6ICc9JyxcbiAgICAgICAgZm9ybTogJz0nLFxuICAgICAgICB0b3RhbDogJz0nXG4gICAgICB9LFxuICAgICAgbGluazogbGlua0Z1bmMsXG4gICAgICBjb250cm9sbGVyOiBDb250cm9sbGVyLFxuICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuICAgIH07XG5cbiAgICByZXR1cm4gZGlyZWN0aXZlO1xuXG4gICAgZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG5cbiAgICB9XG4gIH1cblxuICBDb250cm9sbGVyLiRpbmplY3QgPSBbJ18nLCAnYnJhaW50cmVlJywgJyRzY29wZScsJyRodHRwJywgJyRxJywgJ0RhdGFTZXJ2aWNlJ107XG5cbiAgLyogQG5nSW5qZWN0ICovXG4gIGZ1bmN0aW9uIENvbnRyb2xsZXIoXywgYnJhaW50cmVlLCAkc2NvcGUsICRodHRwLCAkcSwgRGF0YVNlcnZpY2UpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZtLmNoZWNrb3V0ID0ge307XG5cbiAgICBhY3RpdmF0ZSgpO1xuXG4gICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XG4gICAgICBEYXRhU2VydmljZS5nZXRDbGllbnRUb2tlbigpLnRoZW4oZnVuY3Rpb24ocmVzKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKHJlcyk7XG4gICAgICAgIHNldHVwR2F0ZXdheShyZXMuY2xpZW50VG9rZW4pO1xuICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICB9KVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldHVwR2F0ZXdheSh0b2tlbikge1xuICAgICAgYnJhaW50cmVlLnNldHVwKHRva2VuLCAnY3VzdG9tJywge1xuICAgICAgICBwYXlwYWw6IHtcbiAgICAgICAgICBjb250YWluZXI6ICdwYXlwYWwtY29udGFpbmVyJyxcbiAgICAgICAgICBzaW5nbGVVc2U6IHRydWUsXG4gICAgICAgICAgYW1vdW50OiAnMCcsXG4gICAgICAgICAgY3VycmVuY3k6ICdVU0QnLFxuICAgICAgICAgIGxvY2FsZTogJ2VuX3VzJyxcbiAgICAgICAgICBlbmFibGVTaGlwcGluZ0FkZHJlc3M6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIG9uUGF5bWVudE1ldGhvZFJlY2VpdmVkOiBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgICBkb1NvbWV0aGluZ1dpdGhUaGVOb25jZShvYmoubm9uY2UpO1xuICAgICAgICB9LFxuICAgICAgICBvblJlYWR5OiBmdW5jdGlvbihpbnRlZ3JhdGlvbikge1xuICAgICAgICAgIHZtLmNoZWNrb3V0ID0gaW50ZWdyYXRpb247XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHZtLmxhdW5jaCA9IGZ1bmN0aW9uKCkge1xuICAgICAgY29uc29sZS5sb2codm0uY2hlY2tvdXQsIHZtLmZvcm0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRvU29tZXRoaW5nV2l0aFRoZU5vbmNlKHJlcykge1xuICAgICAgY29uc29sZS5sb2cocmVzKTtcbiAgICB9XG5cblxuXG4gICAgLy8gLy8gV2hlbiB5b3UgYXJlIHJlYWR5IHRvIHRlYXIgZG93biB5b3VyIGludGVncmF0aW9uXG4gICAgLy8gY2hlY2tvdXQudGVhcmRvd24oZnVuY3Rpb24oKSB7XG4gICAgLy8gICBjaGVja291dCA9IG51bGw7XG4gICAgLy8gICAvLyBicmFpbnRyZWUuc2V0dXAgY2FuIHNhZmVseSBiZSBydW4gYWdhaW4hXG4gICAgLy8gfSk7XG5cbiAgICAkc2NvcGUuJHdhdGNoKCd2bS5jaGVja291dCcsIGZ1bmN0aW9uKGMsIG8pIHtcbiAgICAgIGlmICghYykgcmV0dXJuO1xuXG4gICAgICBjb25zb2xlLmxvZyhjKTtcbiAgICB9KTtcbiAgfVxufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdBbnlEYXlCdWRkeUFkcycpXG4gICAgLmRpcmVjdGl2ZSgnYWRiT3JkZXJzQ3VzdG9tZXInLCBkaXJlY3RpdmUpO1xuXG4gIC8qIEBuZ0luamVjdCAqL1xuICBmdW5jdGlvbiBkaXJlY3RpdmUoKSB7XG4gICAgdmFyIGRpcmVjdGl2ZSA9IHtcbiAgICAgIHJlc3RyaWN0OiAnRUEnLFxuICAgICAgdGVtcGxhdGVVcmw6ICdhc3NldHMvdmlld3Mvb3JkZXJzL29yZGVycy5jdXN0b21lci5odG1sJyxcbiAgICAgIHNjb3BlOiB7XG4gICAgICAgIG9wdGlvbnM6ICc9JyxcbiAgICAgICAgZm9ybTogJz0nLFxuICAgICAgICB0b3RhbDogJz0nLFxuICAgICAgICBjb250cm9sOiAnPSdcbiAgICAgIH0sXG4gICAgICBsaW5rOiBsaW5rRnVuYyxcbiAgICAgIGNvbnRyb2xsZXI6IENvbnRyb2xsZXIsXG4gICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICBiaW5kVG9Db250cm9sbGVyOiB0cnVlXG4gICAgfTtcblxuICAgIHJldHVybiBkaXJlY3RpdmU7XG5cbiAgICBmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcblxuICAgIH1cbiAgfVxuXG4gIENvbnRyb2xsZXIuJGluamVjdCA9IFsnJGh0dHAnLCAnJHEnXTtcblxuICAvKiBAbmdJbmplY3QgKi9cbiAgZnVuY3Rpb24gQ29udHJvbGxlcigkaHR0cCwgJHEpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuXG4gICAgYWN0aXZhdGUoKTtcblxuICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xuXG4gICAgfVxuXG4gICAgdm0ubmV4dFRhYiA9IGZ1bmN0aW9uKCkge1xuICAgICAgdm0uY29udHJvbC5zZWxlY3RlZFRhYiArPSAxO1xuICAgIH1cbiAgfVxufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdBbnlEYXlCdWRkeUFkcycpXG4gICAgLmNvbnRyb2xsZXIoJ09yZGVyc0NvbnRyb2xsZXInLCBDb250cm9sbGVyKTtcblxuICBDb250cm9sbGVyLiRpbmplY3QgPSBbJ18nLCAnJHNjb3BlJywgJyRtZERpYWxvZycsICdEYXRhU2VydmljZSddO1xuXG4gIGZ1bmN0aW9uIENvbnRyb2xsZXIoXywgJHNjb3BlLCAkbWREaWFsb2csIERhdGFTZXJ2aWNlKSB7XG4gICAgdmFyIHZtID0gdGhpcztcblxuICAgIHZtLm9wZW5JbWFnZSA9IG9wZW5JbWFnZTtcbiAgICB2bS5hZGQgPSBhZGQ7XG4gICAgdm0udG90YWwgPSAwO1xuXG4gICAgdm0uY29udHJvbCA9IHtcbiAgICAgIHNlbGVjdGVkVGFiOiAwXG4gICAgfVxuXG4gICAgdm0ub3B0aW9ucyA9IHtcbiAgICAgIHRhcmdldDoge1xuICAgICAgICBkaXNwbGF5OiBbXSxcbiAgICAgICAgbWVkaWE6IFtdLFxuICAgICAgICBpbXByZXNzaW9uc1VuaXRzOiBbXSxcbiAgICAgICAgaW1wcmVzc2lvbnNUaW1lOiBbXSxcbiAgICAgICAgZGlzdGFuY2U6IFtdLFxuICAgICAgICBhZ2U6IFtdLFxuICAgICAgICBnZW5kZXI6IFtdXG4gICAgICB9XG4gICAgfTtcblxuICAgIHZtLmZvcm0gPSB7XG4gICAgICBtZWRpYToge30sXG4gICAgICBvcHRpb25zOiB7XG4gICAgICAgIGRpc3BsYXk6IHt9LFxuICAgICAgICBpbXByZXNzaW9uczoge30sXG4gICAgICAgIGRpc3RhbmNlOiB7fSxcbiAgICAgICAgYWdlOiB7fSxcbiAgICAgICAgZ2VuZGVyOiB7fSxcbiAgICAgICAgaW50ZXJlc3RzOiB7fVxuICAgICAgfSxcbiAgICAgIGN1c3RvbWVyOiB7fSxcbiAgICAgIGF1dGg6IHt9XG4gICAgfVxuXG4gICAgYWN0aXZhdGUoKTtcblxuICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xuICAgICAgRGF0YVNlcnZpY2UuZ2V0T3B0aW9ucygpLnRoZW4oZnVuY3Rpb24ocmVzcCkge1xuICAgICAgICBjb25zb2xlLmxvZyhyZXNwKTtcbiAgICAgICAgdm0ub3B0aW9ucy50YXJnZXQgPSBkb19tZXJnZShyZXNwKTtcbiAgICAgICAgY29uc29sZS5sb2codm0uZm9ybSk7XG4gICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgIH0pXG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBkb19tZXJnZShyb2xlcykge1xuXG4gICAgICAvLyBDdXN0b20gbWVyZ2UgZnVuY3Rpb24gT1JzIHRvZ2V0aGVyIG5vbi1vYmplY3QgdmFsdWVzLCByZWN1cnNpdmVseVxuICAgICAgLy8gY2FsbHMgaXRzZWxmIG9uIE9iamVjdHMuXG4gICAgICB2YXIgbWVyZ2VyID0gZnVuY3Rpb24oYSwgYikge1xuICAgICAgICBpZiAoXy5pc09iamVjdChhKSkge1xuICAgICAgICAgIHJldHVybiBfLm1lcmdlKHt9LCBhLCBiLCBtZXJnZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBhIHx8IGI7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIC8vIEFsbG93IHJvbGVzIHRvIGJlIHBhc3NlZCB0byBfLm1lcmdlIGFzIGFuIGFycmF5IG9mIGFyYml0cmFyeSBsZW5ndGhcbiAgICAgIHZhciBhcmdzID0gXy5mbGF0dGVuKFt7fSwgcm9sZXMsIG1lcmdlcl0pO1xuICAgICAgcmV0dXJuIF8ubWVyZ2UuYXBwbHkoXywgYXJncyk7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBvcGVuSW1hZ2UoJGV2ZW50LCBpbWFnZSkge1xuICAgICAgJG1kRGlhbG9nLnNob3coe1xuICAgICAgICBmdWxsc2NyZWVuOiB0cnVlLFxuICAgICAgICB0YXJnZXRFdmVudDogJGV2ZW50LFxuICAgICAgICBjbGlja091dHNpZGVUb0Nsb3NlOiB0cnVlLFxuICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9zaGFyZWQvbGF5b3V0L2ltYWdlTW9kYWwuaHRtbCcsXG4gICAgICAgIGxvY2Fsczoge1xuICAgICAgICAgIGltYWdlOiBpbWFnZVxuICAgICAgICB9LFxuICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICdpbWFnZScsIGZ1bmN0aW9uKHNjb3BlLCBpbWFnZSkge1xuICAgICAgICAgIHNjb3BlLmltYWdlID0gaW1hZ2U7XG4gICAgICAgIH1dXG4gICAgICB9KTtcbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIGFkZCgpIHtcbiAgICAgICRtZERpYWxvZy5zaG93KHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICdhcHAvY29tcG9uZW50cy9hZC9hZHZlcnRpc2VtZW50TW9kYWwuaHRtbCcsXG4gICAgICAgIGNsaWNrT3V0c2lkZVRvQ2xvc2U6IHRydWUsXG4gICAgICAgIGZ1bGxzY3JlZW46IHRydWVcbiAgICAgIH0pO1xuICAgIH1cblxuICAgICRzY29wZS4kd2F0Y2goJ3ZtLmZvcm0nLCBmdW5jdGlvbihjLCBvKSB7XG4gICAgICBjb25zb2xlLmxvZyhjKTtcblxuICAgICAgdm0udG90YWwgPSBjLm1lZGlhLmhhc093blByb3BlcnR5KCdmZWUnKT9jLm1lZGlhLmZlZTowO1xuXG4gICAgICBfLm1hcChjLm9wdGlvbnMsIGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgaWYgKGl0ZW0uaGFzT3duUHJvcGVydHkoJ2ZlZScpKXtcbiAgICAgICAgICAgIHZtLnRvdGFsICs9ICB2bS50b3RhbCAqIGl0ZW0uZmVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGl0ZW0uaGFzT3duUHJvcGVydHkoJ2Rpc2NvdW50Jykpe1xuICAgICAgICAgICAgdm0udG90YWwgLT0gdm0udG90YWwgKiBpdGVtLmRpc2NvdW50O1xuICAgICAgICB9XG5cbiAgICAgIH0pXG4gICAgfSwgdHJ1ZSlcblxuICB9XG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ0FueURheUJ1ZGR5QWRzJylcbiAgICAuZGlyZWN0aXZlKCdhZGJPcmRlcnNSZXN1bWUnLCBkaXJlY3RpdmUpO1xuXG4gIC8qIEBuZ0luamVjdCAqL1xuICBmdW5jdGlvbiBkaXJlY3RpdmUoKSB7XG4gICAgdmFyIGRpcmVjdGl2ZSA9IHtcbiAgICAgIHJlc3RyaWN0OiAnRUEnLFxuICAgICAgdGVtcGxhdGVVcmw6ICdhc3NldHMvdmlld3Mvb3JkZXJzL29yZGVycy5yZXN1bWUuaHRtbCcsXG4gICAgICBzY29wZToge1xuICAgICAgICBvcHRpb25zOiAnPScsXG4gICAgICAgIGZvcm06ICc9JyxcbiAgICAgICAgdG90YWw6ICc9JyxcbiAgICAgIH0sXG4gICAgICBsaW5rOiBsaW5rRnVuYyxcbiAgICAgIGNvbnRyb2xsZXI6IENvbnRyb2xsZXIsXG4gICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICBiaW5kVG9Db250cm9sbGVyOiB0cnVlXG4gICAgfTtcblxuICAgIHJldHVybiBkaXJlY3RpdmU7XG5cbiAgICBmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcblxuICAgIH1cbiAgfVxuXG4gIENvbnRyb2xsZXIuJGluamVjdCA9IFsnXycsICckaHR0cCcsICckcSddO1xuXG4gIC8qIEBuZ0luamVjdCAqL1xuICBmdW5jdGlvbiBDb250cm9sbGVyKF8sICRodHRwLCAkcSkge1xuICAgIHZhciB2bSA9IHRoaXM7XG5cbiAgICBhY3RpdmF0ZSgpO1xuXG4gICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XG5cbiAgICB9XG5cbiAgICB2bS5mb3JtYXRJbXByZXNzaW9ucyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICBpZiAoIXZtLmZvcm0uaW1wcmVzc2lvblR5cGUgfHwgIXZtLmZvcm0ub3B0aW9ucy5pbXByZXNzaW9ucy5oYXNPd25Qcm9wZXJ0eSgnaWQnKSkgcmV0dXJuO1xuXG4gICAgICB2YXIgdHlwZXMgPSB7XG4gICAgICAgIGltcHJlc3Npb25zVW5pdHM6IF8uam9pbihbdm0uZm9ybS5vcHRpb25zLmltcHJlc3Npb25zLnF1YW50aXR5LCB2bS5mb3JtLm9wdGlvbnMuaW1wcmVzc2lvbnMudHlwZV0sIFwiIFwiKSxcbiAgICAgICAgaW1wcmVzc2lvbnNUaW1lOiBfLmpvaW4oW3ZtLmZvcm0ub3B0aW9ucy5pbXByZXNzaW9ucy50aW1lLCB2bS5mb3JtLm9wdGlvbnMuaW1wcmVzc2lvbnMucGVyaW9kXSwgXCIgXCIpLFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHlwZXNbdm0uZm9ybS5pbXByZXNzaW9uVHlwZV07XG4gICAgfVxuXG4gICAgdm0uZm9ybWF0VGFyZ2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdGFyZ2V0ID0ge1xuICAgICAgICBkaXN0YW5jZTogIHtcbiAgICAgICAgICB2YWx1ZTogdm0uZm9ybS5vcHRpb25zLmRpc3RhbmNlLFxuICAgICAgICAgIHJlbmRlcjogXy5qb2luKFsnRGlzdGFuY2U6JywgKHZtLmZvcm0ub3B0aW9ucy5kaXN0YW5jZS5kaXN0YW5jZSB8fCAnJyksICdLbSddLCAnICcpXG4gICAgICAgIH0sXG4gICAgICAgIGFnZToge1xuICAgICAgICAgIHZhbHVlOiB2bS5mb3JtLm9wdGlvbnMuYWdlLFxuICAgICAgICAgIHJlbmRlcjogXy5qb2luKFsnQWdlIGJldHdlZW46JywgXy5qb2luKHZtLmZvcm0ub3B0aW9ucy5hZ2UucmFuZ2UsICctJykgXSwgJyAnKVxuICAgICAgICB9LFxuICAgICAgICBnZW5kZXI6ICB7XG4gICAgICAgICAgdmFsdWU6IHZtLmZvcm0ub3B0aW9ucy5nZW5kZXIsXG4gICAgICAgICAgcmVuZGVyOiBfLmpvaW4oWydHZW5kZXI6Jywgdm0uZm9ybS5vcHRpb25zLmdlbmRlci5nZW5kZXIgXSwgJyAnKVxuICAgICAgICB9LFxuICAgICAgICBpbnRlcmVzdHM6IHtcbiAgICAgICAgICB2YWx1ZTogdm0uZm9ybS5vcHRpb25zLmludGVyZXN0cyxcbiAgICAgICAgICByZW5kZXI6IF8uam9pbihbJ0ludGVyZXN0czonLCB2bS5mb3JtLm9wdGlvbnMuaW50ZXJlc3RzLnF1YW50aXR5IF0sICcgJylcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgc2VsZWN0ZWQgPSBfLnBpY2tCeSh0YXJnZXQsIGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgcmV0dXJuIGkudmFsdWUuaGFzT3duUHJvcGVydHkoJ2lkJyk7XG4gICAgICB9KTtcblxuICAgICAgaWYgKF8uaXNFbXB0eShzZWxlY3RlZCkpIHJldHVybiAnJztcblxuICAgICAgcmV0dXJuIF8uam9pbihbJ1RhcmdldDogJywgXy5tYXAoT2JqZWN0LmtleXMoc2VsZWN0ZWQpLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgcmV0dXJuIHRhcmdldFtrZXldLnJlbmRlcjtcbiAgICAgIH0pXSwgJycpO1xuXG4gICAgfVxuXG5cbiAgICB2bS5mb3JtYXRSZXN1bWUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiByZXN1bWU7XG4gICAgfVxuICB9XG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ0FueURheUJ1ZGR5QWRzJylcbiAgICAuZGlyZWN0aXZlKCdhZGJEaXNwbGF5Q2hvb3NlcicsIGRpcmVjdGl2ZSk7XG5cbiAgLyogQG5nSW5qZWN0ICovXG4gIGZ1bmN0aW9uIGRpcmVjdGl2ZSgpIHtcbiAgICB2YXIgZGlyZWN0aXZlID0ge1xuICAgICAgcmVzdHJpY3Q6ICdFQScsXG4gICAgICB0ZW1wbGF0ZVVybDogJ2Fzc2V0cy92aWV3cy9vcmRlcnMvb3JkZXJzLmRpc3BsYXkuaHRtbCcsXG4gICAgICBzY29wZToge1xuICAgICAgICBvcHRpb25zOiAnPScsXG4gICAgICAgIGZvcm06ICc9JyxcbiAgICAgICAgdG90YWw6ICc9J1xuICAgICAgfSxcbiAgICAgIGxpbms6IGxpbmtGdW5jLFxuICAgICAgY29udHJvbGxlcjogQ29udHJvbGxlcixcbiAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcbiAgICB9O1xuXG4gICAgcmV0dXJuIGRpcmVjdGl2ZTtcblxuICAgIGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuXG4gICAgfVxuICB9XG5cbiAgQ29udHJvbGxlci4kaW5qZWN0ID0gWyd1aUdtYXBHb29nbGVNYXBBcGknLCAndWlHbWFwSXNSZWFkeScsICckcScsICckc2NvcGUnLCAnJHRpbWVvdXQnLCAnRHJvcHpvbmVTZXJ2aWNlJ107XG5cbiAgLyogQG5nSW5qZWN0ICovXG4gIGZ1bmN0aW9uIENvbnRyb2xsZXIodWlHbWFwR29vZ2xlTWFwQXBpLCB1aUdtYXBJc1JlYWR5LCAkcSwgJHNjb3BlLCAkdGltZW91dCwgRHJvcHpvbmVTZXJ2aWNlKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2YXIgUGxhY2VzID0gbnVsbDtcbiAgICB2YXIgRGlyZWN0aW9uUmVuZGVyZXIgPSBudWxsO1xuICAgIHZhciBEaXJlY3Rpb25zU2VydmljZSA9IG51bGw7XG4gICAgdmFyIFBsYWNlc0F1dG9jb21wbGV0ZSA9IG51bGw7XG5cbiAgICB2bS5jb250cm9sID0ge1xuICAgICAgdXBsb2FkaW5nOiBmYWxzZVxuICAgIH1cbiAgICB2bS5tYXAgPSB7XG4gICAgICBjZW50ZXI6IHtcbiAgICAgICAgbGF0aXR1ZGU6IDQ1LjUwMTc0NTAyODE2NjY3LFxuICAgICAgICBsb25naXR1ZGU6IC03My41NzAzODgxODI5OTc3XG4gICAgICB9LFxuICAgICAgem9vbTogMTQsXG4gICAgICBvcHRpb25zOiB7XG4gICAgICAgIHNjcm9sbHdoZWVsOiB0cnVlXG4gICAgICB9LFxuICAgICAgbWFwTWFya2VyOiB0cnVlLFxuICAgICAgZGlzYWJsZURlZmF1bHRVSTogdHJ1ZSxcbiAgICAgIGNvbnRyb2w6IHt9LFxuICAgICAgZXZlbnRzOiB7XG4gICAgICAgIGNsaWNrOiBjbGlja01hcCxcbiAgICAgICAgaWRsZTogYm91bmRzQ2hhbmdlZFxuICAgICAgfVxuICAgIH07XG5cbiAgICB2bS5pbmZvID0ge1xuICAgICAgbmFtZTogJ1ZlbnVlIG5hbWUnLFxuICAgICAgYWRkcmVzczogJycsXG4gICAgICBpY29uOiAnJyxcbiAgICB9XG5cbiAgICB2bS5tYXJrZXIgPSB7XG4gICAgICBpZDogMCxcbiAgICAgIGxvY2F0aW9uOiB7XG4gICAgICAgIGxhdGl0dWRlOiA0NS41MDE3NDUwMjgxNjY2NyxcbiAgICAgICAgbG9uZ2l0dWRlOiAtNzMuNTcwMzg4MTgyOTk3N1xuICAgICAgfSxcbiAgICAgIHNob3c6IGZhbHNlLFxuICAgIH1cblxuICAgIHZtLmRyb3B6b25lID0gRHJvcHpvbmVTZXJ2aWNlLmNyZWF0ZShmdW5jdGlvbihmaWxlLCByZXNwb25zZSkge1xuICAgICAgJHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2Uuc2VjdXJlX3VybCk7XG4gICAgICAgIHZtLmNvbnRyb2wudXBsb2FkaW5nID0gZmFsc2U7XG4gICAgICB9KTtcbiAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICRzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZtLmNvbnRyb2wudXBsb2FkaW5nID0gdHJ1ZTtcbiAgICAgIH0pO1xuICAgIH0pXG5cbiAgICBhY3RpdmF0ZSgpO1xuXG4gICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XG5cbiAgICAgICRxLmFsbChbdWlHbWFwR29vZ2xlTWFwQXBpLCB1aUdtYXBJc1JlYWR5LnByb21pc2UoMSldKS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgIHZhciBtYXAgPSByZXNwb25zZVswXTtcbiAgICAgICAgdmFyIGluc3RhbmNlID0gcmVzcG9uc2VbMV1bMF0ubWFwO1xuXG4gICAgICAgIHZtLndpbmRvdyA9IHtcbiAgICAgICAgICBwaXhlbE9mZnNldDogbmV3IG1hcC5TaXplKDAsIC00MCksXG4gICAgICAgICAgY2xvc2VDbGljazogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2bS5tYXJrZXIuc2hvdyA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBQbGFjZXNBdXRvY29tcGxldGUgPSBuZXcgbWFwLnBsYWNlcy5BdXRvY29tcGxldGVTZXJ2aWNlKCk7XG4gICAgICAgIERpcmVjdGlvbnNTZXJ2aWNlID0gbmV3IG1hcC5EaXJlY3Rpb25zU2VydmljZSgpO1xuICAgICAgICBEaXJlY3Rpb25SZW5kZXJlciA9IG5ldyBtYXAuRGlyZWN0aW9uc1JlbmRlcmVyKCk7XG4gICAgICAgIHZtLm1hcC5pbnN0YW5jZSA9IGluc3RhbmNlO1xuICAgICAgICBEaXJlY3Rpb25SZW5kZXJlci5zZXRNYXAodm0ubWFwLmluc3RhbmNlKTtcbiAgICAgICAgUGxhY2VzID0gbmV3IG1hcC5wbGFjZXMuUGxhY2VzU2VydmljZSh2bS5tYXAuaW5zdGFuY2UpO1xuICAgICAgICB2bS5wbGFjZXNSZWFkeSA9IHRydWU7XG4gICAgICAgIGNvbnNvbGUubG9nKCdyZWFkeScpO1xuICAgICAgICAvL2dldExvY2F0aW9uKCk7XG5cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHZtLmNsaWNrTWFya2VyID0gZnVuY3Rpb24oKSB7XG4gICAgICBjb25zb2xlLmxvZygnY2xpY2snKTtcbiAgICAgIHZtLm1hcmtlci5zaG93ID0gIXZtLm1hcmtlci5zaG93O1xuICAgICAgJHNjb3BlLiRhcHBseSgpO1xuXG4gICAgfVxuXG4gICAgdm0uYXV0b2NvbXBsZXRlQWRkcmVzcyA9IGZ1bmN0aW9uKGFkZHJlc3MpIHtcbiAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAgIFBsYWNlc0F1dG9jb21wbGV0ZS5nZXRRdWVyeVByZWRpY3Rpb25zKHtcbiAgICAgICAgaW5wdXQ6IGFkZHJlc3NcbiAgICAgIH0sIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShkYXRhID8gXy5maWx0ZXIoZGF0YSwgJ3BsYWNlX2lkJykgOiBbXSk7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgfTtcblxuICAgIHZtLmdldFBsYWNlID0gZnVuY3Rpb24oKSB7XG4gICAgICBjb25zb2xlLmxvZyh2bS5pbmZvLnBsYWNlKTtcblxuICAgICAgaWYgKCF2bS5pbmZvLnBsYWNlKSByZXR1cm47XG5cbiAgICAgIFBsYWNlcy5nZXREZXRhaWxzKHtcbiAgICAgICAgcGxhY2VJZDogdm0uaW5mby5wbGFjZS5wbGFjZV9pZFxuICAgICAgfSwgZnVuY3Rpb24ocGxhY2UsIHN0YXR1cykge1xuICAgICAgICBjb25zb2xlLmxvZyhwbGFjZSwgc3RhdHVzKTtcblxuICAgICAgICB2bS5tYXJrZXIgPSB7XG4gICAgICAgICAgaWQ6IERhdGUubm93KCksXG4gICAgICAgICAgbmFtZTogcGxhY2UubmFtZSxcbiAgICAgICAgICBsb2NhdGlvbjoge1xuICAgICAgICAgICAgbGF0aXR1ZGU6IHBhcnNlRmxvYXQocGxhY2UuZ2VvbWV0cnkubG9jYXRpb24ubGF0KCkpLFxuICAgICAgICAgICAgbG9uZ2l0dWRlOiBwYXJzZUZsb2F0KHBsYWNlLmdlb21ldHJ5LmxvY2F0aW9uLmxuZygpKSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNob3c6IHRydWVcbiAgICAgICAgfTtcblxuXG4gICAgICAgIGNlbnRlck1hcCh2bS5tYXAuaW5zdGFuY2UsIHZtLm1hcmtlci5sb2NhdGlvbiwgbnVsbCwgdHJ1ZSk7XG4gICAgICAgICRzY29wZS4kYXBwbHkoKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBjZW50ZXJNYXAobWFwLCBsb2NhdGlvbiwgb2Zmc2V0LCBzY3JvbGwpIHtcbiAgICAgIGNvbnNvbGUubG9nKGxvY2F0aW9uKTtcbiAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICBtYXAucGFuVG8obmV3IGdvb2dsZS5tYXBzLkxhdExuZyhsb2NhdGlvbi5sYXRpdHVkZSwgbG9jYXRpb24ubG9uZ2l0dWRlKSk7XG4gICAgICAgIGlmIChvZmZzZXQpIG1hcC5wYW5CeSgwLCAtMjAwKTtcbiAgICAgIH0sIDEwMCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xpY2tNYXAobWFwLCBldmVudE5hbWUsIG9yaWdpbmFsRXZlbnRBcmdzKSB7XG4gICAgICB2YXIgZSA9IG9yaWdpbmFsRXZlbnRBcmdzWzBdO1xuICAgICAgdmFyIGxhdCA9IGUubGF0TG5nLmxhdCgpLFxuICAgICAgICBsb24gPSBlLmxhdExuZy5sbmcoKTtcbiAgICAgIHZtLm1hcmtlciA9IHtcbiAgICAgICAgaWQ6IERhdGUubm93KCksXG4gICAgICAgIGxvY2F0aW9uOiB7XG4gICAgICAgICAgbGF0aXR1ZGU6IGxhdCxcbiAgICAgICAgICBsb25naXR1ZGU6IGxvblxuICAgICAgICB9LFxuICAgICAgICBzaG93OiBmYWxzZVxuICAgICAgfTtcbiAgICAgICRzY29wZS4kYXBwbHkoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBib3VuZHNDaGFuZ2VkKCkge1xuICAgICAgY29uc29sZS5sb2coJ2JvdW5kcyBjaGFuZ2VkJyk7XG4gICAgICBpZiAoIXZtLm1hcC5pbnN0YW5jZSkgcmV0dXJuO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldExvY2F0aW9uKCkge1xuICAgICAgaWYgKHZtLmRhdGEubG9jYXRpb24pIHtcbiAgICAgICAgdm0ubG9jYXRpb24gPSB7XG4gICAgICAgICAgbGF0OiBwYXJzZUZsb2F0KHZtLmRhdGEubG9jYXRpb25bMF0pLFxuICAgICAgICAgIGxuZzogcGFyc2VGbG9hdCh2bS5kYXRhLmxvY2F0aW9uWzFdKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vXG4gICAgICAvLyBVdGlsU2VydmljZS5nZXRMb2NhdGlvbigpXG4gICAgICAvLyAgIC50aGVuKGZ1bmN0aW9uKGxvY2F0aW9uKSB7XG4gICAgICAvLyAgICAgdm0ubG9jYXRpb24gPSBsb2NhdGlvbjtcbiAgICAgIC8vICAgICAvL2NlbnRlck1hcCh2bS5tYXAuaW5zdGFuY2UsIHZtLmxvY2F0aW9uKTtcbiAgICAgIC8vICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG4gICAgICAvLyAgICAgaWYgKCRyb290U2NvcGUudXNlci5hZGRyZXNzUGxhY2UpXG4gICAgICAvLyAgICAgICBnZXRQbGFjZSgkcm9vdFNjb3BlLnVzZXIuYWRkcmVzc1BsYWNlLnBsYWNlX2lkKTtcbiAgICAgIC8vXG4gICAgICAvLyAgIH0pLmZpbmFsbHkoZnVuY3Rpb24oKSB7XG4gICAgICAvLyAgICAgLy92bS5tYXBWaXNpYmxlID0gdHJ1ZTtcbiAgICAgIC8vICAgICAvL3ZtLmFjdGl2aXRpZXMucHVzaChsb2NhdGlvbk1hcmtlcigpKTtcbiAgICAgIC8vICAgICBjb25zb2xlLmxvZygnbG9jYXRpb24nKTtcbiAgICAgIC8vICAgfSk7XG5cbiAgICB9XG4gIH1cbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnQW55RGF5QnVkZHlBZHMnKVxuICAgIC5kaXJlY3RpdmUoJ2Ryb3B6b25lJywgZHJvcHpvbmUpO1xuXG4gIGRyb3B6b25lLiRpbmplY3QgPSBbJ0Ryb3B6b25lJ107XG5cbiAgZnVuY3Rpb24gZHJvcHpvbmUoRHJvcHpvbmUpIHtcbiAgICB2YXIgZGlyZWN0aXZlID0ge1xuICAgICAgbGluazogbGluayxcbiAgICAgIHJlc3RyaWN0OiAnRUEnLFxuICAgICAgc2NvcGU6IHtcbiAgICAgICAgZHJvcHpvbmU6ICc9ZHJvcHpvbmUnLFxuICAgICAgICByZXNldDogJ0ByZXNldCdcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBkaXJlY3RpdmU7XG5cbiAgICBmdW5jdGlvbiBsaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuICAgICAgdmFyIGNvbmZpZywgem9uZTtcblxuICAgICAgY29uZmlnID0gc2NvcGUuZHJvcHpvbmU7XG4gICAgICB6b25lID0gbmV3IERyb3B6b25lKGVsZW1lbnRbMF0sIGNvbmZpZy5vcHRpb25zKTtcblxuICAgICAgaWYgKHNjb3BlLnJlc2V0KSB7XG4gICAgICAgIHpvbmUub24oJ2NvbXBsZXRlJywgZnVuY3Rpb24oZmlsZSkge1xuICAgICAgICAgIHpvbmUucmVtb3ZlRmlsZShmaWxlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGFuZ3VsYXIuZm9yRWFjaChjb25maWcuZXZlbnRIYW5kbGVycywgZnVuY3Rpb24oaGFuZGxlciwgZXZlbnQpIHtcbiAgICAgICAgem9uZS5vbihldmVudCwgaGFuZGxlcik7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdBbnlEYXlCdWRkeUFkcycpXG4gICAgLmRpcmVjdGl2ZSgnaGVhZGVyRGlyZWN0aXZlJywgaGVhZGVyRGlyZWN0aXZlKTtcblxuICAvKiBAbmdJbmplY3QgKi9cbiAgZnVuY3Rpb24gaGVhZGVyRGlyZWN0aXZlKCkge1xuICAgIHZhciBkaXJlY3RpdmUgPSB7XG4gICAgICByZXN0cmljdDogJ0VBJyxcbiAgICAgIHRlbXBsYXRlVXJsOiAnYXNzZXRzL3ZpZXdzL2hlYWRlci9oZWFkZXIuaHRtbCcsXG4gICAgICBjb250cm9sbGVyOiBoZWFkZXJDb250cm9sbGVyLFxuICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZSxcbiAgICAgIHNjb3BlOiB7fVxuICAgIH07XG5cbiAgICByZXR1cm4gZGlyZWN0aXZlO1xuICB9XG5cbiAgaGVhZGVyQ29udHJvbGxlci4kaW5qZWN0ID0gWydBdXRoJ107XG5cbiAgLyogQG5nSW5qZWN0ICovXG4gIGZ1bmN0aW9uIGhlYWRlckNvbnRyb2xsZXIoQXV0aCkge1xuICAgIGNvbnNvbGUubG9nKCdQUlVFQkEnKTtcbiAgICB2YXIgdm0gPSB0aGlzO1xuXG4gICAgLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgdm0ubG9nb3V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdMT0dPVVQnKTtcbiAgICAgICAgQXV0aC5sb2dvdXQoKTtcbiAgICB9O1xuXG4gIH1cbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdBbnlEYXlCdWRkeUFkcycpXG4gICAgICAgIC5kaXJlY3RpdmUoJ2Zvb3RlckRpcmVjdGl2ZScsIGZvb3RlckRpcmVjdGl2ZSk7XG5cbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBmb290ZXJEaXJlY3RpdmUoKSB7XG4gICAgICAgIHZhciBkaXJlY3RpdmUgPSB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0VBJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXNzZXRzL3ZpZXdzL2Zvb3Rlci9mb290ZXIuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiBmb290ZXJDb250cm9sbGVyLFxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgICAgICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBkaXJlY3RpdmU7XG4gICAgfVxuXG4gICAgZm9vdGVyQ29udHJvbGxlci4kaW5qZWN0ID0gW107XG5cbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBmb290ZXJDb250cm9sbGVyKCkge1xuICAgICAgICB2YXIgdm0gPSB0aGlzO1xuXG4gICAgICAgIGFjdGl2YXRlKCk7XG5cbiAgICAgICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ2Zvb3RlciBBY3RpdmF0ZWQnKTtcbiAgICAgICAgfVxuICAgIH1cbn0pKCk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
